/*
 * Accounts API documentation
 *
 * ## Introduction  The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.    An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.    | Version | URL | Description |  | - -- | - -- | - -- |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Json/Accounts | Serializes to the Open API document as a string in the JSON format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Yaml/Accounts | Serializes to the Open API document as a string in the Yaml format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Json/Accounts | Serializes to the Open API document as a string in the JSON format and represents OpenAPI V2.0 spec.|  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Yaml/Accounts | Serializes to the Open API document as a string in the Yaml format and represents OpenAPI V2.0 spec. |
 *
 * The version of the OpenAPI document: 2.0.57
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agile.Now.ApiAccounts.Client.OpenAPIDateConverter;

namespace Agile.Now.ApiAccounts.Model
{
    /// <summary>
    /// The record of Account information.
    /// </summary>
    [DataContract(Name = "Account")]
    public partial class Account : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Account() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="id">The identifier of account (required).</param>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="name">The name of the account.</param>
        /// <param name="firstName">Person&#39;s first name (required).</param>
        /// <param name="lastName">Person&#39;s last name (required).</param>
        /// <param name="phone">The phone number of account. The phone number is unique in the system.</param>
        /// <param name="email">The e-mail of account. The email is unique in the system (required).</param>
        /// <param name="languageId">languageId.</param>
        /// <param name="timezoneId">timezoneId.</param>
        /// <param name="dateFormatId">dateFormatId.</param>
        /// <param name="username">Username used to log in into the system. The username is unique in the system (required).</param>
        /// <param name="externalId">External Authentication identifier. Example Azure AD guid.</param>
        /// <param name="notifyByEmail">Defines if a person should get notifications via e-mail (default to false).</param>
        /// <param name="notifyBySMS">Defines if a contact should get notifications via SMS (default to false).</param>
        /// <param name="isActive">Defines if the account is active and can be used (default to false).</param>
        /// <param name="modifiedOn">The date the record was updated (default to &quot;1900-01-01T00:00Z&quot;).</param>
        /// <param name="createdOn">The date the record was created (default to &quot;1900-01-01T00:00Z&quot;).</param>
        public Account(string id = default(string), AbstractLong tenantId = default(AbstractLong), string name = default(string), string firstName = default(string), string lastName = default(string), string phone = default(string), string email = default(string), AbstractText languageId = default(AbstractText), AbstractText timezoneId = default(AbstractText), AbstractText dateFormatId = default(AbstractText), string username = default(string), string externalId = default(string), bool notifyByEmail = false, bool notifyBySMS = false, bool isActive = false, DateTime modifiedOn = default(DateTime), DateTime createdOn = default(DateTime))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Account and cannot be null");
            }
            this.Id = id;
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for Account and cannot be null");
            }
            this.LastName = lastName;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for Account and cannot be null");
            }
            this.Email = email;
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for Account and cannot be null");
            }
            this.Username = username;
            this.TenantId = tenantId;
            this.Name = name;
            this.Phone = phone;
            this.LanguageId = languageId;
            this.TimezoneId = timezoneId;
            this.DateFormatId = dateFormatId;
            this.ExternalId = externalId;
            this.NotifyByEmail = notifyByEmail;
            this.NotifyBySMS = notifyBySMS;
            this.IsActive = isActive;
            this.ModifiedOn = modifiedOn;
            this.CreatedOn = createdOn;
        }

        /// <summary>
        /// The identifier of account
        /// </summary>
        /// <value>The identifier of account</value>
        [DataMember(Name = "Id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "TenantId", EmitDefaultValue = false)]
        public AbstractLong TenantId { get; set; }

        /// <summary>
        /// The name of the account
        /// </summary>
        /// <value>The name of the account</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Person&#39;s first name
        /// </summary>
        /// <value>Person&#39;s first name</value>
        [DataMember(Name = "FirstName", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Person&#39;s last name
        /// </summary>
        /// <value>Person&#39;s last name</value>
        [DataMember(Name = "LastName", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// The phone number of account. The phone number is unique in the system
        /// </summary>
        /// <value>The phone number of account. The phone number is unique in the system</value>
        [DataMember(Name = "Phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// The e-mail of account. The email is unique in the system
        /// </summary>
        /// <value>The e-mail of account. The email is unique in the system</value>
        [DataMember(Name = "Email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets LanguageId
        /// </summary>
        [DataMember(Name = "LanguageId", EmitDefaultValue = false)]
        public AbstractText LanguageId { get; set; }

        /// <summary>
        /// Gets or Sets TimezoneId
        /// </summary>
        [DataMember(Name = "TimezoneId", EmitDefaultValue = false)]
        public AbstractText TimezoneId { get; set; }

        /// <summary>
        /// Gets or Sets DateFormatId
        /// </summary>
        [DataMember(Name = "DateFormatId", EmitDefaultValue = false)]
        public AbstractText DateFormatId { get; set; }

        /// <summary>
        /// Username used to log in into the system. The username is unique in the system
        /// </summary>
        /// <value>Username used to log in into the system. The username is unique in the system</value>
        [DataMember(Name = "Username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// External Authentication identifier. Example Azure AD guid
        /// </summary>
        /// <value>External Authentication identifier. Example Azure AD guid</value>
        [DataMember(Name = "ExternalId", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Defines if a person should get notifications via e-mail
        /// </summary>
        /// <value>Defines if a person should get notifications via e-mail</value>
        /// <example>false</example>
        [DataMember(Name = "NotifyByEmail", EmitDefaultValue = true)]
        public bool NotifyByEmail { get; set; }

        /// <summary>
        /// Defines if a contact should get notifications via SMS
        /// </summary>
        /// <value>Defines if a contact should get notifications via SMS</value>
        /// <example>false</example>
        [DataMember(Name = "NotifyBySMS", EmitDefaultValue = true)]
        public bool NotifyBySMS { get; set; }

        /// <summary>
        /// Defines if the account is active and can be used
        /// </summary>
        /// <value>Defines if the account is active and can be used</value>
        /// <example>false</example>
        [DataMember(Name = "Is_Active", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// The date the record was updated
        /// </summary>
        /// <value>The date the record was updated</value>
        /// <example>1900-01-01T00:00Z</example>
        [DataMember(Name = "ModifiedOn", EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// The date the record was created
        /// </summary>
        /// <value>The date the record was created</value>
        /// <example>1900-01-01T00:00Z</example>
        [DataMember(Name = "CreatedOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  TimezoneId: ").Append(TimezoneId).Append("\n");
            sb.Append("  DateFormatId: ").Append(DateFormatId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  NotifyByEmail: ").Append(NotifyByEmail).Append("\n");
            sb.Append("  NotifyBySMS: ").Append(NotifyBySMS).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
