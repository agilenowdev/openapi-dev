/*
 * Accounts API documentation
 *
 * ## Introduction  The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.    An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.    | Version | URL | Description |  | - -- | - -- | - -- |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Json/Accounts | Serializes to the Open API document as a string in the JSON format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Yaml/Accounts | Serializes to the Open API document as a string in the Yaml format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Json/Accounts | Serializes to the Open API document as a string in the JSON format and represents OpenAPI V2.0 spec.|  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Yaml/Accounts | Serializes to the Open API document as a string in the Yaml format and represents OpenAPI V2.0 spec. |
 *
 * The version of the OpenAPI document: 3.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using Agile.Now.ApiAccounts.Api;
using Agile.Now.ApiAccounts.Client;
using Agile.Now.ApiAccounts.Model;
using Xunit;
using Xunit.Abstractions;
namespace Agile.Now.ApiAccounts.Test.Api
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountsApiTests : IDisposable
    {
        private readonly AccountsApi api;
        private readonly ITestOutputHelper output;

        public AccountsApiTests(ITestOutputHelper testOutputHelper)
        {
            output = testOutputHelper;
            Configuration configuration = new Configuration
            {
                BasePath = "https://dev.esystems.fi",
                OAuthTokenUrl = "https://dev.esystems.fi/oAuth/rest/v2/Token",
                OAuthFlow = Client.Auth.OAuthFlow.APPLICATION,
                OAuthClientId = "c8907421-0886-4fb0-b859-d29966762e16",
                OAuthClientSecret = "1da54fa9-ae11-4db3-9740-1bb47b85cd8e"
            };
            api = new AccountsApi(configuration);
        }

        public void Dispose()
        {
        }

        void UpdateAccountData(AccountData accountData)
        {
            const string updated = "updated";
            accountData.LastName += updated;
            accountData.FirstName += updated;
            accountData.NotifyByEmail = !accountData.NotifyByEmail;
            accountData.NotifyBySMS = !accountData.NotifyBySMS;
            accountData.Email = updated + accountData.Email;
            accountData.LanguageId = accountData.LanguageId.Value == "Finnish" ?
                new("Name", "English") :
                new("Name", "Finnish");
        }

        void AssertAccountDataEqual(AccountData accountData, Account account)
        {
            Assert.Equal(accountData.LastName, account.LastName);
            Assert.Equal(accountData.FirstName, account.FirstName);
            Assert.Equal(accountData.NotifyBySMS, account.NotifyBySMS);
            Assert.Equal(accountData.Email, account.Email);
            Assert.Equal(accountData.IsActive, account.IsActive);

            Assert.Equal($"{accountData.LastName} {accountData.FirstName}", account.Name);

            Assert.NotNull(account.TimezoneId);
            Assert.NotEqual(account.CreatedOn, DateTime.MinValue);
            Assert.True(account.NotifyByEmail);

            Assert.Equal(accountData.DateFormatId.Value, account.DateFormatId.Id);
            Assert.Equal(accountData.LanguageId.Value, account.LanguageId.Name);
        }

        /// <summary>
        /// Test CreateAccount
        /// </summary>
        [Fact]
        public void Test_CreateAccount()
        {
            var newAccount = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(newAccount);

            try
            {
                AssertAccountDataEqual(newAccount, createdAccount);
                Assert.Null(Record.Exception(() => api.GetAccount(createdAccount.Id)));
                output.WriteLine($"TenantId= {createdAccount.TenantId.Id}");
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id, "Id");
            }
        }

        /// <summary>
        /// Test DeleteAccount by Id
        /// </summary>
        [Fact]
        public void Test_DeleteAccount_ById()
        {
            var createdAccount = api.CreateAccount(TestAccountData.CreateAccountData());
            api.DeleteAccount(createdAccount.Id, "Id");
            Assert.Throws<ApiException>(() => api.GetAccount(createdAccount.Id));
        }

        /// <summary>
        /// Test DeleteAccount by UserName
        /// </summary>
        [Fact]
        public void Test_DeleteAccount_ByUserName()
        {
            var createdAccount = api.CreateAccount(TestAccountData.CreateAccountData());
            api.DeleteAccount(createdAccount.Username, "Username");
            Assert.Throws<ApiException>(() => api.GetAccount(createdAccount.Id));
        }

        /// <summary>
        /// Test DeleteAccount with several tenants
        /// </summary>
        [Fact]
        public void Test_DeleteAccount_WithSeveralTenants()
        {
            var newAccount = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(newAccount);
            try
            {
                var anotherAccountTenant = api.UpsertAccountTenant(
                    createdAccount.Id, new(new("Id", ""), new FieldType("Id", "7178")));
                api.DeleteAccount(createdAccount.Id, "Id");
                Assert.Null(Record.Exception(() => api.GetAccount(createdAccount.Id)));
                api.DeleteAccountTenant(createdAccount.Id, anotherAccountTenant.TenantId.Id.ToString());
                api.DeleteAccount(createdAccount.Id, "Id");
                Assert.Throws<ApiException>(() => api.GetAccount(createdAccount.Id));
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id, "Id");
            }
        }

        /// <summary>
        /// Test GetAccount by Id
        /// </summary>
        [Fact]
        public void Test_GetAccount_ById()
        {
            var createdAccount = api.CreateAccount(TestAccountData.CreateAccountData());
            try
            {
                Assert.Null(Record.Exception(() => api.GetAccount(createdAccount.Id)));
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id, "Id");
            }
        }

        /// <summary>
        /// Test GetAccount by UserName
        /// </summary>
        [Fact]
        public void Test_GetAccount_ByUserName()
        {
            var createdAccount = api.CreateAccount(TestAccountData.CreateAccountData());
            try
            {
                Assert.Null(Record.Exception(() => api.GetAccount(createdAccount.Username, "Username")));
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id, "Id");
            }
        }

        /// <summary>
        /// Test ListAccounts by Id
        /// </summary>
        [Fact]
        public void Test_ListAccounts_ById()
        {
            var newAccounts = TestAccountData.CreateAccountDataList(2);
            var createdAccounts = newAccounts.Select(i => api.CreateAccount(i)).ToArray();
            var foundAccounts = api.ListAccounts(
                filters: $"Id In {string.Join("; ", createdAccounts.Select(i => i.Id))}").Data;
            Assert.Equal(foundAccounts.Count, createdAccounts.Length);
        }

        /// <summary>
        /// Test ListAccounts by UserName
        /// </summary>
        [Fact]
        public void Test_ListAccounts_ByUserName()
        {
            var newAccounts = TestAccountData.CreateAccountDataList(2);
            var createdAccounts = newAccounts.Select(i => api.CreateAccount(i)).ToArray();
            var foundAccounts = api.ListAccounts(
                filters: $"Username In {string.Join("; ", createdAccounts.Select(i => i.Username))}").Data;
            Assert.Equal(foundAccounts.Count, createdAccounts.Length);
        }

        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Fact]
        public void Test_UpdateAccount()
        {
            var newAccount = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(newAccount);
            try
            {
                UpdateAccountData(newAccount);
                newAccount.TenantId = new FieldType("Name", "Accounts_API");
                var updatedAccount = api.UpdateAccount(createdAccount.Id, newAccount);
                AssertAccountDataEqual(newAccount, updatedAccount);
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id, "Id");
            }
        }

        /// <summary>
        /// Test UpdateAccount - tenant does not change
        /// </summary>
        [Fact]
        public void Test_UpdateAccount_TenantDoesNotChange()
        {
            var newAccount = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(newAccount);
            try
            {
                UpdateAccountData(newAccount);
                var oldTenant = createdAccount.TenantId.Id;
                newAccount.TenantId = new("Id", (oldTenant + 1).ToString());
                var updatedAccount = api.UpdateAccount(createdAccount.Id, newAccount);
                Assert.Equal(oldTenant, updatedAccount.TenantId.Id);
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id, "Id");
            }
        }

        /// <summary>
        /// Test UpsertAccount
        /// </summary>
        [Fact]
        public void Test_UpsertAccount()
        {
            var account = TestAccountData.CreateAccountData();
            var createdAccount = api.UpsertAccount(account);
            try
            {
                var notFoundException = Record.Exception(() => api.GetAccount(createdAccount.Id));
                Assert.Null(notFoundException);
                UpdateAccountData(account);
                var updatedAccount = api.UpdateAccount(createdAccount.Id, account);
                AssertAccountDataEqual(account, updatedAccount);
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id, "Id");
            }
        }

        /// <summary>
        /// Test DeleteAccountTenant
        /// </summary>
        [Fact]
        public void DeleteAccountTenantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string subId = null;
            //string? name = null;
            //string? subName = null;
            //var response = instance.DeleteAccountTenant(id, subId, name, subName);
            //Assert.IsType<Tenant>(response);
        }

        /// <summary>
        /// Test ListAccountTenants
        /// </summary>
        [Fact]
        public void ListAccountTenantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? name = null;
            //string? fields = null;
            //string? filters = null;
            //string? orders = null;
            //int? currentPage = null;
            //string? pageSize = null;
            //var response = instance.ListAccountTenants(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Tenants>(response);
        }

        /// <summary>
        /// Test UpsertAccountTenant
        /// </summary>
        [Fact]
        public void UpsertAccountTenantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TenantData tenantData = null;
            //string? name = null;
            //var response = instance.UpsertAccountTenant(id, tenantData, name);
            //Assert.IsType<Tenant>(response);
        }
    }
}
