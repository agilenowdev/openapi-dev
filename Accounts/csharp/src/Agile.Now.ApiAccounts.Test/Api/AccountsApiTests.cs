/*
 * Accounts API documentation
 *
 * ## Introduction  The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.    An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.    | Version | URL | Description |  | - -- | - -- | - -- |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Json/Accounts | Serializes to the Open API document as a string in the JSON format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Yaml/Accounts | Serializes to the Open API document as a string in the Yaml format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Json/Accounts | Serializes to the Open API document as a string in the JSON format and represents OpenAPI V2.0 spec.|  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Yaml/Accounts | Serializes to the Open API document as a string in the Yaml format and represents OpenAPI V2.0 spec. |
 *
 * The version of the OpenAPI document: 3.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.Text;
using Agile.Now.ApiAccounts.Api;
using Agile.Now.ApiAccounts.Client;
using Agile.Now.ApiAccounts.Model;
using Xunit;
using Xunit.Abstractions;
namespace Agile.Now.ApiAccounts.Test.Api
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountsApiTests : IDisposable
    {
        private readonly AccountsApi api;
        private readonly ITestOutputHelper output;

        public AccountsApiTests(ITestOutputHelper testOutputHelper)
        {
            output = testOutputHelper;
            Configuration configuration = new Configuration
            {
                BasePath = "https://dev.esystems.fi",
                OAuthTokenUrl = "https://dev.esystems.fi/oAuth/rest/v2/Token",
                OAuthFlow = Client.Auth.OAuthFlow.APPLICATION,
                OAuthClientId = "c8907421-0886-4fb0-b859-d29966762e16",
                OAuthClientSecret = "1da54fa9-ae11-4db3-9740-1bb47b85cd8e"
            };
            api = new AccountsApi(configuration);
        }

        public void Dispose()
        {
        }

        void AssertAccountDataEqual(AccountData accountData, Account account)
        {
            Assert.Equal(accountData.LastName, account.LastName);
            Assert.Equal(accountData.FirstName, account.FirstName);
            Assert.Equal(accountData.Email, account.Email);
            Assert.Equal(accountData.IsActive, account.IsActive);

            Assert.Equal($"{accountData.LastName} {accountData.FirstName}", account.Name);

            Assert.Equal(accountData.DateFormatId.Value, account.DateFormatId.Id);
            Assert.Equal(accountData.LanguageId.Value, account.LanguageId.Name);
        }

        /// <summary>
        /// Test CreateAccount
        /// </summary>
        [Fact]
        public void Test_CreateAccount()
        {
            var accountData = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(accountData);
            try
            {
                AssertAccountDataEqual(accountData, createdAccount);
                Assert.Null(Record.Exception(() => api.GetAccount(createdAccount.Id)));
                output.WriteLine($"TenantId= {createdAccount.TenantId.Id}");
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccount by Id
        /// </summary>
        [Fact]
        public void Test_DeleteAccount_ById()
        {
            var createdAccount = api.CreateAccount(TestAccountData.CreateAccountData());
            api.DeleteAccount(createdAccount.Id);
            Assert.Throws<ApiException>(() => api.GetAccount(createdAccount.Id));
        }

        /// <summary>
        /// Test DeleteAccount by UserName
        /// </summary>
        [Fact]
        public void Test_DeleteAccount_ByUserName()
        {
            var createdAccount = api.CreateAccount(TestAccountData.CreateAccountData());
            api.DeleteAccount(createdAccount.Username, "Username");
            Assert.Throws<ApiException>(() => api.GetAccount(createdAccount.Id));
        }

        /// <summary>
        /// Test DeleteAccount with several tenants
        /// </summary>
        [Fact]
        public void Test_DeleteAccount_WithSeveralTenants()
        {
            var accountData = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(accountData);
            try
            {
                var anotherTenant = api.UpsertAccountTenant(
                    createdAccount.Id, new(new("Id", ""), new FieldType("Id", TestAccountData.AnotherTenant.ToString())));
                api.DeleteAccount(createdAccount.Id);
                Assert.Null(Record.Exception(() => api.GetAccount(createdAccount.Id)));
                api.DeleteAccountTenant(createdAccount.Id, anotherTenant.TenantId.Id.ToString());
                api.DeleteAccount(createdAccount.Id);
                Assert.Throws<ApiException>(() => api.GetAccount(createdAccount.Id));
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }

        /// <summary>
        /// Test GetAccount by Id
        /// </summary>
        [Fact]
        public void Test_GetAccount_ById()
        {
            var createdAccount = api.CreateAccount(TestAccountData.CreateAccountData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existingAccount = api.GetAccount(createdAccount.Id);
                    Assert.Equal(createdAccount.Id, existingAccount.Id);
                    return existingAccount;
                }));
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }

        /// <summary>
        /// Test GetAccount by UserName
        /// </summary>
        [Fact]
        public void Test_GetAccount_ByUserName()
        {
            var createdAccount = api.CreateAccount(TestAccountData.CreateAccountData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existingAccount = api.GetAccount(createdAccount.Username, "Username");
                    Assert.Equal(createdAccount.Username, existingAccount.Username);
                    return existingAccount;
                }));
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }

        /// <summary>
        /// Test ListAccounts by Id
        /// </summary>
        [Fact]
        public void Test_ListAccounts_ById()
        {
            var accountData = TestAccountData.CreateAccountDataList(2);
            var createdAccounts = accountData.Select(i => api.CreateAccount(i)).ToArray();
            try
            {
                var foundAccounts = api.ListAccounts(
                    filters: $"Id In {string.Join("; ", createdAccounts.Select(i => i.Id))}").Data;
                Assert.Equal(foundAccounts.Count, createdAccounts.Length);
            }
            finally
            {
                foreach (var i in createdAccounts)
                    api.DeleteAccount(i.Id);
            }
        }

        /// <summary>
        /// Test ListAccounts by UserName
        /// </summary>
        [Fact]
        public void Test_ListAccounts_ByUserName()
        {
            var accountData = TestAccountData.CreateAccountDataList(2);
            var createdAccounts = accountData.Select(i => api.CreateAccount(i)).ToArray();
            try
            {
                var foundAccounts = api.ListAccounts(
                    filters: $"Username In {string.Join("; ", createdAccounts.Select(i => i.Username))}");
                Assert.Equal(foundAccounts.Data.Count, createdAccounts.Length);
            }
            finally
            {
                foreach (var i in createdAccounts)
                    api.DeleteAccount(i.Id);
            }
        }

        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Fact]
        public void Test_UpdateAccount()
        {
            var accountData = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(accountData);
            try
            {
                TestAccountData.UpdateAccountData(accountData);
                var updatedAccount = api.UpdateAccount(createdAccount.Id, accountData);
                AssertAccountDataEqual(accountData, updatedAccount);
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }

        /// <summary>
        /// Test UpdateAccount - tenant does not change
        /// </summary>
        [Fact]
        public void Test_UpdateAccount_TenantDoesNotChange()
        {
            var accountData = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(accountData);
            try
            {
                TestAccountData.UpdateAccountData(accountData);
                var oldTenant = createdAccount.TenantId.Id;
                accountData.TenantId = new("Id", (oldTenant + 1).ToString());
                var updatedAccount = api.UpdateAccount(createdAccount.Id, accountData);
                Assert.Equal(oldTenant, updatedAccount.TenantId.Id);
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccount
        /// </summary>
        [Fact]
        public void Test_UpsertAccount()
        {
            var accountData = TestAccountData.CreateAccountData();
            var createdAccount = api.UpsertAccount(accountData);
            try
            {
                Assert.Null(Record.Exception(() => api.GetAccount(createdAccount.Id)));
                TestAccountData.UpdateAccountData(accountData);
                var updatedAccount = api.UpdateAccount(createdAccount.Id, accountData);
                AssertAccountDataEqual(accountData, updatedAccount);
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccountTenant
        /// </summary>
        [Fact]
        public void Test_DeleteAccountTenant()
        {
            var accountData = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(accountData);
            try
            {
                var anotherTenant = api.UpsertAccountTenant(
                    createdAccount.Id,
                    new(new("Name", createdAccount.Name + "_another_tenant"),
                    new("Id", TestAccountData.AnotherTenant.ToString())));
                api.DeleteAccountTenant(createdAccount.Id, anotherTenant.UserId.ToString(), subName: "UserId");
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }

        /// <summary>
        /// Test ListAccountTenants
        /// </summary>
        [Fact]
        public void Test_ListAccountTenants()
        {
            var accountData = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(accountData);
            try
            {
                var anotherTenant = api.UpsertAccountTenant(
                    createdAccount.Id,
                    new(new("Name", createdAccount.Name + "_another_tenant"),
                    new("Id", TestAccountData.AnotherTenant.ToString())));
                try
                {
                    var existingAccountTenants = api.ListAccountTenants(createdAccount.Id).Data;
                    Assert.Equal(2, existingAccountTenants.Count);
                }
                finally
                {
                    api.DeleteAccountTenant(createdAccount.Id, anotherTenant.TenantId.Id.ToString());
                }
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccountTenant
        /// </summary>
        [Fact]
        public void Test_UpsertAccountTenant()
        {
            var accountData = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(accountData);
            try
            {
                var anotherTenant = api.UpsertAccountTenant(
                    createdAccount.Id,
                    new(new("Name", createdAccount.Name + "_another_tenant"),
                    new("Id", TestAccountData.AnotherTenant.ToString())));
                try
                {
                    var existingAccountTenants = api.ListAccountTenants(createdAccount.Id).Data;
                    //Assert.Contains(existingAccountTenants, i => i.TenantId.Id == anotherTenant.TenantId.Id);
                }
                finally
                {
                    api.DeleteAccountTenant(createdAccount.Id, anotherTenant.TenantId.Id.ToString(), subName: "UserId");
                }
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccountPicture
        /// </summary>
        [Fact]
        public void Test_DeleteAccountPicture()
        {
            var accountData = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(accountData);
            try
            {
                var picture = api.UpsertAccountPicture(
                    createdAccount.Id,
                    new(createdAccount.Username + "_picture", TestAccountData.PictureData.ToStream()));
                api.DeleteAccountPicture(createdAccount.Id, null);
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccountPicture
        /// </summary>
        [Fact]
        public void Test_UpsertAccountPicture()
        {
            var accountData = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(accountData);
            try
            {
                var picture = api.UpsertAccountPicture(
                    createdAccount.Id,
                    new(createdAccount.Username + "_picture", TestAccountData.PictureData.ToStream()));
                try
                {
                }
                finally
                {
                    api.DeleteAccountPicture(createdAccount.Id, null);
                }
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }

        /// <summary>
        /// Test ListAccountPicture
        /// </summary>
        [Fact]
        public void Test_ListAccountPictures()
        {
            var accountData = TestAccountData.CreateAccountData();
            var createdAccount = api.CreateAccount(accountData);
            try
            {
                var picture = api.UpsertAccountPicture(
                    createdAccount.Id,
                    new(createdAccount.Username + "_picture", TestAccountData.PictureData.ToStream()));
                try
                {
                }
                finally
                {
                    api.DeleteAccountPicture(createdAccount.Id, null);
                }
            }
            finally
            {
                api.DeleteAccount(createdAccount.Id);
            }
        }
    }
}
