openapi: 3.0.3
info:
  contact:
    email: dev@agilenow.io
    name: Agile.Now Dev Team
    url: https://www.agilenow.io
  description: "Agile.Now.Runtime is a dynamic and secure REST API designed to streamline\
    \ the management of users, their access groups, user groups, organizations, locations,\
    \ applications, and roles within a single-tenant environment. This API provides\
    \ a robust, scalable, and secure platform for businesses to manage user access\
    \ and organizational structures effectively. It supports both Role-Based Access\
    \ Control (RBAC) and Attribute-Based Access Control (ABAC) to ensure fine-grained\
    \ security and flexibility."
  license:
    name: BSD-3 license
    url: https://opensource.org/licenses/BSD-3-Clause
  title: Agile.Now.Runtime API
  version: "1.0"
servers:
- description: Default entry point of service Agile.Now server
  url: https://dev.esystems.fi
tags:
- description: Users
  name: Users
paths:
  /Endpoint/rest/api/v1/User/{Id}:
    get:
      description: |-
        The method returns one record of the `User`.

        Method returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: ``

        ### Get a record of User
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, Username` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
      operationId: Get User
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nUsername\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nUsername\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The record of `User` information
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Users
  /Endpoint/rest/api/v1/Users:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: ``

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Users
      parameters:
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, Name, Username, Email, MobilePhone,\
          \ External_Id, Creation_Date, Last_Login, Is_Active\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, Name, Username, Email, MobilePhone,\
            \ External_Id, Creation_Date, Last_Login, Is_Active\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
          description: The list of Users
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/AccessGroups:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `AccessGroup` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `AccessGroupId, UserId`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List User AccessGroups
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, AccessGroupId, UserId, CreatedOn\n\
          ```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, AccessGroupId, UserId, CreatedOn\n\
            ```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroups'
          description: The list of AccessGroups
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/AccessGroup:
    post:
      description: |-
        Use the `AccessGroupPost` object resource to insert or update (Upsert) `AccessGroup` using `Id, UserId.Email, UserId.Username` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `AccessGroupData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `AccessGroupId, UserId`

        ### Update a record of AccessGroup
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * If the `UserId.Email, UserId.Username` field value is not empty and `Id` field value is empty, action try insert record according `UserId.Email, UserId.Username` field value (if set, the value is a unique identifier).

        ### Create a new record of AccessGroup
        * If the value in the `UserId.Email, UserId.Username` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`AccessGroupData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `AccessGroup` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert User AccessGroup
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessGroupData'
        description: |-
          `AccessGroup` information to insert or update.

          The input parameter must be used in the `AccessGroupData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroup'
          description: Inserted or updated `AccessGroup` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "AccessManager:Create, Update"
        - "AccessUser:Create, Update"
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/AccessGroup/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `AccessGroup` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id, UserId.Email, UserId.Username` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `AccessGroup` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `AccessGroupId, UserId`

        ### Delete a record of AccessGroup
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, UserId.Email, UserId.Username` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete User AccessGroup
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the AccessGroup record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the AccessGroup record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nUserId.Email, UserId.Username\n```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nUserId.Email, UserId.Username\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroup'
          description: Deleted `AccessGroup` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Delete
        - AccessUser:Delete
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/Groups:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Group` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `User_Id, Group_Id`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List User Groups
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, User_Id, Group_Id\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, User_Id, Group_Id\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups'
          description: The list of Groups
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/Group:
    post:
      description: |-
        Use the `GroupPost` object resource to insert or update (Upsert) `Group` using `Id, UserId.Email, UserId.Username` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `GroupData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `User_Id, Group_Id`

        ### Update a record of Group
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * If the `UserId.Email, UserId.Username` field value is not empty and `Id` field value is empty, action try insert record according `UserId.Email, UserId.Username` field value (if set, the value is a unique identifier).

        ### Create a new record of Group
        * If the value in the `UserId.Email, UserId.Username` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`GroupData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Group` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert User Group
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupData'
        description: |-
          `Group` information to insert or update.

          The input parameter must be used in the `GroupData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Inserted or updated `Group` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "AccessManager:Create, Update"
        - "AccessUser:Create, Update"
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/Group/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `Group` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id, UserId.Email, UserId.Username` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Group` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `User_Id, Group_Id`

        ### Delete a record of Group
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, UserId.Email, UserId.Username` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete User Group
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the Group record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the Group record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nUserId.Email, UserId.Username\n```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nUserId.Email, UserId.Username\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Deleted `Group` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Delete
        - AccessUser:Delete
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/Departments:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Department` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `DepartmentId, UserId, ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List User Departments
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, DepartmentId, UserId, ModifiedOn,\
          \ ModifiedBy, CreatedBy, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, DepartmentId, UserId, ModifiedOn,\
            \ ModifiedBy, CreatedBy, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Departments'
          description: The list of Departments
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Users
    patch:
      description: |-
        Use the `DepartmentsData` object resource to insert or update (Upsert) a list of `DepartmentData` using `Id, UserId.Email, UserId.Username` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `DepartmentList` record structure as text fields in the foreign key fields.

        Foreign key fields are: `DepartmentId, UserId, ModifiedBy, CreatedBy`

        ### Update a record of Department
        * If the `UserId.Email, UserId.Username` field value is not empty and `Id` field value is empty, action try insert record according `UserId.Email, UserId.Username` field value (if set, the value is a unique identifier).

        **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.

        ### Create a new record of Department
        * If the value in the `UserId.Email, UserId.Username` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`DepartmentData`).

        The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `Department` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.
      operationId: Patch User Departments
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The Delete not exists function delete orphan values from a table.

          If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
        explode: true
        in: query
        name: DeleteNotExists
        required: false
        schema:
          default: "false"
          description: |-
            The Delete not exists function delete orphan values from a table.

            If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentsData'
        description: |-
          The list of Department information to insert or update.

          The input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.
        required: true
        x-bodyName: Data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Departments'
          description: "Inserted or updated list of Department information. \n"
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "AccessManager:Create, Update"
        - "AccessUser:Create, Update"
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/Department:
    post:
      description: |-
        Use the `DepartmentPost` object resource to insert or update (Upsert) `Department` using `Id, UserId.Email, UserId.Username` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `DepartmentData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `DepartmentId, UserId, ModifiedBy, CreatedBy`

        ### Update a record of Department
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * If the `UserId.Email, UserId.Username` field value is not empty and `Id` field value is empty, action try insert record according `UserId.Email, UserId.Username` field value (if set, the value is a unique identifier).

        ### Create a new record of Department
        * If the value in the `UserId.Email, UserId.Username` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`DepartmentData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert User Department
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentData'
        description: |-
          `Department` information to insert or update.

          The input parameter must be used in the `DepartmentData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: Inserted or updated `Department` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "AccessManager:Create, Update"
        - "AccessUser:Create, Update"
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/Department/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `Department` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id, UserId.Email, UserId.Username` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `DepartmentId, UserId, ModifiedBy, CreatedBy`

        ### Delete a record of Department
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, UserId.Email, UserId.Username` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete User Department
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nUserId.Email, UserId.Username\n```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nUserId.Email, UserId.Username\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: Deleted `Department` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Delete
        - AccessUser:Delete
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/Locations:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Location` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `LocationId, UserId, ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List User Locations
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, LocationId, UserId, ModifiedOn,\
          \ ModifiedBy, CreatedBy, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, LocationId, UserId, ModifiedOn,\
            \ ModifiedBy, CreatedBy, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locations'
          description: The list of Locations
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Users
    patch:
      description: |-
        Use the `LocationsData` object resource to insert or update (Upsert) a list of `LocationData` using `Id, UserId.Email, UserId.Username` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `LocationList` record structure as text fields in the foreign key fields.

        Foreign key fields are: `LocationId, UserId, ModifiedBy, CreatedBy`

        ### Update a record of Location
        * If the `UserId.Email, UserId.Username` field value is not empty and `Id` field value is empty, action try insert record according `UserId.Email, UserId.Username` field value (if set, the value is a unique identifier).

        **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.

        ### Create a new record of Location
        * If the value in the `UserId.Email, UserId.Username` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`LocationData`).

        The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `Location` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.
      operationId: Patch User Locations
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The Delete not exists function delete orphan values from a table.

          If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
        explode: true
        in: query
        name: DeleteNotExists
        required: false
        schema:
          default: "false"
          description: |-
            The Delete not exists function delete orphan values from a table.

            If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationsData'
        description: |-
          The list of Location information to insert or update.

          The input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.
        required: true
        x-bodyName: Data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locations'
          description: "Inserted or updated list of Location information. \n"
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "AccessManager:Create, Update"
        - "AccessUser:Create, Update"
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/Location:
    post:
      description: |-
        Use the `LocationPost` object resource to insert or update (Upsert) `Location` using `Id, UserId.Email, UserId.Username` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `LocationData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `LocationId, UserId, ModifiedBy, CreatedBy`

        ### Update a record of Location
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * If the `UserId.Email, UserId.Username` field value is not empty and `Id` field value is empty, action try insert record according `UserId.Email, UserId.Username` field value (if set, the value is a unique identifier).

        ### Create a new record of Location
        * If the value in the `UserId.Email, UserId.Username` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`LocationData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert User Location
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationData'
        description: |-
          `Location` information to insert or update.

          The input parameter must be used in the `LocationData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: Inserted or updated `Location` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "AccessManager:Create, Update"
        - "AccessUser:Create, Update"
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/Location/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `Location` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id, UserId.Email, UserId.Username` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `LocationId, UserId, ModifiedBy, CreatedBy`

        ### Delete a record of Location
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, UserId.Email, UserId.Username` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete User Location
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nUserId.Email, UserId.Username\n```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nUserId.Email, UserId.Username\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: Deleted `Location` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Delete
        - AccessUser:Delete
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/Applications:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Application` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `UserId, AccessRoleId, RoleId, AccessGroupTypeId`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List User Applications
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, UserId, AccessRoleId, RoleId,\
          \ AccessGroupTypeId, Create, Read, Update, Delete, Details, Export, Import,\
          \ Generic, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, UserId, AccessRoleId, RoleId,\
            \ AccessGroupTypeId, Create, Read, Update, Delete, Details, Export, Import,\
            \ Generic, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applications'
          description: The list of Applications
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/AccessRoles:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `AccessRole` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `UserId, AccessRoleId, RoleId, AccessGroupTypeId`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List User AccessRoles
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, UserId, AccessRoleId, RoleId,\
          \ AccessGroupTypeId, Create, Read, Update, Delete, Details, Export, Import,\
          \ Generic, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, UserId, AccessRoleId, RoleId,\
            \ AccessGroupTypeId, Create, Read, Update, Delete, Details, Export, Import,\
            \ Generic, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRoles'
          description: The list of AccessRoles
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Users
  /Endpoint/rest/api/v1/User/{Id}/EffectivePermissions:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `EffectivePermission` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `UserId, AccessRoleId, RoleId, AccessGroupTypeId`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List User EffectivePermissions
      parameters:
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, UserId, AccessRoleId, AccessGroupTypeId,\
          \ Create, Read, Update, Delete, Details, Export, Import, Generic, CreatedOn\n\
          ```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, UserId, AccessRoleId, AccessGroupTypeId,\
            \ Create, Read, Update, Delete, Details, Export, Import, Generic, CreatedOn\n\
            ```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EffectivePermissions'
          description: The list of EffectivePermissions
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Users
components:
  responses:
    "400":
      content:
        application/json:
          example:
            Errors:
            - The user has provided input that the browser is unable to convert.
            - There are multiple rows in the database for the same value
            - The value does not match the specified entity structure
            - '...'
            Type: /Errors/Bad Input
            Title: Bad Request
            StatusCode: 400
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request - The user has provided input that the browser is unable
        to convert.
    "401":
      content:
        application/json:
          example:
            Errors:
            - The session Id or OAuth token used has expired or is invalid.
            Type: /Errors/Unauthorized
            Title: Unauthorized
            StatusCode: 401
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized - The response status code indicates that the client
        request has not been completed because it lacks valid authentication credentials
        for the requested resource.
    "403":
      content:
        application/json:
          example:
            Errors:
            - The user does not have access to execute operation
            Type: /Errors/Permission
            Title: Bad Request
            StatusCode: 403
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden - The user does not have access to execute operation
    "404":
      content:
        application/json:
          example:
            Errors:
            - The requested resource does not exist
            Type: /Errors/Not Found
            Title: Not Found
            StatusCode: 404
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found - The requested resource does not exist.
    "500":
      content:
        application/json:
          example:
            Errors:
            - An internal server error is an error on the web server you're trying
              to access.
            Type: /Errors/Internal Server Error
            Title: Internal Server Error
            StatusCode: 500
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal Server Error - An internal server error is an error on
        the web server you're trying to access.
  schemas:
    Meta:
      description: The object provides metadata about the list of items returned in
        the API response. It typically includes information that helps clients understand
        and work with the data.
      example:
        Type: User
        PageSize: 50
        CurrentPage: 50
        TotalItems: 1000
      properties:
        TotalItems:
          default: 0
          description: "This field represents the total number of items available\
            \ in the entire dataset, not just the items returned in the current response.\
            \ It's useful for implementing pagination, as clients can use it to calculate\
            \ the number of pages or total available items."
          example: 1000
          format: int32
          type: integer
        CurrentPage:
          default: 1
          description: This field specifies the current page of results being returned.
            It's often used in conjunction with `PageSize` to manage pagination by
            indicating which subset of the total data is currently being retrieved.
          example: 50
          format: int32
          type: integer
        PageSize:
          default: 50
          description: The field indicates the number of items returned in a single
            page or response. It helps clients determine how many items to display
            per page and how to request additional pages if needed.
          example: 50
          format: int32
          type: integer
        Type:
          description: The type of the record
          example: User
          type: string
      required:
      - CurrentPage
      - PageSize
      - TotalItems
      - Type
      type: object
    Error:
      description: The list of errors. Throw specific exceptions based on the received
        error.
      example:
        Errors:
        - ""
        - ""
        Type: ""
        Instance: ""
        RequestKey: ""
        Title: ""
        StatusCode: 400
      properties:
        Errors:
          description: Human-readable explanation of the errors
          items:
            default: ""
            type: string
          type: array
        Type:
          default: ""
          description: URI identifier that categorizes the error
          type: string
        Title:
          default: ""
          description: "Brief, human-readable message about the error"
          type: string
        StatusCode:
          description: The HTTP response code
          example: 400
          format: int32
          type: integer
        Instance:
          default: ""
          description: URI that identifies the specific occurrence of the error
          type: string
        RequestKey:
          default: ""
          description: Provides a request key that identifies the current request.
          type: string
      required:
      - Errors
      - StatusCode
      type: object
    User:
      description: The record of User information.
      example:
        External_Id: External_Id
        Email: Email
        Is_Active: false
        Username: Username
        Last_Login: 1900-01-01T00:00:00Z
        Creation_Date: 1900-01-01T00:00:00Z
        Id: 0
        MobilePhone: MobilePhone
        Name: Name
      properties:
        Id:
          default: 0
          description: Unique identifier of the user.
          example: 0
          format: int32
          type: integer
        Name:
          description: Full name of the user.
          type: string
        Username:
          description: Login name of the user.
          type: string
        Email:
          description: Email contact of the user.
          type: string
        MobilePhone:
          description: Mobile phone number of the user.
          type: string
        External_Id:
          description: The user identifier in an external system to the Platform.
          type: string
        Creation_Date:
          default: 1900-01-01T00:00:00Z
          description: The date the user was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        Last_Login:
          default: 1900-01-01T00:00:00Z
          description: Last time the user logged in the application.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        Is_Active:
          default: false
          description: Indicates if the user is still active.
          example: false
          type: boolean
      required:
      - Creation_Date
      - Id
      - Is_Active
      type: object
    Users:
      description: The list of `User` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - External_Id: External_Id
          Email: Email
          Is_Active: false
          Username: Username
          Last_Login: 1900-01-01T00:00:00Z
          Creation_Date: 1900-01-01T00:00:00Z
          Id: 0
          MobilePhone: MobilePhone
          Name: Name
        - External_Id: External_Id
          Email: Email
          Is_Active: false
          Username: Username
          Last_Login: 1900-01-01T00:00:00Z
          Creation_Date: 1900-01-01T00:00:00Z
          Id: 0
          MobilePhone: MobilePhone
          Name: Name
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `User records`
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    AccessGroup:
      description: The record of AccessGroup information.
      example:
        Description: Description
        Is_Active: false
        AccessGroupTypeId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        Is_System: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        Name: Name
      properties:
        Id:
          description: The identifier of access group
          type: string
        Name:
          description: The name of access group
          type: string
        ExternalId:
          description: The external system code of the access group
          type: string
        Description:
          description: The description of access group
          type: string
        Is_Active:
          default: false
          description: Defines if record is active
          example: false
          type: boolean
        Is_System:
          default: false
          description: "Defines if access group is system and end-user cannot change\
            \ it general, permissions and applications."
          example: false
          type: boolean
        AccessGroupTypeId:
          $ref: '#/components/schemas/AbstractText'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - Name
      type: object
    AccessGroups:
      description: The list of `AccessGroup` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - Description: Description
          Is_Active: false
          AccessGroupTypeId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Is_System: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          Name: Name
        - Description: Description
          Is_Active: false
          AccessGroupTypeId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Is_System: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          Name: Name
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `AccessGroup records`
          items:
            $ref: '#/components/schemas/AccessGroup'
          type: array
      type: object
    AbstractText:
      description: This structure represents an abstract object with a primary key
        of type Text. It is used to encapsulate detailed information about related
        entities.
      example:
        Type: User
        ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
        Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
        Name: Bob Normal
      properties:
        Id:
          description: The primary key of the record. It uniquely identifies each
            record within the dataset. This attribute is required and must be unique
            across all records.
          example: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          type: string
        ExternalId:
          description: "An external identifier for the record, which can be used to\
            \ link the record to external systems or datasets. This attribute is optional\
            \ but should be unique if provided."
          example: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          type: string
        Name:
          description: "The name of the record. This attribute provides a human-readable\
            \ identifier for the record, making it easier to recognize and differentiate\
            \ records in lists or other displays. This attribute is optional."
          example: Bob Normal
          type: string
        Type:
          description: "The type of the record object. This attribute is used to classify\
            \ the record into specific categories or types, helping to organize and\
            \ manage different kinds of records. This attribute is optional."
          example: User
          type: string
      type: object
    AbstractLong:
      description: This structure represents an abstract object with a primary key
        of type Long. It is used to encapsulate detailed information about related
        entities.
      example:
        Type: User
        ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
        Id: 1234567891234567
        Name: Bob Normal
      properties:
        Id:
          default: 0
          description: The primary key of the record. It uniquely identifies each
            record within the dataset. This attribute is required and must be unique
            across all records.
          example: 1234567891234567
          format: int64
          type: integer
        ExternalId:
          description: "An external identifier for the record, which can be used to\
            \ link the record to external systems or datasets. This attribute is optional\
            \ but should be unique if provided."
          example: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          type: string
        Name:
          description: "The name of the record. This attribute provides a human-readable\
            \ identifier for the record, making it easier to recognize and differentiate\
            \ records in lists or other displays. This attribute is optional."
          example: Bob Normal
          type: string
        Type:
          description: "The type of the record object. This attribute is used to classify\
            \ the record into specific categories or types, helping to organize and\
            \ manage different kinds of records. This attribute is optional."
          example: User
          type: string
      type: object
    AccessGroupData:
      description: The record of AccessGroup information.
      example:
        AccessGroupId:
          Field: Field
          Value: Value
      properties:
        AccessGroupId:
          $ref: '#/components/schemas/FieldType'
      type: object
    FieldType:
      description: "The field object structure. This structure allows users to specify\
        \ any related entity field and its corresponding value. When saving data,\
        \ the system automatically retrieves and assigns the primary key value from\
        \ the system database table based on the provided field name and value."
      example:
        Field: Field
        Value: Value
      properties:
        Field:
          description: "The name of the data field. This can be any field name from\
            \ the related database table, such as 'Email' from the User table or 'Name'\
            \ from the Department table."
          type: string
        Value:
          description: "The value corresponding to the specified data field. This\
            \ value is used to identify the record in the related database table.\
            \ For example, it could be an email address, a department name, or an\
            \ external system's identifier."
          type: string
      required:
      - Value
      type: object
    Group:
      description: The record of Group information.
      example:
        Has_Custom_Management: false
        Description: Description
        Id: 0
        Name: Name
        Created: 1900-01-01T00:00:00Z
      properties:
        Id:
          default: 0
          example: 0
          format: int32
          type: integer
        Name:
          type: string
        Description:
          type: string
        Created:
          default: 1900-01-01T00:00:00Z
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        Has_Custom_Management:
          default: false
          example: false
          type: boolean
      required:
      - Id
      type: object
    Groups:
      description: The list of `Group` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - Has_Custom_Management: false
          Description: Description
          Id: 0
          Name: Name
          Created: 1900-01-01T00:00:00Z
        - Has_Custom_Management: false
          Description: Description
          Id: 0
          Name: Name
          Created: 1900-01-01T00:00:00Z
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Group records`
          items:
            $ref: '#/components/schemas/Group'
          type: array
      type: object
    GroupData:
      description: The record of Group information.
      example:
        Group_Id:
          Field: Field
          Value: Value
      properties:
        Group_Id:
          $ref: '#/components/schemas/FieldType'
      type: object
    Department:
      description: The record of Department information.
      example:
        DepartmentTypeId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        CountryId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        ParentDepartmentId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        HierarchicalName: HierarchicalName
        Name: Name
        ContactPhone: ContactPhone
        Is_Active: false
        ContactEmail: ContactEmail
        Level: 0
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ContactName: ContactName
      properties:
        Id:
          description: The guid to identify the department
          type: string
        ExternalId:
          description: The external identifier of the department
          type: string
        Name:
          description: The name of the department
          type: string
        DepartmentTypeId:
          $ref: '#/components/schemas/AbstractText'
        ParentDepartmentId:
          $ref: '#/components/schemas/AbstractText'
        HierarchicalName:
          description: The hierarchical name of the department
          type: string
        Level:
          default: 0
          description: The department level at the hierarchy
          example: 0
          format: int32
          type: integer
        ContactName:
          description: The contact name of company or department
          type: string
        ContactEmail:
          description: The contact email of external company or department
          type: string
        ContactPhone:
          type: string
        CountryId:
          $ref: '#/components/schemas/AbstractText'
        Is_Active:
          default: false
          description: Defines if the department is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - DepartmentTypeId
      - Id
      - Is_Active
      - Name
      type: object
    Departments:
      description: The list of `Department` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - DepartmentTypeId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CountryId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          ParentDepartmentId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          HierarchicalName: HierarchicalName
          Name: Name
          ContactPhone: ContactPhone
          Is_Active: false
          ContactEmail: ContactEmail
          Level: 0
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ContactName: ContactName
        - DepartmentTypeId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CountryId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          ParentDepartmentId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          HierarchicalName: HierarchicalName
          Name: Name
          ContactPhone: ContactPhone
          Is_Active: false
          ContactEmail: ContactEmail
          Level: 0
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ContactName: ContactName
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Department records`
          items:
            $ref: '#/components/schemas/Department'
          type: array
      type: object
    DepartmentData:
      description: The record of Department information.
      example:
        DepartmentId:
          Field: Field
          Value: Value
      properties:
        DepartmentId:
          $ref: '#/components/schemas/FieldType'
      type: object
    DepartmentText:
      description: The record of Department information.
      example:
        DepartmentId: DepartmentId
      properties:
        DepartmentId:
          description: The identifier of the department.
          type: string
      type: object
    DepartmentsData:
      description: The data loading record of Department importing
      example:
        Departments:
        - DepartmentId: DepartmentId
        - DepartmentId: DepartmentId
        Extra:
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        IsFullValidation: false
      properties:
        Extra:
          description: List validation for entity attribute
          items:
            $ref: '#/components/schemas/ListValidation'
          type: array
        IsFullValidation:
          default: false
          description: "If the value is true, the data quality of all fields are checked.\
            \ This has an effect on performance."
          example: false
          type: boolean
        Departments:
          description: The list of `Department` data record for import
          items:
            $ref: '#/components/schemas/DepartmentText'
          type: array
      type: object
    ListValidation:
      description: List validation for entity attribute
      example:
        Pattern: Pattern
        DefaultValue: DefaultValue
        Min: Min
        Required: false
        Max: Max
        Unique: false
        FieldName: FieldName
        Name: Name
      properties:
        Name:
          description: The name of the entity field.
          type: string
        FieldName:
          description: "The field name of relation database table.\n\nExample; \n\
            The field name is 'TenantId' and is associated with the 'Tenant' table.\
            \ You want to use in the 'Tenant' table 'Name' field fetching data. Once\
            \ 'Name' is specified, the validation service retrieves the tenant identifier\
            \ from the 'Tenant' table based on the 'Name' field."
          type: string
        Required:
          default: false
          description: "If True, the value is required."
          example: false
          type: boolean
        Unique:
          default: false
          description: "If True, the value must be unique in the database and you\
            \ cannot add multiple values."
          example: false
          type: boolean
        Max:
          description: The max value of input value.
          type: string
        Min:
          description: The min value of input value.
          type: string
        Pattern:
          description: The pattern of the validation. Searches the input string for
            an occurrence of a regular expression.
          type: string
        DefaultValue:
          description: "The default value of row. If the value of the field is empty,\
            \ the service automatically sets the value in the field. If the value\
            \ does not match the data type, the value is cleaned. Remember data types."
          type: string
      required:
      - Name
      type: object
    Location:
      description: The record of Location information.
      example:
        CountryId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        Id: Id
        TimezoneId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        CreatedOn: 1900-01-01T00:00:00Z
        CurrencyId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        Name: Name
      properties:
        Id:
          description: The guid to identify the location
          type: string
        ExternalId:
          description: The external identifier of the location
          type: string
        Name:
          description: The name of the location
          type: string
        CountryId:
          $ref: '#/components/schemas/AbstractText'
        TimezoneId:
          $ref: '#/components/schemas/AbstractText'
        CurrencyId:
          $ref: '#/components/schemas/AbstractText'
        Is_Active:
          default: false
          description: Defines if the location is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - Is_Active
      - Name
      type: object
    Locations:
      description: The list of `Location` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - CountryId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Id: Id
          TimezoneId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedOn: 1900-01-01T00:00:00Z
          CurrencyId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Name: Name
        - CountryId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Id: Id
          TimezoneId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedOn: 1900-01-01T00:00:00Z
          CurrencyId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Name: Name
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Location records`
          items:
            $ref: '#/components/schemas/Location'
          type: array
      type: object
    LocationData:
      description: The record of Location information.
      example:
        LocationId:
          Field: Field
          Value: Value
      properties:
        LocationId:
          $ref: '#/components/schemas/FieldType'
      type: object
    LocationText:
      description: The record of Location information.
      example:
        LocationId: LocationId
      properties:
        LocationId:
          description: The identifier of the location.
          type: string
      type: object
    LocationsData:
      description: The data loading record of Location importing
      example:
        Extra:
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        IsFullValidation: false
        Locations:
        - LocationId: LocationId
        - LocationId: LocationId
      properties:
        Extra:
          description: List validation for entity attribute
          items:
            $ref: '#/components/schemas/ListValidation'
          type: array
        IsFullValidation:
          default: false
          description: "If the value is true, the data quality of all fields are checked.\
            \ This has an effect on performance."
          example: false
          type: boolean
        Locations:
          description: The list of `Location` data record for import
          items:
            $ref: '#/components/schemas/LocationText'
          type: array
      type: object
    Application:
      description: The record of Application information.
      example:
        ApplicationKey: ApplicationKey
        Description: Description
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        Is_ReadOnly: false
        AuthenticationId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        Name: Name
        Is_Active: false
        Is_TestApp: false
        WebSiteURL: WebSiteURL
        Is_System: false
        Is_EndUser: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ApplicationId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
      properties:
        Id:
          description: The identifier of the access application
          type: string
        ApplicationId:
          $ref: '#/components/schemas/AbstractLong'
        Name:
          description: Name of application
          type: string
        ApplicationKey:
          description: The key used to identify the application must be unique within
            each workspace.
          type: string
        ExternalId:
          description: The external system code of the application
          type: string
        Description:
          description: The description of access group
          type: string
        WebSiteURL:
          description: Web Site URL of application
          type: string
        Is_System:
          default: false
          description: Defines if application is system (setting menu)
          example: false
          type: boolean
        Is_EndUser:
          default: false
          description: Specifies whether the application is an end-user application
          example: false
          type: boolean
        Is_TestApp:
          default: false
          description: Specifies whether the application is a test application
          example: false
          type: boolean
        Is_Active:
          default: false
          description: Defines if the application is active and can be used
          example: false
          type: boolean
        Is_ReadOnly:
          default: false
          description: Determines whether the application is readonly and can be modified
          example: false
          type: boolean
        AuthenticationId:
          $ref: '#/components/schemas/AbstractText'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - Is_Active
      - Is_ReadOnly
      type: object
    Applications:
      description: The list of `Application` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - ApplicationKey: ApplicationKey
          Description: Description
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Is_ReadOnly: false
          AuthenticationId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Name: Name
          Is_Active: false
          Is_TestApp: false
          WebSiteURL: WebSiteURL
          Is_System: false
          Is_EndUser: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ApplicationId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
        - ApplicationKey: ApplicationKey
          Description: Description
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Is_ReadOnly: false
          AuthenticationId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Name: Name
          Is_Active: false
          Is_TestApp: false
          WebSiteURL: WebSiteURL
          Is_System: false
          Is_EndUser: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ApplicationId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Application records`
          items:
            $ref: '#/components/schemas/Application'
          type: array
      type: object
    AccessRole:
      description: The record of AccessRole information.
      example:
        RoleKey: RoleKey
        Description: Description
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        Is_ReadOnly: false
        RoleId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Name: Name
        Is_Custom: false
        AccessApplicationId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        Is_Active: false
        FullName: FullName
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ApplicationId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        EspaceId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
      properties:
        Id:
          description: The identifier of the role
          type: string
        Name:
          description: Name of role
          type: string
        RoleKey:
          description: ' The key used to identify the role must be unique within each
            workspace.'
          type: string
        FullName:
          description: Full name of role. Example Application 1 \ Espace 1 \ Role
            1
          type: string
        Description:
          description: The description of access group
          type: string
        ExternalId:
          description: The external system code of the role
          type: string
        AccessApplicationId:
          $ref: '#/components/schemas/AbstractText'
        RoleId:
          $ref: '#/components/schemas/AbstractLong'
        ApplicationId:
          $ref: '#/components/schemas/AbstractLong'
        EspaceId:
          $ref: '#/components/schemas/AbstractLong'
        Is_Active:
          default: false
          description: Defines if record is active
          example: false
          type: boolean
        Is_Custom:
          default: false
          description: Determines whether the role has been modified externally or
            whether it is synchronized from the OutSystems structure
          example: false
          type: boolean
        Is_ReadOnly:
          default: false
          description: Determines whether the role is readonly and can be modified
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - Is_ReadOnly
      - RoleKey
      type: object
    AccessRoles:
      description: The list of `AccessRole` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - RoleKey: RoleKey
          Description: Description
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Is_ReadOnly: false
          RoleId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Name: Name
          Is_Custom: false
          AccessApplicationId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Is_Active: false
          FullName: FullName
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ApplicationId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          EspaceId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
        - RoleKey: RoleKey
          Description: Description
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Is_ReadOnly: false
          RoleId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Name: Name
          Is_Custom: false
          AccessApplicationId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Is_Active: false
          FullName: FullName
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ApplicationId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          EspaceId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `AccessRole records`
          items:
            $ref: '#/components/schemas/AccessRole'
          type: array
      type: object
    EffectivePermission:
      description: The record of EffectivePermission information.
      example:
        Read: false
        Delete: false
        Details: false
        Import: false
        AccessGroupTypeId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        Create: false
        Generic: false
        AccessRoleId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        Export: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        Update: false
      properties:
        Id:
          description: The identifier of entity
          type: string
        AccessRoleId:
          $ref: '#/components/schemas/AbstractText'
        AccessGroupTypeId:
          $ref: '#/components/schemas/AbstractText'
        Create:
          default: false
          description: Create access of role
          example: false
          type: boolean
        Read:
          default: false
          description: Read access of role
          example: false
          type: boolean
        Update:
          default: false
          description: Update access of role
          example: false
          type: boolean
        Delete:
          default: false
          description: Delete access of role
          example: false
          type: boolean
        Details:
          default: false
          description: Details access of role
          example: false
          type: boolean
        Export:
          default: false
          description: Export access of role
          example: false
          type: boolean
        Import:
          default: false
          description: Import access of role
          example: false
          type: boolean
        Generic:
          default: false
          description: Generic access without CRUD of role
          example: false
          type: boolean
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - AccessRoleId
      - Id
      type: object
    EffectivePermissions:
      description: The list of `EffectivePermission` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - Read: false
          Delete: false
          Details: false
          Import: false
          AccessGroupTypeId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Create: false
          Generic: false
          AccessRoleId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Export: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          Update: false
        - Read: false
          Delete: false
          Details: false
          Import: false
          AccessGroupTypeId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Create: false
          Generic: false
          AccessRoleId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Export: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          Update: false
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `EffectivePermission records`
          items:
            $ref: '#/components/schemas/EffectivePermission'
          type: array
      type: object
  securitySchemes:
    OAuth2:
      description: oAuth autentication flow
      flows:
        clientCredentials:
          refreshUrl: https://dev.esystems.fi/oAuth/rest/v2/Token
          scopes:
            AccessManager:Read: Allows to edit access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessUser:Read: Allows to review access groups and all related data.
              (ABAC) permissions required to perform a function.
          tokenUrl: https://dev.esystems.fi/oAuth/rest/v2/Token
      type: oauth2

