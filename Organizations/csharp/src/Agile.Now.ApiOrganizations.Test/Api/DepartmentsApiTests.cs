/*
 * Organization API
 *
 * ## Introduction  The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.    An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.    | Version | URL | Description |  | - -- | - -- | - -- |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Json/Organizations | Serializes to the Open API document as a string in the JSON format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Yaml/Organizations | Serializes to the Open API document as a string in the Yaml format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Json/Organizations | Serializes to the Open API document as a string in the JSON format and represents OpenAPI V2.0 spec.|  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Yaml/Organizations | Serializes to the Open API document as a string in the Yaml format and represents OpenAPI V2.0 spec. |
 *
 * The version of the OpenAPI document: 2.0.100
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Agile.Now.ApiOrganizations.Client;
using Agile.Now.ApiOrganizations.Api;
using Xunit.Abstractions;
using Microsoft.VisualStudio.TestPlatform.Utilities;
using Agile.Now.ApiOrganizations.Model;
// uncomment below to import models
//using Agile.Now.ApiOrganizations.Model;

namespace Agile.Now.ApiOrganizations.Test.Api
{
    /// <summary>
    ///  Class for testing DepartmentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DepartmentsApiTests : IDisposable
    {
        private readonly DepartmentsApi api;

        public DepartmentsApiTests(ITestOutputHelper testOutputHelper)
        {
            Configuration configuration = new Configuration
            {
                BasePath = "https://dev.esystems.fi",
                OAuthTokenUrl = "https://dev.esystems.fi/oAuth/rest/v2/Token",
                OAuthFlow = Client.Auth.OAuthFlow.APPLICATION,
                OAuthClientId = "c8907421-0886-4fb0-b859-d29966762e16",
                OAuthClientSecret = "1da54fa9-ae11-4db3-9740-1bb47b85cd8e"
            };
            api = new DepartmentsApi(configuration);
        }

        public void Dispose()
        {
        }

        void AssertDepartmentDataEqual(DepartmentInsertData departmentInsertData, Department department)
        {
            Assert.Equal(departmentInsertData.Name, department.Name);
            Assert.Equal(departmentInsertData.ContactName, department.ContactName);
            Assert.Equal(departmentInsertData.ContactEmail, department.ContactEmail);
            Assert.Equal(departmentInsertData.DepartmentTypeId.ToString(), department.DepartmentTypeId.Id);
            Assert.Equal(departmentInsertData.CountryId.ToString(), department.CountryId.Id);
        }

        /// <summary>
        /// Test an instance of DepartmentsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
        }

        /// <summary>
        /// Test CreateDepartment
        /// </summary>
        [Fact]
        public void Test_Department_Create()
        {
            var departmentData = TestDepartmentData.CreateDepartmentData();
            var createdDepartment = api.CreateDepartment(departmentData);
            try
            {
                AssertDepartmentDataEqual(departmentData, createdDepartment);
            }
            finally
            {
                api.DeleteDepartment(createdDepartment.Id);
            }
        }

        /// <summary>
        /// Test DeleteDepartment by Id
        /// </summary>
        [Fact]
        public void Test_Department_Delete_ById()
        {
            var createdDepartment = api.CreateDepartment(TestDepartmentData.CreateDepartmentData());
            api.DeleteDepartment(createdDepartment.Id);
            Assert.Throws<ApiException>(() => api.GetDepartment(createdDepartment.Id));
        }

        /// <summary>
        /// Test DeleteDepartment by Name
        /// </summary>
        [Fact]
        public void Test_Department_Delete_ByUserName()
        {
            var createdDepartment = api.CreateDepartment(TestDepartmentData.CreateDepartmentData());
            api.DeleteDepartment(createdDepartment.Name, "Name");
            Assert.Throws<ApiException>(() => api.GetDepartment(createdDepartment.Id));
        }

        /// <summary>
        /// Test GetDepartment by Id
        /// </summary>
        [Fact]
        public void Test_Department_Get_ById()
        {
            var createdDepartment = api.CreateDepartment(TestDepartmentData.CreateDepartmentData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existingDepartment = api.GetDepartment(createdDepartment.Id);
                    Assert.Equal(createdDepartment.Id, existingDepartment.Id);
                    return existingDepartment;
                }));
            }
            finally
            {
                api.DeleteDepartment(createdDepartment.Id);
            }
        }

        /// <summary>
        /// Test GetDepartment by Name
        /// </summary>
        [Fact]
        public void Test_Department_Get_ByName()
        {
            var createdDepartment = api.CreateDepartment(TestDepartmentData.CreateDepartmentData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existingDepartment = api.GetDepartment(createdDepartment.Name, "Name");
                    Assert.Equal(createdDepartment.Name, existingDepartment.Name);
                    return existingDepartment;
                }));
            }
            finally
            {
                api.DeleteDepartment(createdDepartment.Id);
            }
        }

        /// <summary>
        /// Test ListDepartments by Id
        /// </summary>
        [Fact]
        public void Test_Department_List_ById()
        {
            var departmentData = TestDepartmentData.CreateDepartmentDataList(2);
            var createdDepartments = departmentData.Select(i => api.CreateDepartment(i)).ToArray();
            try
            {
                var foundDepartments = api.ListDepartments(
                    filters: $"Id In {string.Join("; ", createdDepartments.Select(i => i.Id))}").Data;
                Assert.Equal(foundDepartments.Count, createdDepartments.Length);
            }
            finally
            {
                foreach (var i in createdDepartments)
                    api.DeleteDepartment(i.Id);
            }
        }

        /// <summary>
        /// Test ListDepartments by Name
        /// </summary>
        [Fact]
        public void Test_Department_List_ByName()
        {
            var departmentData = TestDepartmentData.CreateDepartmentDataList(2);
            var createdDepartments = departmentData.Select(i => api.CreateDepartment(i)).ToArray();
            try
            {
                var foundDepartments = api.ListDepartments(
                    filters: $"Name In {string.Join("; ", createdDepartments.Select(i => i.Name))}");
                Assert.Equal(foundDepartments.Data.Count, createdDepartments.Length);
            }
            finally
            {
                foreach (var i in createdDepartments)
                    api.DeleteDepartment(i.Id);
            }
        }

        /// <summary>
        /// Test UpdateDepartment
        /// </summary>
        [Fact]
        public void Test_Department_Update()
        {
            var departmentData = TestDepartmentData.CreateDepartmentData();
            var createdDepartment = api.CreateDepartment(departmentData);
            try
            {
                TestDepartmentData.UpdateDepartmentData(departmentData);
                var updatedDepartment = api.UpdateDepartment(createdDepartment.Id, departmentData.ToDepartmentUpdateData());
                AssertDepartmentDataEqual(departmentData, updatedDepartment);
            }
            finally
            {
                api.DeleteDepartment(createdDepartment.Id);
            }
        }

        /// <summary>
        /// Test UpsertDepartment
        /// </summary>
        [Fact]
        public void Test_Department_Upsert()
        {
            var departmentData = TestDepartmentData.CreateDepartmentData();
            var createdDepartment = api.UpsertDepartment(departmentData.ToDepartmentData());
            try
            {
                AssertDepartmentDataEqual(departmentData, createdDepartment);
                TestDepartmentData.UpdateDepartmentData(departmentData, createdDepartment.Id);
                var updatedDepartment = api.UpsertDepartment(departmentData.ToDepartmentData());
                Assert.Equal(createdDepartment.Id, updatedDepartment.Id);
                AssertDepartmentDataEqual(departmentData, updatedDepartment);
            }
            finally
            {
                api.DeleteDepartment(createdDepartment.Id);
            }
        }

        /// <summary>
        /// Test DeleteDepartmentUser
        /// </summary>
        [Fact]
        public void Test_DepartmentUser_Delete()
        {
            var departmentData = TestDepartmentData.CreateDepartmentData();
            var createdDepartment = api.CreateDepartment(departmentData);
            try
            {
                var createdDepartmentUser = api.UpsertDepartmentUser(createdDepartment.Id,
                    new(userId: new("Id", TestDepartmentData.TestUsers[0].ToString())));
                api.DeleteDepartmentUser(createdDepartment.Id, createdDepartmentUser.Id);
                var existingDepartmentUsers = api.ListDepartmentUsers(createdDepartment.Id).Data;
                Assert.DoesNotContain(existingDepartmentUsers, i => i.Id == createdDepartmentUser.Id);
            }
            finally
            {
                api.DeleteDepartment(createdDepartment.Id);
            }
        }

        /// <summary>
        /// Test ListDepartmentUsers
        /// </summary>
        [Fact]
        public void Test_DepartmentUser_List()
        {
            var departmentData = TestDepartmentData.CreateDepartmentData();
            var createdDepartment = api.CreateDepartment(departmentData);
            try
            {
                var createdDepartmentUsers = TestLocationData.TestUsers.Select(i =>
                    api.UpsertDepartmentUser(createdDepartment.Id, new(userId: new("Id", i.ToString())))).ToArray();
                try
                {
                    var existingDepartmentUsers = api.ListDepartmentUsers(createdDepartment.Id).Data;
                    Assert.Equal(createdDepartmentUsers.Length, existingDepartmentUsers.Count);
                }
                finally
                {
                    foreach (var i in createdDepartmentUsers)
                        api.DeleteDepartmentUser(createdDepartment.Id, i.Id);
                }
            }
            finally
            {
                api.DeleteDepartment(createdDepartment.Id);
            }
        }

        /// <summary>
        /// Test PatchDepartmentUsers
        /// </summary>
        [Fact]
        public void PatchDepartmentUsersTest()
        {
        }

        /// <summary>
        /// Test UpsertDepartmentUser
        /// </summary>
        [Fact]
        public void Test_DepartmentUser_Upsert()
        {
            var departmentData = TestDepartmentData.CreateDepartmentData();
            var createdDepartment = api.CreateDepartment(departmentData);
            try
            {
                var createdDepartmentUser = api.UpsertDepartmentUser(createdDepartment.Id,
                    new(userId: new("Id", TestDepartmentData.TestUsers[0].ToString())));
                try
                {
                    var existingDepartmentUsers = api.ListDepartmentUsers(createdDepartment.Id).Data;
                    Assert.Contains(existingDepartmentUsers, i => i.Id == createdDepartmentUser.Id);
                }
                finally
                {
                    api.DeleteDepartmentUser(createdDepartment.Id, createdDepartmentUser.Id);
                }
            }
            finally
            {
                api.DeleteDepartment(createdDepartment.Id);
            }
        }
    }
}
