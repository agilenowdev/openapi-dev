/*
 * AccessGroups API documentation
 *
 * ## Introduction  The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.    An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.    | Version | URL | Description |  | - -- | - -- | - -- |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Json/AccessGroups | Serializes to the Open API document as a string in the JSON format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Yaml/AccessGroups | Serializes to the Open API document as a string in the Yaml format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Json/AccessGroups | Serializes to the Open API document as a string in the JSON format and represents OpenAPI V2.0 spec.|  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Yaml/AccessGroups | Serializes to the Open API document as a string in the Yaml format and represents OpenAPI V2.0 spec. |
 *
 * The version of the OpenAPI document: 3.0.38
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agile.Now.ApiAccessGroups.Client.OpenAPIDateConverter;

namespace Agile.Now.ApiAccessGroups.Model
{
    /// <summary>
    /// The record of Application information.
    /// </summary>
    [DataContract(Name = "ApplicationText")]
    public partial class ApplicationText : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationText" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicationText() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationText" /> class.
        /// </summary>
        /// <param name="id">The identifier of  access group application..</param>
        /// <param name="parentApplicationId">The identifier of the parent access application.  You can assign a role to a different access application and this allows for a user-friendly application/role structure. (required).</param>
        /// <param name="accessApplicationId">The identifier of the access application.  You can assign a role to a different access application and this allows for a user-friendly application/role structure. (required).</param>
        /// <param name="isActive">Defines if record is active. (default to false).</param>
        /// <param name="createdOn">The date the record was created. (default to &quot;1900-01-01T00:00Z&quot;).</param>
        public ApplicationText(string id = default(string), string parentApplicationId = default(string), string accessApplicationId = default(string), bool isActive = false, DateTime createdOn = default(DateTime))
        {
            // to ensure "parentApplicationId" is required (not null)
            if (parentApplicationId == null)
            {
                throw new ArgumentNullException("parentApplicationId is a required property for ApplicationText and cannot be null");
            }
            this.ParentApplicationId = parentApplicationId;
            // to ensure "accessApplicationId" is required (not null)
            if (accessApplicationId == null)
            {
                throw new ArgumentNullException("accessApplicationId is a required property for ApplicationText and cannot be null");
            }
            this.AccessApplicationId = accessApplicationId;
            this.Id = id;
            this.IsActive = isActive;
            this.CreatedOn = createdOn;
        }

        /// <summary>
        /// The identifier of  access group application.
        /// </summary>
        /// <value>The identifier of  access group application.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The identifier of the parent access application.  You can assign a role to a different access application and this allows for a user-friendly application/role structure.
        /// </summary>
        /// <value>The identifier of the parent access application.  You can assign a role to a different access application and this allows for a user-friendly application/role structure.</value>
        [DataMember(Name = "ParentApplicationId", IsRequired = true, EmitDefaultValue = true)]
        public string ParentApplicationId { get; set; }

        /// <summary>
        /// The identifier of the access application.  You can assign a role to a different access application and this allows for a user-friendly application/role structure.
        /// </summary>
        /// <value>The identifier of the access application.  You can assign a role to a different access application and this allows for a user-friendly application/role structure.</value>
        [DataMember(Name = "AccessApplicationId", IsRequired = true, EmitDefaultValue = true)]
        public string AccessApplicationId { get; set; }

        /// <summary>
        /// Defines if record is active.
        /// </summary>
        /// <value>Defines if record is active.</value>
        /// <example>false</example>
        [DataMember(Name = "Is_Active", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// The date the record was created.
        /// </summary>
        /// <value>The date the record was created.</value>
        /// <example>1900-01-01T00:00Z</example>
        [DataMember(Name = "CreatedOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationText {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentApplicationId: ").Append(ParentApplicationId).Append("\n");
            sb.Append("  AccessApplicationId: ").Append(AccessApplicationId).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
