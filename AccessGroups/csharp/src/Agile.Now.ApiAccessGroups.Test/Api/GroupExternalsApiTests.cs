/*
 * AccessGroups API documentation
 *
 * ## Introduction  The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.    An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.    | Version | URL | Description |  | - -- | - -- | - -- |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Json/AccessGroups | Serializes to the Open API document as a string in the JSON format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Yaml/AccessGroups | Serializes to the Open API document as a string in the Yaml format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Json/AccessGroups | Serializes to the Open API document as a string in the JSON format and represents OpenAPI V2.0 spec.|  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Yaml/AccessGroups | Serializes to the Open API document as a string in the Yaml format and represents OpenAPI V2.0 spec. |
 *
 * The version of the OpenAPI document: 3.0.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Agile.Now.ApiAccessGroups.Client;
using Agile.Now.ApiAccessGroups.Api;
using Xunit.Abstractions;
using Agile.Now.ApiAccessGroups.Model;
// uncomment below to import models
//using Agile.Now.ApiAccessGroups.Model;

namespace Agile.Now.ApiAccessGroups.Test.Api
{
    /// <summary>
    ///  Class for testing GroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GroupsApiTests : IDisposable
    {
        private readonly GroupExternalsApi api;

        public GroupsApiTests(ITestOutputHelper testOutputHelper)
        {
            Configuration configuration = new Configuration
            {
                BasePath = "https://dev.esystems.fi",
                OAuthTokenUrl = "https://dev.esystems.fi/oAuth/rest/v2/Token",
                OAuthFlow = Client.Auth.OAuthFlow.APPLICATION,
                OAuthClientId = "c8907421-0886-4fb0-b859-d29966762e16",
                OAuthClientSecret = "1da54fa9-ae11-4db3-9740-1bb47b85cd8e"
            };
            api = new GroupExternalsApi(configuration);
        }

        public void Dispose()
        {
        }

        void AssertGroupDataEqual(GroupExternalData groupData, GroupExternal group)
        {
            Assert.Equal(groupData.Name, group.Name);
            Assert.Equal(groupData.Description, group.Description);
        }

        /// <summary>
        /// Test CreateGroupExternal
        /// </summary>
        [Fact]
        public void Test_Group_Create()
        {
            var groupData = TestGroupData.CreateGroupData();
            var createdGroup = api.CreateGroupExternal(groupData);
            try
            {
                AssertGroupDataEqual(groupData, createdGroup);
            }
            finally
            {
                api.DeleteGroupExternal(createdGroup.Id.ToString());
            }
        }

        /// <summary>
        /// Test DeleteGroupExternal by Id
        /// </summary>
        [Fact]
        public void Test_Group_Delete_ById()
        {
            var createdGroup = api.CreateGroupExternal(TestGroupData.CreateGroupData());
            api.DeleteGroupExternal(createdGroup.Id.ToString());
            Assert.Throws<ApiException>(() => api.GetGroupExternal(createdGroup.Id.ToString()));
        }

        /// <summary>
        /// Test DeleteGroupExternal by Name
        /// </summary>
        [Fact]
        public void Test_Group_Delete_ByName()
        {
            var createdGroup = api.CreateGroupExternal(TestGroupData.CreateGroupData());
            //api.DeleteGroupExternal(createdGroup.Name, "Name");
            //Assert.Throws<ApiException>(() => api.GetGroup(createdGroup.Id.ToString()));
        }

        /// <summary>
        /// Test GetGroup by Id
        /// </summary>
        [Fact]
        public void Test_Group_Get_ById()
        {
            var createdGroup = api.CreateGroupExternal(TestGroupData.CreateGroupData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existingGroup = api.GetGroupExternal(createdGroup.Id.ToString());
                    Assert.Equal(createdGroup.Id, existingGroup.Id);
                    return existingGroup;
                }));
            }
            finally
            {
                api.DeleteGroupExternal(createdGroup.Id.ToString());
            }
        }

        /// <summary>
        /// Test GetGroup by Name
        /// </summary>
        [Fact]
        public void Test_Group_Get_ByName()
        {
            var createdGroup = api.CreateGroupExternal(TestGroupData.CreateGroupData());
            try
            {
                //Assert.Null(Record.Exception(() =>
                //{
                //    var existingGroup = api.GetGroup(createdGroup.Name, "Name");
                //    Assert.Equal(createdGroup.Name, existingGroup.Name);
                //    return existingGroup;
                //}));
            }
            finally
            {
                api.DeleteGroupExternal(createdGroup.Id.ToString());
            }
        }

        /// <summary>
        /// Test ListGroups by Id
        /// </summary>
        [Fact]
        public void Test_Group_List_ById()
        {
            var groupData = TestGroupData.CreateGroupDataList(2);
            var createdGroups = groupData.Select(i => api.CreateGroupExternal(i)).ToArray();
            try
            {
                var foundGroups = api.ListGroupExternals(
                    filters: $"Id In {string.Join(", ", createdGroups.Select(i => i.Id))}").Data;
                Assert.Equal(foundGroups.Count, createdGroups.Length);
            }
            finally
            {
                foreach (var i in createdGroups)
                    api.DeleteGroupExternal(i.Id.ToString());
            }
        }

        /// <summary>
        /// Test ListGroups by Name
        /// </summary>
        [Fact]
        public void Test_Group_List_ByName()
        {
            var groupData = TestGroupData.CreateGroupDataList(2);
            var createdGroups = groupData.Select(i => api.CreateGroupExternal(i)).ToArray();
            try
            {
                //var foundGroups = api.ListGroups(
                //    filters: $"Name In {string.Join("; ", createdGroups.Select(i => i.Name))}");
                //Assert.Equal(foundGroups.Data.Count, createdGroups.Length);
            }
            finally
            {
                foreach (var i in createdGroups)
                    api.DeleteGroupExternal(i.Id.ToString());
            }
        }

        /// <summary>
        /// Test UpdateGroup
        /// </summary>
        [Fact]
        public void Test_Group_Update()
        {
            var groupData = TestGroupData.CreateGroupData();
            var createdGroup = api.CreateGroupExternal(groupData);
            try
            {
                TestGroupData.UpdateGroupData(groupData);
                var updatedGroup = api.UpdateGroupExternal(createdGroup.Id.ToString(), groupData);
                AssertGroupDataEqual(groupData, updatedGroup);
            }
            finally
            {
                api.DeleteGroupExternal(createdGroup.Id.ToString());
            }
        }

        /// <summary>
        /// Test UpsertGroup
        /// </summary>
        [Fact]
        public void Test_Group_Upsert()
        {
            var groupData = TestGroupData.CreateGroupData();
            var createdGroup = api.UpsertGroupExternal(groupData);
            try
            {
                AssertGroupDataEqual(groupData, createdGroup);
                TestGroupData.UpdateGroupData(groupData, createdGroup.Id);
                var updatedGroup = api.UpsertGroupExternal(groupData);
                AssertGroupDataEqual(groupData, updatedGroup);
            }
            finally
            {
                api.DeleteGroupExternal(createdGroup.Id.ToString());
            }
        }

        /// <summary>
        /// Test PatchGroups
        /// </summary>
        [Fact]
        public void PatchGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupsData groupsData = null;
            //var response = instance.PatchGroups(groupsData);
            //Assert.IsType<Groups>(response);
        }
    }
}
