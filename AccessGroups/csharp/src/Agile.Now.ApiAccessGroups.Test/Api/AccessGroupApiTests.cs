/*
 * AccessGroups API documentation
 *
 * ## Introduction  The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.    An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.    | Version | URL | Description |  | - -- | - -- | - -- |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Json/AccessGroups | Serializes to the Open API document as a string in the JSON format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Yaml/AccessGroups | Serializes to the Open API document as a string in the Yaml format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Json/AccessGroups | Serializes to the Open API document as a string in the JSON format and represents OpenAPI V2.0 spec.|  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Yaml/AccessGroups | Serializes to the Open API document as a string in the Yaml format and represents OpenAPI V2.0 spec. |
 *
 * The version of the OpenAPI document: 3.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using Agile.Now.ApiAccessGroups.Api;
using Agile.Now.ApiAccessGroups.Client;
using Agile.Now.ApiAccessGroups.Model;
using Xunit;
using Xunit.Abstractions;
// uncomment below to import models
//using Agile.Now.ApiAccessGroups.Model;

namespace Agile.Now.ApiAccessGroups.Test.Api
{
    /// <summary>
    ///  Class for testing AccessGroupApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccessGroupApiTests : IDisposable
    {
        private readonly AccessGroupsApi api;

        public AccessGroupApiTests(ITestOutputHelper testOutputHelper)
        {
            Configuration configuration = new Configuration
            {
                BasePath = "https://dev.esystems.fi",
                OAuthTokenUrl = "https://dev.esystems.fi/oAuth/rest/v2/Token",
                OAuthFlow = Client.Auth.OAuthFlow.APPLICATION,
                OAuthClientId = "c8907421-0886-4fb0-b859-d29966762e16",
                OAuthClientSecret = "1da54fa9-ae11-4db3-9740-1bb47b85cd8e"
            };
            api = new AccessGroupsApi(configuration);
        }

        public void Dispose()
        {
        }

        void AssertAccessGroupDataEqual(AccessGroupData accessGroupData, AccessGroup accessGroup)
        {
            Assert.Equal(accessGroupData.Name, accessGroup.Name);
            Assert.Equal(accessGroupData.Description, accessGroup.Description);
            Assert.Equal(accessGroupData.AccessGroupTypeId.ToString(), accessGroup.AccessGroupTypeId.Id);
        }

        /// <summary>
        /// Test CreateAccessGroup
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Create()
        {
            var accessGroupData = TestAccessGroupData.CreateAccessGroupData();
            var createdAccessGroup = api.CreateAccessGroup(accessGroupData);
            try
            {
                AssertAccessGroupDataEqual(accessGroupData, createdAccessGroup);
            }
            finally
            {
                api.DeleteAccessGroup(createdAccessGroup.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccessGroup by Id
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Delete_ById()
        {
            var createdAccessGroup = api.CreateAccessGroup(TestAccessGroupData.CreateAccessGroupData());
            api.DeleteAccessGroup(createdAccessGroup.Id);
            Assert.Throws<ApiException>(() => api.GetAccessGroup(createdAccessGroup.Id));
        }

        /// <summary>
        /// Test DeleteAccessGroup by Name
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Delete_ByUserName()
        {
            var createdAccessGroup = api.CreateAccessGroup(TestAccessGroupData.CreateAccessGroupData());
            api.DeleteAccessGroup(createdAccessGroup.Name, "Name");
            Assert.Throws<ApiException>(() => api.GetAccessGroup(createdAccessGroup.Id));
        }

        /// <summary>
        /// Test GetAccessGroup by Id
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Get_ById()
        {
            var createdAccessGroup = api.CreateAccessGroup(TestAccessGroupData.CreateAccessGroupData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existingAccessGroup = api.GetAccessGroup(createdAccessGroup.Id);
                    Assert.Equal(createdAccessGroup.Id, existingAccessGroup.Id);
                    return existingAccessGroup;
                }));
            }
            finally
            {
                api.DeleteAccessGroup(createdAccessGroup.Id);
            }
        }

        /// <summary>
        /// Test GetAccessGroup by Name
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Get_ByName()
        {
            var createdAccessGroup = api.CreateAccessGroup(TestAccessGroupData.CreateAccessGroupData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existingAccessGroup = api.GetAccessGroup(createdAccessGroup.Name, "Name");
                    Assert.Equal(createdAccessGroup.Name, existingAccessGroup.Name);
                    return existingAccessGroup;
                }));
            }
            finally
            {
                api.DeleteAccessGroup(createdAccessGroup.Id);
            }
        }

        /// <summary>
        /// Test ListAccessGroups by Id
        /// </summary>
        [Fact]
        public void Test_AccessGroup_List_ById()
        {
            var accessGroupData = TestAccessGroupData.CreateAccessGroupDataList(2);
            var createdAccessGroups = accessGroupData.Select(i => api.CreateAccessGroup(i)).ToArray();
            try
            {
                var foundAccessGroups = api.ListAccessGroups(
                    filters: $"Id In {string.Join("; ", createdAccessGroups.Select(i => i.Id))}").Data;
                Assert.Equal(foundAccessGroups.Count, createdAccessGroups.Length);
            }
            finally
            {
                foreach (var i in createdAccessGroups)
                    api.DeleteAccessGroup(i.Id);
            }
        }

        /// <summary>
        /// Test ListAccessGroups by Name
        /// </summary>
        [Fact]
        public void Test_AccessGroup_List_ByName()
        {
            var accessGroupData = TestAccessGroupData.CreateAccessGroupDataList(2);
            var createdAccessGroups = accessGroupData.Select(i => api.CreateAccessGroup(i)).ToArray();
            try
            {
                var foundAccessGroups = api.ListAccessGroups(
                    filters: $"Name In {string.Join("; ", createdAccessGroups.Select(i => i.Name))}").Data;
                Assert.Equal(foundAccessGroups.Count, createdAccessGroups.Length);
            }
            finally
            {
                foreach (var i in createdAccessGroups)
                    api.DeleteAccessGroup(i.Id);
            }
        }

        /// <summary>
        /// Test UpdateAccessGroup
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Update()
        {
            var accessGroupData = TestAccessGroupData.CreateAccessGroupData();
            var createdAccessGroup = api.CreateAccessGroup(accessGroupData);
            try
            {
                TestAccessGroupData.UpdateAccessGroupData(accessGroupData);
                var updatedAccessGroup = api.UpdateAccessGroup(createdAccessGroup.Id, accessGroupData);
                AssertAccessGroupDataEqual(accessGroupData, updatedAccessGroup);
            }
            finally
            {
                api.DeleteAccessGroup(createdAccessGroup.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccessGroup
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Upsert()
        {
            var accessGroupData = TestAccessGroupData.CreateAccessGroupData();
            var createdAccessGroup = api.UpsertAccessGroup(accessGroupData);
            try
            {
                AssertAccessGroupDataEqual(accessGroupData, createdAccessGroup);
                TestAccessGroupData.UpdateAccessGroupData(accessGroupData, createdAccessGroup.Id);
                var updatedAccessGroup = api.UpsertAccessGroup(accessGroupData);
                AssertAccessGroupDataEqual(accessGroupData, updatedAccessGroup);
            }
            finally
            {
                api.DeleteAccessGroup(createdAccessGroup.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccessGroupAccessApplication
        /// </summary>
        [Fact]
        public void Test_AccessGroupAccessApplication_Delete()
        {
            var accessGroupData = TestAccessGroupData.CreateAccessGroupData();
            var createdAccessGroup = api.CreateAccessGroup(accessGroupData);
            try
            {
                var accessApplication = api.UpsertAccessGroupAccessApplication(createdAccessGroup.Id, 
                    new(parentApplicationId: new("Id", ""), accessApplicationId: new("Id", "")));
                api.DeleteAccessGroupAccessApplication(createdAccessGroup.Id, accessApplication.Id);
            }
            finally
            {
                api.DeleteAccessGroup(createdAccessGroup.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccessGroupPermission
        /// </summary>
        [Fact]
        public void Test_AccessGroupPermission_Delete()
        {
            var accessGroupData = TestAccessGroupData.CreateAccessGroupData();
            var createdAccessGroup = api.CreateAccessGroup(accessGroupData);
            try
            {
                var permission = api.UpsertAccessGroupPermission(createdAccessGroup.Id,
                    new(permissionId: EnumPermissionType.Generic));
                api.DeleteAccessGroupPermission(createdAccessGroup.Id, permission.Id.ToString());
            }
            finally
            {
                api.DeleteAccessGroup(createdAccessGroup.Id);
            }
        }

        /// <summary>
        /// Test ListAccessGroupAccessApplications
        /// </summary>
        [Fact]
        public void Test_AccessGroupAccessApplication_List()
        {
            var accessGroupData = TestAccessGroupData.CreateAccessGroupData();
            var createdAccessGroup = api.CreateAccessGroup(accessGroupData);
            try
            {
                var createdAccessGroupAccessApplications = new[] {
                    api.UpsertAccessGroupAccessApplication(createdAccessGroup.Id, 
                        new(parentApplicationId: new("Id", ""), accessApplicationId: new("Id", ""))),
                    api.UpsertAccessGroupAccessApplication(createdAccessGroup.Id, 
                        new(parentApplicationId: new("Id", ""), accessApplicationId: new("Id", "")))
                };
                try
                {
                    var existingAccessGroupAccessApplications = 
                        api.ListAccessGroupAccessApplications(createdAccessGroup.Id).Data;
                    Assert.Equal(createdAccessGroupAccessApplications.Length, existingAccessGroupAccessApplications.Count);
                }
                finally
                {
                    foreach (var i in createdAccessGroupAccessApplications)
                        api.DeleteAccessGroupAccessApplication(createdAccessGroup.Id, i.Id);
                }
            }
            finally
            {
                api.DeleteAccessGroup(createdAccessGroup.Id);
            }
        }

        /// <summary>
        /// Test ListAccessGroupPermissions
        /// </summary>
        [Fact]
        public void Test_AccessGroupPermission_List()
        {
            var accessGroupData = TestAccessGroupData.CreateAccessGroupData();
            var createdAccessGroup = api.CreateAccessGroup(accessGroupData);
            try
            {
                var createdAccessGroupPermissions = new[] {
                    api.UpsertAccessGroupPermission(createdAccessGroup.Id,
                        new(permissionId: EnumPermissionType.Generic)),
                    api.UpsertAccessGroupPermission(createdAccessGroup.Id,
                        new(permissionId: EnumPermissionType.Generic))
                };
                try
                {
                    var existingAccessGroupPermissions = api.ListAccessGroupPermissions(createdAccessGroup.Id).Data;
                    Assert.Equal(createdAccessGroupPermissions.Length, existingAccessGroupPermissions.Count);
                }
                finally
                {
                    foreach (var i in createdAccessGroupPermissions)
                        api.DeleteAccessGroupPermission(createdAccessGroup.Id, i.Id.ToString());
                }
            }
            finally
            {
                api.DeleteAccessGroup(createdAccessGroup.Id);
            }
        }

        /// <summary>
        /// Test PatchAccessGroupAccessApplications
        /// </summary>
        [Fact]
        public void PatchAccessGroupAccessApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AccessApplicationsData accessApplicationsData = null;
            //string? name = null;
            //string? deleteNotExists = null;
            //var response = instance.PatchAccessGroupAccessApplications(id, accessApplicationsData, name, deleteNotExists);
            //Assert.IsType<AccessApplication>(response);
        }

        /// <summary>
        /// Test PatchAccessGroupPermissions
        /// </summary>
        [Fact]
        public void PatchAccessGroupPermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PermissionsData permissionsData = null;
            //string? name = null;
            //string? deleteNotExists = null;
            //var response = instance.PatchAccessGroupPermissions(id, permissionsData, name, deleteNotExists);
            //Assert.IsType<Permission>(response);
        }

        /// <summary>
        /// Test UpsertAccessGroupAccessApplication
        /// </summary>
        [Fact]
        public void Test_AccessGroupAccessApplication_Upsert()
        {
            var accessGroupData = TestAccessGroupData.CreateAccessGroupData();
            var createdAccessGroup = api.CreateAccessGroup(accessGroupData);
            try
            {
                var createdAccessGroupAccessApplication = api.UpsertAccessGroupAccessApplication(createdAccessGroup.Id, 
                    new(parentApplicationId: new("Id", ""), accessApplicationId: new("Id", "")));
                api.UpsertAccessGroup(accessGroupData);
                try
                {
                    var existingAccessGroupAccessApplications = 
                        api.ListAccessGroupAccessApplications(createdAccessGroup.Id).Data;
                    Assert.Contains(existingAccessGroupAccessApplications, 
                        i => i.Id == createdAccessGroupAccessApplication.Id);
                }
                finally
                {
                    api.DeleteAccessGroupAccessApplication(createdAccessGroup.Id, createdAccessGroupAccessApplication.Id);
                }
            }
            finally
            {
                api.DeleteAccessGroup(createdAccessGroup.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccessGroupPermission
        /// </summary>
        [Fact]
        public void Test_AccessGroupPermission_Upsert()
        {
            var accessGroupData = TestAccessGroupData.CreateAccessGroupData();
            var createdAccessGroup = api.CreateAccessGroup(accessGroupData);
            try
            {
                var createdAccessGroupPermission = api.UpsertAccessGroupPermission(createdAccessGroup.Id,
                    new(permissionId: EnumPermissionType.Generic));
                api.UpsertAccessGroup(accessGroupData);
                try
                {
                    var existingAccessGroupPermissions =
                        api.ListAccessGroupPermissions(createdAccessGroup.Id).Data;
                    Assert.Contains(existingAccessGroupPermissions,
                        i => i.Id == createdAccessGroupPermission.Id);
                }
                finally
                {
                    api.DeleteAccessGroupPermission(createdAccessGroup.Id, createdAccessGroupPermission.Id.ToString());
                }
            }
            finally
            {
                api.DeleteAccessGroup(createdAccessGroup.Id);
            }
        }
    }
}
