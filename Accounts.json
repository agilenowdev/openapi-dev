{
  "openapi": "3.0.1",
  "info": {
    "title": "Accounts API documentation",
    "description": "Agile.Now.AccessHub is a secure REST API designed to manage accounts, access groups, user groups, organizations, locations, applications, roles, and webhooks. This API provides a robust and scalable solution for managing user access and organizational structures in a multi-tenant environment.\r\n\r\n**Key Features:**\r\n\r\n1. **Accounts Management:**\r\n   - Manage user accounts with secure authentication and authorization.\r\n\r\n2. **Access Groups:**\r\n   - Define and manage access groups for access control.\r\n   - Assign users to access groups based on roles and permissions.\r\n\r\n3. **User Groups:**\r\n   - Create and manage user groups for better organization and collaboration.\r\n\r\n4. **Organizations & Locations:**\r\n   - Manage multiple organizations and locations within a single platform.\r\n   - Attribute-based access control (ABAC) for settings.\r\n\r\n5. **Applications:**\r\n   - Centralized management of applications within the platform.\r\n   - Assign and monitor application usage and access.\r\n\r\n6. **Roles:**\r\n   - Define and manage roles for different access levels.\r\n   - Role-based access control to ensure appropriate permissions.\r\n\r\n7. **Webhooks:**\r\n   - Integration with external services and applications.\r\n   - Configure and manage webhooks for real-time notifications and data syncing.\r\n\r\n**Benefits:**\r\n\r\n- **Enhanced Security:** Attribute-based and role-based access controls ensure data protection and authorized access.\r\n- **Scalability:** Designed for growing organizations.\r\n- **Efficiency:** Streamlined management of accounts, groups, and roles reduces overhead.\r\n- **Flexibility:** Multi-tenant architecture allows easy customization.\r\n- **Integration:** Webhook support facilitates seamless integration with external systems.\r\n\r\n**Conclusion:**\r\n\r\nAgile.Now.AccessHub is a powerful platform for managing your business data. It offers a centralized, secure, and scalable solution, enhancing operational efficiency, security, and flexibility in managing multi-tenant environments.",
    "contact": { },
    "license": {
      "name": "BSD-3 license",
      "url": "https://opensource.org/licenses/BSD-3-Clause"
    },
    "version": "3.0.17"
  },
  "servers": [
    {
      "url": "https://dev.esystems.fi",
      "description": "Default entry point of service"
    }
  ],
  "paths": {
    "/Endpoint/rest/api/v1/Account/{Id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "The method returns one record of the `Account`.\n\nMethod returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`\n\n### Get a record of Account\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id,Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.",
        "operationId": "Get Account",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nUsername, ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nUsername, ExternalId\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The record of `Account` information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Read",
              "AccessUser:Read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the `AccountData` object resource to update `Account` using `Id,Username, ExternalId` field(s) value.\n\nProvide the updated record information in your request data and use the `PUT` method of the resource with a specific record ID to update that record. \n\nThe input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`\n\n### Update a record of Account\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id,Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the updated record if the call is successful. Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Update Account",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nUsername, ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nUsername, ExternalId\n```"
            }
          }
        ],
        "requestBody": {
          "description": "Account information to update.\n\nThe input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Updated `Account` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Update",
              "AccessUser:Update"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the query string resource to delete `Account` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id,Username, ExternalId` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`\n\n### Delete a record of Account\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id,Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Account",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nUsername, ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nUsername, ExternalId\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `Account` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Delete",
              "AccessUser:Delete"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `Account` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `TenantId, LanguageId, TimezoneId, DateFormatId`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Accounts",
        "parameters": [
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, TenantId, Name, FirstName, LastName, Phone, Email, LanguageId, TimezoneId, DateFormatId, Username, ExternalId, NotifyByEmail, NotifyBySMS, Is_Active, ModifiedOn, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, TenantId, Name, FirstName, LastName, Phone, Email, LanguageId, TimezoneId, DateFormatId, Username, ExternalId, NotifyByEmail, NotifyBySMS, Is_Active, ModifiedOn, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Read",
              "AccessUser:Read"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Account": {
      "patch": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the `AccountData` object resource to insert or update (Upsert) `Account` using `Id,Username, ExternalId` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`\n\n### Update a record of Account\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `Username, ExternalId` field value is not empty and `Id` field value is empty, action try insert record according `Username, ExternalId` field value (if set, the value is a unique identifier).\n\n### Create a new record of Account\n* If the value in the `Username, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`AccountData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Account",
        "requestBody": {
          "description": "`Account` information to insert or update.\n\nThe input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `Account` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Create, Update",
              "AccessUser:Create, Update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the `AccountData` object resource to create new records.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`\n\n### Create a new record of Account\n* If the value in the `Id,Username, ExternalId` fields are empty then action insert a new record according input parameter entity record structure (`AccountData`).\n* If the value in the `Username, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`AccountData`).\n* If the `Id,Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the created record if the call is successful. Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\n",
        "operationId": "Create Account",
        "requestBody": {
          "description": "`Account` information to insert.\n\nThe input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted `Account` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Create",
              "AccessUser:Create"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Account/{Id}/Tenants": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `Tenant` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `UserId, TenantId, AccountId`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Account Tenants",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nUserId, TenantId, AccountId, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nUserId, TenantId, AccountId, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Tenants",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenants"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Read",
              "AccessUser:Read"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Account/{Id}/Tenant": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the `TenantPost` object resource to insert or update (Upsert) `Tenant` using `UserId,AccountId.Username, AccountId.ExternalId` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `TenantData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `UserId, TenantId, AccountId`\n\n### Update a record of Tenant\n* If the `UserId` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `UserId` field value (primary key).\n* If the `AccountId.Username, AccountId.ExternalId` field value is not empty and `UserId` field value is empty, action try insert record according `AccountId.Username, AccountId.ExternalId` field value (if set, the value is a unique identifier).\n\n### Create a new record of Tenant\n* If the value in the `AccountId.Username, AccountId.ExternalId` and `UserId` fields are empty then action insert a new record according input parameter entity record structure (`TenantData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Tenant` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Account Tenant",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          }
        ],
        "requestBody": {
          "description": "`Tenant` information to insert or update.\n\nThe input parameter must be used in the `TenantData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `Tenant` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Create, Update",
              "AccessUser:Create, Update"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Account/{Id}/Tenant/{SubId}": {
      "delete": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the query string resource to delete `Tenant` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `UserId,AccountId.Username, AccountId.ExternalId` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `Tenant` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `UserId, TenantId, AccountId`\n\n### Delete a record of Tenant\n* If the `UserId` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `UserId,AccountId.Username, AccountId.ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Account Tenant",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "SubId",
            "in": "path",
            "description": "The identifier of the Tenant record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Tenant record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "SubName",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `UserId` field is used.\n\nExample: \n```\nAccountId.Username, AccountId.ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `UserId` field is used.\n\nExample: \n```\nAccountId.Username, AccountId.ExternalId\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `Tenant` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Delete",
              "AccessUser:Delete"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Meta": {
        "required": [
          "TotalItems",
          "CurrentPage",
          "PageSize",
          "Type"
        ],
        "type": "object",
        "properties": {
          "TotalItems": {
            "type": "integer",
            "description": "This field represents the total number of items available in the entire dataset, not just the items returned in the current response. It's useful for implementing pagination, as clients can use it to calculate the number of pages or total available items.",
            "format": "int32",
            "default": 0,
            "example": 1000
          },
          "CurrentPage": {
            "type": "integer",
            "description": "This field specifies the current page of results being returned. It's often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "format": "int32",
            "default": 1,
            "example": 50
          },
          "PageSize": {
            "type": "integer",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.",
            "format": "int32",
            "default": 50,
            "example": 50
          },
          "Type": {
            "type": "string",
            "description": "The type of the record",
            "example": "User"
          }
        },
        "description": "The object provides metadata about the list of items returned in the API response. It typically includes information that helps clients understand and work with the data."
      },
      "Error": {
        "required": [
          "Errors",
          "StatusCode"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "type": "array",
            "items": {
              "type": "string",
              "default": ""
            },
            "description": "Human-readable explanation of the errors"
          },
          "Type": {
            "type": "string",
            "description": "URI identifier that categorizes the error",
            "default": ""
          },
          "Title": {
            "type": "string",
            "description": "Brief, human-readable message about the error",
            "default": ""
          },
          "StatusCode": {
            "type": "integer",
            "description": "The HTTP response code",
            "format": "int32",
            "example": 400
          },
          "Instance": {
            "type": "string",
            "description": "URI that identifies the specific occurrence of the error",
            "default": ""
          },
          "RequestKey": {
            "type": "string",
            "description": "Provides a request key that identifies the current request.",
            "default": ""
          }
        },
        "description": "The list of errors. Throw specific exceptions based on the received error."
      },
      "Account": {
        "required": [
          "Id",
          "FirstName",
          "LastName",
          "Email",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of account"
          },
          "TenantId": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "Name": {
            "type": "string",
            "description": "The name of the account"
          },
          "FirstName": {
            "type": "string",
            "description": "Person's first name"
          },
          "LastName": {
            "type": "string",
            "description": "Person's last name"
          },
          "Phone": {
            "type": "string",
            "description": "The phone number of account. The phone number is unique in the system"
          },
          "Email": {
            "type": "string",
            "description": "The e-mail of account. The email is unique in the system"
          },
          "LanguageId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "TimezoneId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "DateFormatId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "Username": {
            "type": "string",
            "description": "Username used to log in into the system. The username is unique in the system"
          },
          "ExternalId": {
            "type": "string",
            "description": "External Authentication identifier. Example Azure AD guid"
          },
          "NotifyByEmail": {
            "type": "boolean",
            "description": "Defines if a person should get notifications via e-mail",
            "default": false,
            "example": false
          },
          "NotifyBySMS": {
            "type": "boolean",
            "description": "Defines if a contact should get notifications via SMS",
            "default": false,
            "example": false
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if the account is active and can be used",
            "default": false,
            "example": false
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Account information."
      },
      "AbstractLong": {
        "required": [
          "Id",
          "ExternalId",
          "Name",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The primary key of the record row. If the Id attribute is used, then it must be unique",
            "format": "int64",
            "default": 0,
            "example": 1234567891234567
          },
          "ExternalId": {
            "type": "string",
            "description": "The external identier of the record row. If the External Id attribute is used, then it must be unique",
            "example": "3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5"
          },
          "Name": {
            "type": "string",
            "description": "The name of the record row",
            "example": "Bob Normal"
          },
          "Type": {
            "type": "string",
            "description": "The type of the record object",
            "example": "User"
          }
        },
        "description": "The abstract object structure"
      },
      "AbstractText": {
        "required": [
          "Id",
          "ExternalId",
          "Name",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The primary key of the record row. If the Id attribute is used, then it must be unique",
            "example": "3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5"
          },
          "ExternalId": {
            "type": "string",
            "description": "The external identier of the record row. If the External Id attribute is used, then it must be unique",
            "example": "3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5"
          },
          "Name": {
            "type": "string",
            "description": "The name of the record row",
            "example": "Bob Normal"
          },
          "Type": {
            "type": "string",
            "description": "The type of the record object",
            "example": "User"
          }
        },
        "description": "The abstract object structure"
      },
      "Accounts": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "description": "The list of `Account records`"
          }
        },
        "description": "The list of `Account` records"
      },
      "AccountData": {
        "required": [
          "Id",
          "FirstName",
          "LastName",
          "Email",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of account"
          },
          "TenantId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "Name": {
            "type": "string",
            "description": "The name of the account"
          },
          "FirstName": {
            "type": "string",
            "description": "Person's first name"
          },
          "LastName": {
            "type": "string",
            "description": "Person's last name"
          },
          "Phone": {
            "type": "string",
            "description": "The phone number of account. The phone number is unique in the system"
          },
          "Email": {
            "type": "string",
            "description": "The e-mail of account. The email is unique in the system"
          },
          "LanguageId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "TimezoneId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "DateFormatId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "Username": {
            "type": "string",
            "description": "Username used to log in into the system. The username is unique in the system"
          },
          "ExternalId": {
            "type": "string",
            "description": "External Authentication identifier. Example Azure AD guid"
          },
          "NotifyByEmail": {
            "type": "boolean",
            "description": "Defines if a person should get notifications via e-mail",
            "default": false,
            "example": false
          },
          "NotifyBySMS": {
            "type": "boolean",
            "description": "Defines if a contact should get notifications via SMS",
            "default": false,
            "example": false
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if the account is active and can be used",
            "default": false,
            "example": false
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Account information."
      },
      "FieldType": {
        "required": [
          "Field",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Field": {
            "type": "string",
            "description": "The name of the data field"
          },
          "Value": {
            "type": "string",
            "description": "The value of the data row"
          }
        },
        "description": "The field object structure"
      },
      "Tenant": {
        "required": [
          "UserId",
          "TenantId",
          "CreatedOn"
        ],
        "type": "object",
        "properties": {
          "UserId": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "TenantId": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Tenant information."
      },
      "Tenants": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tenant"
            },
            "description": "The list of `Tenant records`"
          }
        },
        "description": "The list of `Tenant` records"
      },
      "TenantData": {
        "required": [
          "UserId",
          "TenantId",
          "CreatedOn"
        ],
        "type": "object",
        "properties": {
          "UserId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "TenantId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Tenant information."
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request - The user has provided input that the browser is unable to convert.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "The user has provided input that the browser is unable to convert.",
                "There are multiple rows in the database for the same value",
                "The value does not match the specified entity structure",
                "..."
              ],
              "Type": "/Errors/Bad Input",
              "Title": "Bad Request",
              "StatusCode": 400,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "The session Id or OAuth token used has expired or is invalid."
              ],
              "Type": "/Errors/Unauthorized",
              "Title": "Unauthorized",
              "StatusCode": 401,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden - The user does not have access to execute operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "The user does not have access to execute operation"
              ],
              "Type": "/Errors/Permission",
              "Title": "Bad Request",
              "StatusCode": 403,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      },
      "404": {
        "description": "Not Found - The requested resource does not exist.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "The requested resource does not exist"
              ],
              "Type": "/Errors/Not Found",
              "Title": "Not Found",
              "StatusCode": 404,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error - An internal server error is an error on the web server you're trying to access.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "An internal server error is an error on the web server you're trying to access."
              ],
              "Type": "/Errors/Internal Server Error",
              "Title": "Internal Server Error",
              "StatusCode": 500,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "description": "oAuth autentication flow",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://dev.esystems.fi/oAuth/rest/v2/Token",
            "refreshUrl": "https://dev.esystems.fi/oAuth/rest/v2/Token",
            "scopes": {
              "AccessManager:Read": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessUser:Read": "Allows to review access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessManager:Create, Update": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessUser:Create, Update": "Allows to review access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessManager:Create": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessUser:Create": "Allows to review access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessManager:Update": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessUser:Update": "Allows to review access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessManager:Delete": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessUser:Delete": "Allows to review access groups and all related data. (ABAC) permissions required to perform a function."
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Accounts",
      "description": "Accounts"
    }
  ]
}