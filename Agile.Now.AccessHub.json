{
  "openapi": "3.0.3",
  "info": {
    "title": "Agile.Now.AccessHub API documentation",
    "description": "Agile.Now.AccessHub is a secure REST API designed to manage accounts, access groups, user groups, organizations, locations, applications, roles, and webhooks. This API provides a robust and scalable solution for managing user access and organizational structures in a multi-tenant environment.\r\n\r\n**Key Features:**\r\n\r\n1. **Accounts Management:**\r\n   - Manage user accounts with secure authentication and authorization.\r\n\r\n2. **Access Groups:**\r\n   - Define and manage access groups for access control.\r\n   - Assign users to access groups based on roles and permissions.\r\n\r\n3. **User Groups:**\r\n   - Create and manage user groups for better organization and collaboration.\r\n\r\n4. **Organizations & Locations:**\r\n   - Manage multiple organizations and locations within a single platform.\r\n   - Attribute-based access control (ABAC) for settings.\r\n\r\n5. **Applications:**\r\n   - Centralized management of applications within the platform.\r\n   - Assign and monitor application usage and access.\r\n\r\n6. **Roles:**\r\n   - Define and manage roles for different access levels.\r\n   - Role-based access control to ensure appropriate permissions.\r\n\r\n7. **Webhooks:**\r\n   - Integration with external services and applications.\r\n   - Configure and manage webhooks for real-time notifications and data syncing.\r\n\r\n**Benefits:**\r\n\r\n- **Enhanced Security:** Attribute-based and role-based access controls ensure data protection and authorized access.\r\n- **Scalability:** Designed for growing organizations.\r\n- **Efficiency:** Streamlined management of accounts, groups, and roles reduces overhead.\r\n- **Flexibility:** Multi-tenant architecture allows easy customization.\r\n- **Integration:** Webhook support facilitates seamless integration with external systems.\r\n\r\n**Conclusion:**\r\n\r\nAgile.Now.AccessHub is a powerful platform for managing your business data. It offers a centralized, secure, and scalable solution, enhancing operational efficiency, security, and flexibility in managing multi-tenant environments.",
    "contact": {
      "name": "Agile.Now Dev Team",
      "email": "dev@agilenow.io",
      "url": "https://www.agilenow.io"
    },
    "license": {
      "name": "BSD-3 license",
      "url": "https://opensource.org/licenses/BSD-3-Clause"
    },
    "version": "2.0.1"
  },
  "servers": [
    {
      "url": "https://dev.esystems.fi",
      "description": "Default entry point of service Agile.Now server"
    }
  ],
  "tags": [
    {
      "name": "Accounts",
      "description": "Accounts"
    },
    {
      "name": "Departments",
      "description": "Departments"
    },
    {
      "name": "Locations",
      "description": "Locations"
    },
    {
      "name": "Connections",
      "description": "Connections"
    },
    {
      "name": "Entities",
      "description": "Entities"
    }
  ],
  "paths": {
    "/Endpoint/rest/api/v1/Account/{Id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "The method returns one record of the `Account`.\n\nMethod returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`\n\n### Get a record of Account\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id,Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.",
        "operationId": "Get Account",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nUsername, ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nUsername, ExternalId\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The record of `Account` information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Read",
              "AccessUser:Read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the `AccountData` object resource to update `Account` using `Id,Username, ExternalId` field(s) value.\n\nProvide the updated record information in your request data and use the `PUT` method of the resource with a specific record ID to update that record. \n\nThe input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`\n\n### Update a record of Account\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id,Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the updated record if the call is successful. Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Update Account",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nUsername, ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nUsername, ExternalId\n```"
            }
          }
        ],
        "requestBody": {
          "description": "Account information to update.\n\nThe input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Updated `Account` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Update",
              "AccessUser:Update"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the query string resource to delete `Account` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id,Username, ExternalId` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`\n\n### Delete a record of Account\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id,Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Account",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nUsername, ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nUsername, ExternalId\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `Account` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Delete",
              "AccessUser:Delete"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `Account` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `TenantId, LanguageId, TimezoneId, DateFormatId`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Accounts",
        "parameters": [
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, TenantId, Name, FirstName, LastName, Phone, Email, LanguageId, TimezoneId, DateFormatId, Username, ExternalId, NotifyByEmail, NotifyBySMS, Is_Active, ModifiedOn, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, TenantId, Name, FirstName, LastName, Phone, Email, LanguageId, TimezoneId, DateFormatId, Username, ExternalId, NotifyByEmail, NotifyBySMS, Is_Active, ModifiedOn, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Read",
              "AccessUser:Read"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Account": {
      "patch": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the `AccountData` object resource to insert or update (Upsert) `Account` using `Id,Username, ExternalId` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`\n\n### Update a record of Account\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `Username, ExternalId` field value is not empty and `Id` field value is empty, action try insert record according `Username, ExternalId` field value (if set, the value is a unique identifier).\n\n### Create a new record of Account\n* If the value in the `Username, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`AccountData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Account",
        "requestBody": {
          "description": "`Account` information to insert or update.\n\nThe input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `Account` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Create, Update",
              "AccessUser:Create, Update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the `AccountData` object resource to create new records.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`\n\n### Create a new record of Account\n* If the value in the `Id,Username, ExternalId` fields are empty then action insert a new record according input parameter entity record structure (`AccountData`).\n* If the value in the `Username, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`AccountData`).\n* If the `Id,Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the created record if the call is successful. Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\n",
        "operationId": "Create Account",
        "requestBody": {
          "description": "`Account` information to insert.\n\nThe input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted `Account` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Create",
              "AccessUser:Create"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Account/{Id}/Tenants": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `Tenant` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `UserId, TenantId, AccountId`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Account Tenants",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nUserId, TenantId, AccountId, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nUserId, TenantId, AccountId, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Tenants",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenants"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Read",
              "AccessUser:Read"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Account/{Id}/Tenant": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the `TenantPost` object resource to insert or update (Upsert) `Tenant` using `UserId,TenantId.Name` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `TenantData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `UserId, TenantId, AccountId`\n\n### Update a record of Tenant\n* If the `UserId` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `UserId` field value (primary key).\n* If the `TenantId.Name` field value is not empty and `UserId` field value is empty, action try insert record according `TenantId.Name` field value (if set, the value is a unique identifier).\n\n### Create a new record of Tenant\n* If the value in the `TenantId.Name` and `UserId` fields are empty then action insert a new record according input parameter entity record structure (`TenantData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Tenant` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Account Tenant",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          }
        ],
        "requestBody": {
          "description": "`Tenant` information to insert or update.\n\nThe input parameter must be used in the `TenantData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `Tenant` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Create, Update",
              "AccessUser:Create, Update"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Account/{Id}/Tenant/{SubId}": {
      "delete": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the query string resource to delete `Tenant` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `UserId,TenantId.Name` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `Tenant` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `UserId, TenantId, AccountId`\n\n### Delete a record of Tenant\n* If the `UserId` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `UserId,TenantId.Name` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Account Tenant",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "SubId",
            "in": "path",
            "description": "The identifier of the Tenant record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Tenant record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "SubName",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `UserId` field is used.\n\nExample: \n```\nTenantId.Name\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `UserId` field is used.\n\nExample: \n```\nTenantId.Name\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `Tenant` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Delete",
              "AccessUser:Delete"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Account/{Id}/Pictures": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `Picture` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `AccountId`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Account Pictures",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nAccountId, Filename, Picture, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nAccountId, Filename, Picture, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Pictures",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pictures"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Read",
              "AccessUser:Read"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Account/{Id}/Picture": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the `PicturePost` object resource to insert or update (Upsert) `Picture` using `AccountId` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `PictureData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `AccountId`\n\n### Update a record of Picture\n* If the `AccountId` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `AccountId` field value (primary key).\n* When the AccountId field value is not provided, the system will automatically initiate the insertion of a new record.\n\n### Create a new record of Picture\n* If the value in the `AccountId` field is empty then action insert a new record according input parameter entity record structure (`PictureData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Picture` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Account Picture",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          }
        ],
        "requestBody": {
          "description": "`Picture` information to insert or update.\n\nThe input parameter must be used in the `PictureData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PictureData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `Picture` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Picture"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Create, Update",
              "AccessUser:Create, Update"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Account/{Id}/Picture/{SubId}": {
      "delete": {
        "tags": [
          "Accounts"
        ],
        "description": "Use the query string resource to delete `Picture` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `AccountId` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `Picture` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `AccountId`\n\n### Delete a record of Picture\n* If the `AccountId` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `AccountId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Account Picture",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "SubId",
            "in": "path",
            "description": "The identifier of the Picture record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Picture record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "SubName",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `AccountId` field is used.\n\nExample: \n```\n\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `AccountId` field is used.\n\nExample: \n```\n\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `Picture` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Picture"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Delete",
              "AccessUser:Delete"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Department/{Id}": {
      "get": {
        "tags": [
          "Departments"
        ],
        "description": "The method returns one record of the `Department`.\n\nMethod returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`\n\n### Get a record of Department\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.",
        "operationId": "Get Department",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName, ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName, ExternalId\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The record of `Department` information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Department:Read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Departments"
        ],
        "description": "Use the `DepartmentUpdateData` object resource to update `Department` using `Id, Name, ExternalId` field(s) value.\n\nProvide the updated record information in your request data and use the `PUT` method of the resource with a specific record ID to update that record. \n\nThe input parameter must be used in the `DepartmentUpdateData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`\n\n### Update a record of Department\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the updated record if the call is successful. Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Update Department",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName, ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName, ExternalId\n```"
            }
          }
        ],
        "requestBody": {
          "description": "Department information to update.\n\nThe input parameter must be used in the `DepartmentUpdateData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepartmentUpdateData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Updated `Department` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Department:Update"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Departments"
        ],
        "description": "Use the query string resource to delete `Department` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id, Name, ExternalId` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`\n\n### Delete a record of Department\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Department",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName, ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName, ExternalId\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `Department` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Department:Delete"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Departments": {
      "get": {
        "tags": [
          "Departments"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `Department` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Departments",
        "parameters": [
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, ExternalId, Name, DepartmentTypeId, ParentDepartmentId, HierarchicalName, Level, ContactName, ContactEmail, ContactPhone, OwnerId, CountryId, Is_Active, ModifiedOn, ModifiedBy, CreatedBy, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, ExternalId, Name, DepartmentTypeId, ParentDepartmentId, HierarchicalName, Level, ContactName, ContactEmail, ContactPhone, OwnerId, CountryId, Is_Active, ModifiedOn, ModifiedBy, CreatedBy, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Departments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Departments"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Department:Read"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Department": {
      "patch": {
        "tags": [
          "Departments"
        ],
        "description": "Use the `DepartmentData` object resource to insert or update (Upsert) `Department` using `Id, Name, ExternalId` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `DepartmentData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`\n\n### Update a record of Department\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `Name, ExternalId` field value is not empty and `Id` field value is empty, action try insert record according `Name, ExternalId` field value (if set, the value is a unique identifier).\n\n### Create a new record of Department\n* If the value in the `Name, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`DepartmentData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Department",
        "requestBody": {
          "description": "`Department` information to insert or update.\n\nThe input parameter must be used in the `DepartmentData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepartmentData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `Department` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Department:Create, Update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Departments"
        ],
        "description": "Use the `DepartmentInsertData` object resource to create new records.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `DepartmentInsertData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`\n\n### Create a new record of Department\n* If the value in the `Id, Name, ExternalId` fields are empty then action insert a new record according input parameter entity record structure (`DepartmentInsertData`).\n* If the value in the `Name, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`DepartmentInsertData`).\n* If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the created record if the call is successful. Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\n",
        "operationId": "Create Department",
        "requestBody": {
          "description": "`Department` information to insert.\n\nThe input parameter must be used in the `DepartmentInsertData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepartmentInsertData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted `Department` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Department:Create"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Department/{Id}/Users": {
      "get": {
        "tags": [
          "Departments"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `DepartmentId, UserId, ModifiedBy, CreatedBy`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Department Users",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, DepartmentId, UserId, ModifiedOn, ModifiedBy, CreatedBy, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, DepartmentId, UserId, ModifiedOn, ModifiedBy, CreatedBy, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Department:Read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Departments"
        ],
        "description": "Use the `UsersData` object resource to insert or update (Upsert) a list of `UserData` using `Id` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `UserList` record structure as text fields in the foreign key fields.\n\nForeign key fields are: `DepartmentId, UserId, ModifiedBy, CreatedBy`\n\n### Update a record of User\n* When the Id field value is not provided, the system will automatically initiate the insertion of a new record.\n\n**Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.\n\n### Create a new record of User\n* If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`UserData`).\n\nThe response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.",
        "operationId": "Patch Department Users",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "DeleteNotExists",
            "in": "query",
            "description": "The Delete not exists function delete orphan values from a table.\n\nIf you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.",
            "schema": {
              "type": "string",
              "description": "The Delete not exists function delete orphan values from a table.\n\nIf you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.",
              "default": "false"
            }
          }
        ],
        "requestBody": {
          "description": "The list of User information to insert or update.\n\nThe input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Data"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated list of User information. \n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Department:Create, Update"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Department/{Id}/User": {
      "post": {
        "tags": [
          "Departments"
        ],
        "description": "Use the `UserPost` object resource to insert or update (Upsert) `User` using `Id` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `UserData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `DepartmentId, UserId, ModifiedBy, CreatedBy`\n\n### Update a record of User\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* When the Id field value is not provided, the system will automatically initiate the insertion of a new record.\n\n### Create a new record of User\n* If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`UserData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Department User",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          }
        ],
        "requestBody": {
          "description": "`User` information to insert or update.\n\nThe input parameter must be used in the `UserData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `User` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Department:Create, Update"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Department/{Id}/User/{SubId}": {
      "delete": {
        "tags": [
          "Departments"
        ],
        "description": "Use the query string resource to delete `User` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `DepartmentId, UserId, ModifiedBy, CreatedBy`\n\n### Delete a record of User\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Department User",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "SubId",
            "in": "path",
            "description": "The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "SubName",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\n\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\n\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `User` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Department:Delete"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Location/{Id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "description": "The method returns one record of the `Location`.\n\nMethod returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`\n\n### Get a record of Location\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.",
        "operationId": "Get Location",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName,ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName,ExternalId\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The record of `Location` information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Location:Read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Locations"
        ],
        "description": "Use the `LocationUpdateData` object resource to update `Location` using `Id, Name, ExternalId` field(s) value.\n\nProvide the updated record information in your request data and use the `PUT` method of the resource with a specific record ID to update that record. \n\nThe input parameter must be used in the `LocationUpdateData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`\n\n### Update a record of Location\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the updated record if the call is successful. Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Update Location",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName,ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName,ExternalId\n```"
            }
          }
        ],
        "requestBody": {
          "description": "Location information to update.\n\nThe input parameter must be used in the `LocationUpdateData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationUpdateData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Updated `Location` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Location:Update"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Locations"
        ],
        "description": "Use the query string resource to delete `Location` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id, Name, ExternalId` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`\n\n### Delete a record of Location\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Location",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName,ExternalId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName,ExternalId\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `Location` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Location:Delete"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `Location` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Locations",
        "parameters": [
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, ExternalId, Name, CountryId, TimezoneId, CurrencyId, Is_Active, ModifiedOn, ModifiedBy, CreatedBy, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, ExternalId, Name, CountryId, TimezoneId, CurrencyId, Is_Active, ModifiedOn, ModifiedBy, CreatedBy, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Locations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Locations"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Location:Read"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Location": {
      "patch": {
        "tags": [
          "Locations"
        ],
        "description": "Use the `LocationData` object resource to insert or update (Upsert) `Location` using `Id, Name, ExternalId` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `LocationData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`\n\n### Update a record of Location\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `Name,ExternalId` field value is not empty and `Id` field value is empty, action try insert record according `Name,ExternalId` field value (if set, the value is a unique identifier).\n\n### Create a new record of Location\n* If the value in the `Name,ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`LocationData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Location",
        "requestBody": {
          "description": "`Location` information to insert or update.\n\nThe input parameter must be used in the `LocationData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `Location` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Location:Create, Update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Locations"
        ],
        "description": "Use the `LocationInsertData` object resource to create new records.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `LocationInsertData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`\n\n### Create a new record of Location\n* If the value in the `Id, Name, ExternalId` fields are empty then action insert a new record according input parameter entity record structure (`LocationInsertData`).\n* If the value in the `Name,ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`LocationInsertData`).\n* If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the created record if the call is successful. Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\n",
        "operationId": "Create Location",
        "requestBody": {
          "description": "`Location` information to insert.\n\nThe input parameter must be used in the `LocationInsertData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationInsertData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted `Location` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Location:Create"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Location/{Id}/Users": {
      "get": {
        "tags": [
          "Locations"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `LocationId, UserId, ModifiedBy, CreatedBy`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Location Users",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, LocationId, UserId, ModifiedOn, ModifiedBy, CreatedBy, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, LocationId, UserId, ModifiedOn, ModifiedBy, CreatedBy, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Location:Read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Locations"
        ],
        "description": "Use the `UsersData` object resource to insert or update (Upsert) a list of `UserData` using `Id` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `UserList` record structure as text fields in the foreign key fields.\n\nForeign key fields are: `LocationId, UserId, ModifiedBy, CreatedBy`\n\n### Update a record of User\n* When the Id field value is not provided, the system will automatically initiate the insertion of a new record.\n\n**Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.\n\n### Create a new record of User\n* If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`UserData`).\n\nThe response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.",
        "operationId": "Patch Location Users",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "DeleteNotExists",
            "in": "query",
            "description": "The Delete not exists function delete orphan values from a table.\n\nIf you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.",
            "schema": {
              "type": "string",
              "description": "The Delete not exists function delete orphan values from a table.\n\nIf you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.",
              "default": "false"
            }
          }
        ],
        "requestBody": {
          "description": "The list of User information to insert or update.\n\nThe input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Data"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated list of User information. \n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Location:Create, Update"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Location/{Id}/User": {
      "post": {
        "tags": [
          "Locations"
        ],
        "description": "Use the `UserPost` object resource to insert or update (Upsert) `User` using `Id` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `UserData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `LocationId, UserId, ModifiedBy, CreatedBy`\n\n### Update a record of User\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* When the Id field value is not provided, the system will automatically initiate the insertion of a new record.\n\n### Create a new record of User\n* If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`UserData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Location User",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          }
        ],
        "requestBody": {
          "description": "`User` information to insert or update.\n\nThe input parameter must be used in the `UserData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `User` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Location:Create, Update"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Location/{Id}/User/{SubId}": {
      "delete": {
        "tags": [
          "Locations"
        ],
        "description": "Use the query string resource to delete `User` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `LocationId, UserId, ModifiedBy, CreatedBy`\n\n### Delete a record of User\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Location User",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "SubId",
            "in": "path",
            "description": "The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "SubName",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\n\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\n\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `User` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Location:Delete"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Connection/{Id}": {
      "get": {
        "tags": [
          "Connections"
        ],
        "description": "The method returns one record of the `Connection`.\n\nMethod returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `ModifiedBy, CreatedBy`\n\n### Get a record of Connection\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id,Name` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.",
        "operationId": "Get Connection",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The record of `Connection` information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Webhook:Read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Connections"
        ],
        "description": "Use the `ConnectionData` object resource to update `Connection` using `Id,Name` field(s) value.\n\nProvide the updated record information in your request data and use the `PUT` method of the resource with a specific record ID to update that record. \n\nThe input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `ModifiedBy, CreatedBy`\n\n### Update a record of Connection\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id,Name` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the updated record if the call is successful. Method returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Update Connection",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName\n```"
            }
          }
        ],
        "requestBody": {
          "description": "Connection information to update.\n\nThe input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Updated `Connection` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Webhook:Update"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Connections"
        ],
        "description": "Use the query string resource to delete `Connection` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id,Name` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `ModifiedBy, CreatedBy`\n\n### Delete a record of Connection\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id,Name` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Connection",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `Connection` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Webhook:Delete"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Connections": {
      "get": {
        "tags": [
          "Connections"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `Connection` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `ModifiedBy, CreatedBy`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Connections",
        "parameters": [
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, Name, Description, ApiKey, SecretKey, URL, Is_Active, Is_System, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, Name, Description, ApiKey, SecretKey, URL, Is_Active, Is_System, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Connections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connections"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Webhook:Read"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Connection": {
      "patch": {
        "tags": [
          "Connections"
        ],
        "description": "Use the `ConnectionData` object resource to insert or update (Upsert) `Connection` using `Id,Name` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `ModifiedBy, CreatedBy`\n\n### Update a record of Connection\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `Name` field value is not empty and `Id` field value is empty, action try insert record according `Name` field value (if set, the value is a unique identifier).\n\n### Create a new record of Connection\n* If the value in the `Name` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`ConnectionData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Connection",
        "requestBody": {
          "description": "`Connection` information to insert or update.\n\nThe input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `Connection` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Webhook:Create, Update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Connections"
        ],
        "description": "Use the `ConnectionData` object resource to create new records.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `ModifiedBy, CreatedBy`\n\n### Create a new record of Connection\n* If the value in the `Id,Name` fields are empty then action insert a new record according input parameter entity record structure (`ConnectionData`).\n* If the value in the `Name` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`ConnectionData`).\n* If the `Id,Name` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the created record if the call is successful. Method returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\n",
        "operationId": "Create Connection",
        "requestBody": {
          "description": "`Connection` information to insert.\n\nThe input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted `Connection` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Webhook:Create"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Connection/{Id}/Configs": {
      "get": {
        "tags": [
          "Connections"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `Config` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Connection Configs",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, WebhookConnectionId, WebhookEntityId, HasCreateAccess, HasUpdateAccess, HasDeleteAccess, Is_Active, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, WebhookConnectionId, WebhookEntityId, HasCreateAccess, HasUpdateAccess, HasDeleteAccess, Is_Active, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Configs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configs"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Webhook:Read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Connections"
        ],
        "description": "Use the `ConfigsData` object resource to insert or update (Upsert) a list of `ConfigData` using `Id` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `ConfigList` record structure as text fields in the foreign key fields.\n\nForeign key fields are: `WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy`\n\n### Update a record of Config\n* When the Id field value is not provided, the system will automatically initiate the insertion of a new record.\n\n**Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.\n\n### Create a new record of Config\n* If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`ConfigData`).\n\nThe response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `Config` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.",
        "operationId": "Patch Connection Configs",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "DeleteNotExists",
            "in": "query",
            "description": "The Delete not exists function delete orphan values from a table.\n\nIf you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.",
            "schema": {
              "type": "string",
              "description": "The Delete not exists function delete orphan values from a table.\n\nIf you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.",
              "default": "false"
            }
          }
        ],
        "requestBody": {
          "description": "The list of Config information to insert or update.\n\nThe input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigsData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Data"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated list of Config information. \n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Config"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Webhook:Create, Update"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Connection/{Id}/Config": {
      "post": {
        "tags": [
          "Connections"
        ],
        "description": "Use the `ConfigPost` object resource to insert or update (Upsert) `Config` using `Id` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `ConfigData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy`\n\n### Update a record of Config\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* When the Id field value is not provided, the system will automatically initiate the insertion of a new record.\n\n### Create a new record of Config\n* If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`ConfigData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Config` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Connection Config",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          }
        ],
        "requestBody": {
          "description": "`Config` information to insert or update.\n\nThe input parameter must be used in the `ConfigData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `Config` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Config"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Webhook:Create, Update"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Connection/{Id}/Config/{SubId}": {
      "delete": {
        "tags": [
          "Connections"
        ],
        "description": "Use the query string resource to delete `Config` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `Config` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy`\n\n### Delete a record of Config\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Connection Config",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "SubId",
            "in": "path",
            "description": "The identifier of the Config record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Config record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "SubName",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\n\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\n\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `Config` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Config"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Webhook:Delete"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Entity/{Id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "description": "The method returns one record of the `Entity`.\n\nMethod returns an extended `Entity` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `InternalConfigId`\n\n### Get a record of Entity\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.",
        "operationId": "Get Entity",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Entity record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Entity record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\n\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\n\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The record of `Entity` information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Webhook:Read"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Entities": {
      "get": {
        "tags": [
          "Entities"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `Entity` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `InternalConfigId`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Entities",
        "parameters": [
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, Name, Application, InternalConfigId, Is_Active, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, Name, Application, InternalConfigId, Is_Active, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Entities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entities"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "Webhook:Read"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Meta": {
        "required": [
          "TotalItems",
          "CurrentPage",
          "PageSize",
          "Type"
        ],
        "type": "object",
        "properties": {
          "TotalItems": {
            "type": "integer",
            "description": "This field represents the total number of items available in the entire dataset, not just the items returned in the current response. It's useful for implementing pagination, as clients can use it to calculate the number of pages or total available items.",
            "format": "int32",
            "default": 0,
            "example": 1000
          },
          "CurrentPage": {
            "type": "integer",
            "description": "This field specifies the current page of results being returned. It's often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "format": "int32",
            "default": 1,
            "example": 50
          },
          "PageSize": {
            "type": "integer",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.",
            "format": "int32",
            "default": 50,
            "example": 50
          },
          "Type": {
            "type": "string",
            "description": "The type of the record",
            "example": "User"
          }
        },
        "description": "The object provides metadata about the list of items returned in the API response. It typically includes information that helps clients understand and work with the data."
      },
      "Error": {
        "required": [
          "Errors",
          "StatusCode"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "type": "array",
            "items": {
              "type": "string",
              "default": ""
            },
            "description": "Human-readable explanation of the errors"
          },
          "Type": {
            "type": "string",
            "description": "URI identifier that categorizes the error",
            "default": ""
          },
          "Title": {
            "type": "string",
            "description": "Brief, human-readable message about the error",
            "default": ""
          },
          "StatusCode": {
            "type": "integer",
            "description": "The HTTP response code",
            "format": "int32",
            "example": 400
          },
          "Instance": {
            "type": "string",
            "description": "URI that identifies the specific occurrence of the error",
            "default": ""
          },
          "RequestKey": {
            "type": "string",
            "description": "Provides a request key that identifies the current request.",
            "default": ""
          }
        },
        "description": "The list of errors. Throw specific exceptions based on the received error."
      },
      "Account": {
        "required": [
          "Id",
          "FirstName",
          "LastName",
          "Email",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of account"
          },
          "TenantId": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "Name": {
            "type": "string",
            "description": "The name of the account"
          },
          "FirstName": {
            "type": "string",
            "description": "Person's first name"
          },
          "LastName": {
            "type": "string",
            "description": "Person's last name"
          },
          "Phone": {
            "type": "string",
            "description": "The phone number of account. The phone number is unique in the system"
          },
          "Email": {
            "type": "string",
            "description": "The e-mail of account. The email is unique in the system"
          },
          "LanguageId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "TimezoneId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "DateFormatId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "Username": {
            "type": "string",
            "description": "Username used to log in into the system. The username is unique in the system"
          },
          "ExternalId": {
            "type": "string",
            "description": "External Authentication identifier. Example Azure AD guid"
          },
          "NotifyByEmail": {
            "type": "boolean",
            "description": "Defines if a person should get notifications via e-mail",
            "default": false,
            "example": false
          },
          "NotifyBySMS": {
            "type": "boolean",
            "description": "Defines if a contact should get notifications via SMS",
            "default": false,
            "example": false
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if the account is active and can be used",
            "default": false,
            "example": false
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Account information."
      },
      "AbstractLong": {
        "required": [
          "Id",
          "ExternalId",
          "Name",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The primary key of the record row. If the Id attribute is used, then it must be unique",
            "format": "int64",
            "default": 0,
            "example": 1234567891234567
          },
          "ExternalId": {
            "type": "string",
            "description": "The external identier of the record row. If the External Id attribute is used, then it must be unique",
            "example": "3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5"
          },
          "Name": {
            "type": "string",
            "description": "The name of the record row",
            "example": "Bob Normal"
          },
          "Type": {
            "type": "string",
            "description": "The type of the record object",
            "example": "User"
          }
        },
        "description": "The abstract object structure"
      },
      "AbstractText": {
        "required": [
          "Id",
          "ExternalId",
          "Name",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The primary key of the record row. If the Id attribute is used, then it must be unique",
            "example": "3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5"
          },
          "ExternalId": {
            "type": "string",
            "description": "The external identier of the record row. If the External Id attribute is used, then it must be unique",
            "example": "3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5"
          },
          "Name": {
            "type": "string",
            "description": "The name of the record row",
            "example": "Bob Normal"
          },
          "Type": {
            "type": "string",
            "description": "The type of the record object",
            "example": "User"
          }
        },
        "description": "The abstract object structure"
      },
      "Accounts": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "description": "The list of `Account records`"
          }
        },
        "description": "The list of `Account` records"
      },
      "AccountData": {
        "required": [
          "Id",
          "FirstName",
          "LastName",
          "Email",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of account"
          },
          "TenantId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "Name": {
            "type": "string",
            "description": "The name of the account"
          },
          "FirstName": {
            "type": "string",
            "description": "Person's first name"
          },
          "LastName": {
            "type": "string",
            "description": "Person's last name"
          },
          "Phone": {
            "type": "string",
            "description": "The phone number of account. The phone number is unique in the system"
          },
          "Email": {
            "type": "string",
            "description": "The e-mail of account. The email is unique in the system"
          },
          "LanguageId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "TimezoneId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "DateFormatId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "Username": {
            "type": "string",
            "description": "Username used to log in into the system. The username is unique in the system"
          },
          "ExternalId": {
            "type": "string",
            "description": "External Authentication identifier. Example Azure AD guid"
          },
          "NotifyByEmail": {
            "type": "boolean",
            "description": "Defines if a person should get notifications via e-mail",
            "default": false,
            "example": false
          },
          "NotifyBySMS": {
            "type": "boolean",
            "description": "Defines if a contact should get notifications via SMS",
            "default": false,
            "example": false
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if the account is active and can be used",
            "default": false,
            "example": false
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Account information."
      },
      "FieldType": {
        "required": [
          "Field",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Field": {
            "type": "string",
            "description": "The name of the data field"
          },
          "Value": {
            "type": "string",
            "description": "The value of the data row"
          }
        },
        "description": "The field object structure"
      },
      "Tenant": {
        "required": [
          "UserId",
          "TenantId",
          "CreatedOn"
        ],
        "type": "object",
        "properties": {
          "UserId": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "TenantId": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Tenant information."
      },
      "Tenants": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tenant"
            },
            "description": "The list of `Tenant records`"
          }
        },
        "description": "The list of `Tenant` records"
      },
      "TenantData": {
        "required": [
          "UserId",
          "TenantId",
          "CreatedOn"
        ],
        "type": "object",
        "properties": {
          "UserId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "TenantId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Tenant information."
      },
      "Picture": {
        "type": "object",
        "properties": {
          "Filename": {
            "type": "string",
            "description": "Filename of account picture"
          },
          "Picture": {
            "type": "string",
            "description": "Picture of account",
            "format": "binary"
          },
          "CreatedOn": {
            "type": "string",
            "description": "Date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Picture information."
      },
      "Pictures": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Picture"
            },
            "description": "The list of `Picture records`"
          }
        },
        "description": "The list of `Picture` records"
      },
      "PictureData": {
        "type": "object",
        "properties": {
          "Filename": {
            "type": "string",
            "description": "Filename of account picture"
          },
          "Picture": {
            "type": "string",
            "description": "Picture of account",
            "format": "binary"
          },
          "CreatedOn": {
            "type": "string",
            "description": "Date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Picture information."
      },
      "Department": {
        "required": [
          "Id",
          "Name",
          "DepartmentTypeId",
          "Is_Active"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The guid to identify the department"
          },
          "ExternalId": {
            "type": "string",
            "description": "The external identifier of the department"
          },
          "Name": {
            "type": "string",
            "description": "The name of the department"
          },
          "DepartmentTypeId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "ParentDepartmentId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "HierarchicalName": {
            "type": "string",
            "description": "The hierarchical name of the department"
          },
          "Level": {
            "type": "integer",
            "description": "The department level at the hierarchy",
            "format": "int32",
            "default": 0,
            "example": 0
          },
          "ContactName": {
            "type": "string",
            "description": "The contact name of company or department"
          },
          "ContactEmail": {
            "type": "string",
            "description": "The contact email of external company or department"
          },
          "ContactPhone": {
            "type": "string"
          },
          "OwnerId": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CountryId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if the department is active and can be used",
            "default": false,
            "example": false
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "ModifiedBy": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Department information."
      },
      "Departments": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Department"
            },
            "description": "The list of `Department records`"
          }
        },
        "description": "The list of `Department` records"
      },
      "EnumDepartmentType": {
        "enum": [
          "External",
          "Internal"
        ],
        "type": "string",
        "description": "The enum of DepartmentType.",
        "x-enumDescriptions": {
          "External": "External",
          "Internal": "Internal"
        }
      },
      "EnumCountry": {
        "enum": [
          "AFG",
          "ALA",
          "ALB",
          "DZA",
          "ASM",
          "AND",
          "AGO",
          "AIA",
          "ATA",
          "ATG",
          "ARG",
          "ARM",
          "ABW",
          "AUS",
          "AUT",
          "AZE",
          "AZO",
          "BHS",
          "BHR",
          "BGD",
          "BRB",
          "BLR",
          "BEL",
          "BLZ",
          "BEN",
          "BMU",
          "BTN",
          "BOL",
          "BIH",
          "BWA",
          "BVT",
          "BRA",
          "IOT",
          "VGB",
          "BRN",
          "BGR",
          "BFA",
          "BDI",
          "KHM",
          "CMR",
          "CAN",
          "CPV",
          "CYM",
          "CAF",
          "TCD",
          "CHL",
          "CHN",
          "CXR",
          "CCK",
          "COL",
          "COM",
          "COG",
          "COK",
          "CRI",
          "CIV",
          "HRV",
          "CUB",
          "CYP",
          "CZE",
          "COD",
          "DNK",
          "DJI",
          "DMA",
          "DOM",
          "ECU",
          "EGY",
          "SLV",
          "GNQ",
          "ERI",
          "EST",
          "SWZ",
          "ETH",
          "EUE",
          "FLK",
          "FRO",
          "FSM",
          "FJI",
          "FIN",
          "FRA",
          "GUF",
          "PYF",
          "ATF",
          "GAB",
          "GMB",
          "GEO",
          "DEU",
          "GHA",
          "GIB",
          "GRC",
          "GRL",
          "GRD",
          "GLP",
          "GUM",
          "GTM",
          "GGY",
          "GIN",
          "GNB",
          "GUY",
          "HTI",
          "HMD",
          "VAT",
          "HND",
          "HKG",
          "HUN",
          "ISL",
          "IND",
          "IDN",
          "IRN",
          "IRQ",
          "IRL",
          "IMN",
          "ISR",
          "ITA",
          "JAM",
          "JPN",
          "JEY",
          "JOR",
          "KAZ",
          "KEN",
          "KIR",
          "XKX",
          "KWT",
          "KGZ",
          "LAO",
          "LVA",
          "LBN",
          "LSO",
          "LBR",
          "LBY",
          "LIE",
          "LTU",
          "LUX",
          "MAC",
          "MKD",
          "MDG",
          "MWI",
          "MYS",
          "MDV",
          "MLI",
          "MLT",
          "MHL",
          "MTQ",
          "MRT",
          "MUS",
          "MYT",
          "MEX",
          "MDA",
          "MCO",
          "MNG",
          "MNE",
          "MSR",
          "MAR",
          "MOZ",
          "MMR",
          "NAM",
          "NRU",
          "NPL",
          "NLD",
          "ANT",
          "NCL",
          "NZL",
          "NIC",
          "NER",
          "NGA",
          "NIU",
          "NFK",
          "PRK",
          "MNP",
          "NOR",
          "OMN",
          "PAK",
          "PLW",
          "PSE",
          "PAN",
          "PNG",
          "PRY",
          "PER",
          "PHL",
          "PCN",
          "POL",
          "PRT",
          "PRI",
          "QAT",
          "REU",
          "ROU",
          "RUS",
          "RWA",
          "SHN",
          "KNA",
          "LCA",
          "SPM",
          "VCT",
          "BLM",
          "MAF",
          "WSM",
          "SMR",
          "STP",
          "SAU",
          "SEN",
          "SRB",
          "SYC",
          "SLE",
          "SGP",
          "SVK",
          "SVN",
          "SLB",
          "SOM",
          "SOL",
          "ZAF",
          "SGS",
          "KOR",
          "SSD",
          "ESP",
          "LKA",
          "SDN",
          "SUR",
          "SJM",
          "SWE",
          "CHE",
          "SYR",
          "TWN",
          "TJK",
          "TZA",
          "THA",
          "TLS",
          "TGO",
          "TKL",
          "TON",
          "TTO",
          "TUN",
          "TUR",
          "TKM",
          "TCA",
          "TUV",
          "UGA",
          "UKR",
          "ARE",
          "GBR",
          "UMI",
          "USA",
          "URY",
          "UZB",
          "VUT",
          "VEN",
          "VNM",
          "VIR",
          "WLF",
          "ESH",
          "YEM",
          "ZMB",
          "ZWE"
        ],
        "type": "string",
        "description": "The enum of Country.",
        "x-enumDescriptions": {
          "AFG": "Afghanistan",
          "ALA": "Aland Islands",
          "ALB": "Albania",
          "DZA": "Algeria",
          "ASM": "American Samoa",
          "AND": "Andorra",
          "AGO": "Angola",
          "AIA": "Anguilla",
          "ATA": "Antarctica",
          "ATG": "Antigua and Barbuda",
          "ARG": "Argentina",
          "ARM": "Armenia",
          "ABW": "Aruba",
          "AUS": "Australia",
          "AUT": "Austria",
          "AZE": "Azerbaijan",
          "AZO": "Azores",
          "BHS": "Bahamas",
          "BHR": "Bahrain",
          "BGD": "Bangladesh",
          "BRB": "Barbados",
          "BLR": "Belarus",
          "BEL": "Belgium",
          "BLZ": "Belize",
          "BEN": "Benin",
          "BMU": "Bermuda",
          "BTN": "Bhutan",
          "BOL": "Bolivia",
          "BIH": "Bosnia and Herzegovina",
          "BWA": "Botswana",
          "BVT": "Bouvet Island",
          "BRA": "Brazil",
          "IOT": "British Indian Ocean Territory",
          "VGB": "British Virgin Islands",
          "BRN": "Brunei Darussalam",
          "BGR": "Bulgaria",
          "BFA": "Burkina Faso",
          "BDI": "Burundi",
          "KHM": "Cambodia",
          "CMR": "Cameroon",
          "CAN": "Canada",
          "CPV": "Cape Verde",
          "CYM": "Cayman Islands",
          "CAF": "Central African Republic",
          "TCD": "Chad",
          "CHL": "Chile",
          "CHN": "China",
          "CXR": "Christmas Island",
          "CCK": "Cocos (Keeling) Islands",
          "COL": "Colombia",
          "COM": "Comoros",
          "COG": "Congo (Brazzaville)",
          "COK": "Cook Islands",
          "CRI": "Costa Rica",
          "CIV": "C�te d'Ivoire",
          "HRV": "Croatia",
          "CUB": "Cuba",
          "CYP": "Cyprus",
          "CZE": "Czech Republic",
          "COD": "Democratic Republic of the Congo",
          "DNK": "Denmark",
          "DJI": "Djibouti",
          "DMA": "Dominica",
          "DOM": "Dominican Republic",
          "ECU": "Ecuador",
          "EGY": "Egypt",
          "SLV": "El Salvador",
          "GNQ": "Equatorial Guinea",
          "ERI": "Eritrea",
          "EST": "Estonia",
          "SWZ": "Eswatini",
          "ETH": "Ethiopia",
          "EUE": "Europe diplomat",
          "FLK": "Falkland Islands (Malvinas)",
          "FRO": "Faroe Islands",
          "FSM": "Federated States of Micronesia",
          "FJI": "Fiji",
          "FIN": "Finland",
          "FRA": "France",
          "GUF": "French Guiana",
          "PYF": "French Polynesia",
          "ATF": "French Southern Territories",
          "GAB": "Gabon",
          "GMB": "Gambia",
          "GEO": "Georgia",
          "DEU": "Germany",
          "GHA": "Ghana",
          "GIB": "Gibraltar",
          "GRC": "Greece",
          "GRL": "Greenland",
          "GRD": "Grenada",
          "GLP": "Guadeloupe",
          "GUM": "Guam",
          "GTM": "Guatemala",
          "GGY": "Guernsey",
          "GIN": "Guinea",
          "GNB": "Guinea-Bissau",
          "GUY": "Guyana",
          "HTI": "Haiti",
          "HMD": "Heard Island and Mcdonald Islands",
          "VAT": "Holy See (Vatican City State)",
          "HND": "Honduras",
          "HKG": "Hong Kong (CN)",
          "HUN": "Hungary",
          "ISL": "Iceland",
          "IND": "India",
          "IDN": "Indonesia",
          "IRN": "Iran",
          "IRQ": "Iraq",
          "IRL": "Ireland",
          "IMN": "Isle of Man",
          "ISR": "Israel",
          "ITA": "Italy",
          "JAM": "Jamaica",
          "JPN": "Japan",
          "JEY": "Jersey",
          "JOR": "Jordan",
          "KAZ": "Kazakhstan",
          "KEN": "Kenya",
          "KIR": "Kiribati",
          "XKX": "Kosovo",
          "KWT": "Kuwait",
          "KGZ": "Kyrgyzstan",
          "LAO": "Lao PDR",
          "LVA": "Latvia",
          "LBN": "Lebanon",
          "LSO": "Lesotho",
          "LBR": "Liberia",
          "LBY": "Libya",
          "LIE": "Liechtenstein",
          "LTU": "Lithuania",
          "LUX": "Luxembourg",
          "MAC": "Macao (CN)",
          "MKD": "Macedonia",
          "MDG": "Madagascar",
          "MWI": "Malawi",
          "MYS": "Malaysia",
          "MDV": "Maldives",
          "MLI": "Mali",
          "MLT": "Malta",
          "MHL": "Marshall Islands",
          "MTQ": "Martinique",
          "MRT": "Mauritania",
          "MUS": "Mauritius",
          "MYT": "Mayotte",
          "MEX": "Mexico",
          "MDA": "Moldova",
          "MCO": "Monaco",
          "MNG": "Mongolia",
          "MNE": "Montenegro",
          "MSR": "Montserrat",
          "MAR": "Morocco",
          "MOZ": "Mozambique",
          "MMR": "Myanmar",
          "NAM": "Namibia",
          "NRU": "Nauru",
          "NPL": "Nepal",
          "NLD": "Netherlands",
          "ANT": "Netherlands Antilles",
          "NCL": "New Caledonia",
          "NZL": "New Zealand",
          "NIC": "Nicaragua",
          "NER": "Niger",
          "NGA": "Nigeria",
          "NIU": "Niue",
          "NFK": "Norfolk Island",
          "PRK": "North Korea",
          "MNP": "Northern Mariana Islands",
          "NOR": "Norway",
          "OMN": "Oman",
          "PAK": "Pakistan",
          "PLW": "Palau",
          "PSE": "Palestinian Territory, Occupied",
          "PAN": "Panama",
          "PNG": "Papua New Guinea",
          "PRY": "Paraguay",
          "PER": "Peru",
          "PHL": "Philippines",
          "PCN": "Pitcairn Island",
          "POL": "Poland",
          "PRT": "Portugal",
          "PRI": "Puerto Rico",
          "QAT": "Qatar",
          "REU": "R�union",
          "ROU": "Romania",
          "RUS": "Russian Federation",
          "RWA": "Rwanda",
          "SHN": "Saint Helena",
          "KNA": "Saint Kitts and Nevis",
          "LCA": "Saint Lucia",
          "SPM": "Saint Pierre and Miquelon",
          "VCT": "Saint Vincent and Grenadines",
          "BLM": "Saint-Barth�lemy",
          "MAF": "Saint-Martin (French part)",
          "WSM": "Samoa",
          "SMR": "San Marino",
          "STP": "Sao Tome and Principe",
          "SAU": "Saudi Arabia",
          "SEN": "Senegal",
          "SRB": "Serbia",
          "SYC": "Seychelles",
          "SLE": "Sierra Leone",
          "SGP": "Singapore",
          "SVK": "Slovakia",
          "SVN": "Slovenia",
          "SLB": "Solomon Islands",
          "SOM": "Somalia",
          "SOL": "Somaliland",
          "ZAF": "South Africa",
          "SGS": "South Georgia and the South Sandwich Islands",
          "KOR": "South Korea",
          "SSD": "South Sudan",
          "ESP": "Spain",
          "LKA": "Sri Lanka",
          "SDN": "Sudan",
          "SUR": "Suriname",
          "SJM": "Svalbard and Jan Mayen Islands",
          "SWE": "Sweden",
          "CHE": "Switzerland",
          "SYR": "Syrian Arab Republic (Syria)",
          "TWN": "Taiwan (CN)",
          "TJK": "Tajikistan",
          "TZA": "Tanzania",
          "THA": "Thailand",
          "TLS": "Timor-Leste",
          "TGO": "Togo",
          "TKL": "Tokelau",
          "TON": "Tonga",
          "TTO": "Trinidad and Tobago",
          "TUN": "Tunisia",
          "TUR": "Turkey",
          "TKM": "Turkmenistan",
          "TCA": "Turks and Caicos Islands",
          "TUV": "Tuvalu",
          "UGA": "Uganda",
          "UKR": "Ukraine",
          "ARE": "United Arab Emirates",
          "GBR": "United Kingdom",
          "UMI": "United States Minor Outlying Islands",
          "USA": "United States of America",
          "URY": "Uruguay",
          "UZB": "Uzbekistan",
          "VUT": "Vanuatu",
          "VEN": "Venezuela",
          "VNM": "Vietnam",
          "VIR": "Virgin Islands, US",
          "WLF": "Wallis and Futuna Islands",
          "ESH": "Western Sahara",
          "YEM": "Yemen",
          "ZMB": "Zambia",
          "ZWE": "Zimbabwe"
        }
      },
      "DepartmentData": {
        "required": [
          "Id",
          "Name",
          "DepartmentTypeId",
          "Is_Active"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The guid to identify the department"
          },
          "ExternalId": {
            "type": "string",
            "description": "The external identifier of the department"
          },
          "Name": {
            "type": "string",
            "description": "The name of the department"
          },
          "DepartmentTypeId": {
            "$ref": "#/components/schemas/EnumDepartmentType"
          },
          "ParentDepartmentId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "ContactName": {
            "type": "string",
            "description": "The contact name of company or department"
          },
          "ContactEmail": {
            "type": "string",
            "description": "The contact email of external company or department"
          },
          "ContactPhone": {
            "type": "string"
          },
          "OwnerId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "CountryId": {
            "$ref": "#/components/schemas/EnumCountry"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if the department is active and can be used",
            "default": false,
            "example": false
          }
        },
        "description": "The record of Department information."
      },
      "DepartmentInsertData": {
        "required": [
          "Id",
          "Name",
          "DepartmentTypeId",
          "Is_Active"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The guid to identify the department"
          },
          "ExternalId": {
            "type": "string",
            "description": "The external identifier of the department"
          },
          "Name": {
            "type": "string",
            "description": "The name of the department"
          },
          "DepartmentTypeId": {
            "$ref": "#/components/schemas/EnumDepartmentType"
          },
          "ParentDepartmentId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "ContactName": {
            "type": "string",
            "description": "The contact name of company or department"
          },
          "ContactEmail": {
            "type": "string",
            "description": "The contact email of external company or department"
          },
          "ContactPhone": {
            "type": "string"
          },
          "OwnerId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "CountryId": {
            "$ref": "#/components/schemas/EnumCountry"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if the department is active and can be used",
            "default": false,
            "example": false
          }
        },
        "description": "The record of Department information."
      },
      "DepartmentUpdateData": {
        "required": [
          "Name",
          "Is_Active"
        ],
        "type": "object",
        "properties": {
          "ExternalId": {
            "type": "string",
            "description": "The external identifier of the department"
          },
          "Name": {
            "type": "string",
            "description": "The name of the department"
          },
          "ContactName": {
            "type": "string",
            "description": "The contact name of company or department"
          },
          "ContactEmail": {
            "type": "string",
            "description": "The contact email of external company or department"
          },
          "ContactPhone": {
            "type": "string"
          },
          "OwnerId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "CountryId": {
            "$ref": "#/components/schemas/EnumCountry"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if the department is active and can be used",
            "default": false,
            "example": false
          }
        },
        "description": "The record of Department information."
      },
      "User": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of user department"
          },
          "UserId": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "ModifiedBy": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of User information."
      },
      "Users": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "The list of `User records`"
          }
        },
        "description": "The list of `User` records"
      },
      "UserData": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of user department"
          },
          "UserId": {
            "$ref": "#/components/schemas/FieldType"
          }
        },
        "description": "The record of User information."
      },
      "UserText": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of user department"
          },
          "UserId": {
            "type": "string",
            "description": "The identifier of the user who has link the department"
          }
        },
        "description": "The record of User information."
      },
      "UsersData": {
        "type": "object",
        "properties": {
          "Extra": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListValidation"
            },
            "description": "List validation for entity attribute"
          },
          "IsFullValidation": {
            "type": "boolean",
            "description": "If the value is true, the data quality of all fields are checked. This has an effect on performance.",
            "default": false,
            "example": false
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserText"
            },
            "description": "The list of `User` data record for import"
          }
        },
        "description": "The data loading record of User importing"
      },
      "ListValidation": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the entity field."
          },
          "FieldName": {
            "type": "string",
            "description": "The field name of relation database table.\n\nExample; \nThe field name is &quot;TenantId&quot; and is associated with the &quot;Tenant&quot; table. You want to use in the &quot;Tenant&quot; table &quot;Name&quot; field fetching data. Once &quot;Name&quot; is specified, the validation service retrieves the tenant identifier from the &quot;Tenant&quot; table based on the &quot;Name&quot; field."
          },
          "Required": {
            "type": "boolean",
            "description": "If True, the value is required.",
            "default": false,
            "example": false
          },
          "Unique": {
            "type": "boolean",
            "description": "If True, the value must be unique in the database and you cannot add multiple values.",
            "default": false,
            "example": false
          },
          "Max": {
            "type": "string",
            "description": "The max value of input value."
          },
          "Min": {
            "type": "string",
            "description": "The min value of input value."
          },
          "Pattern": {
            "type": "string",
            "description": "The pattern of the validation. Searches the input string for an occurrence of a regular expression."
          },
          "DefaultValue": {
            "type": "string",
            "description": "The default value of row. If the value of the field is empty, the service automatically sets the value in the field. If the value does not match the data type, the value is cleaned. Remember data types."
          }
        },
        "description": "List validation for entity attribute"
      },
      "Location": {
        "required": [
          "Id",
          "Name",
          "Is_Active"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The guid to identify the location"
          },
          "ExternalId": {
            "type": "string",
            "description": "The external identifier of the location"
          },
          "Name": {
            "type": "string",
            "description": "The name of the location"
          },
          "CountryId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "TimezoneId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "CurrencyId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if the location is active and can be used",
            "default": false,
            "example": false
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "ModifiedBy": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Location information."
      },
      "Locations": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "description": "The list of `Location records`"
          }
        },
        "description": "The list of `Location` records"
      },
      "EnumTimezone": {
        "enum": [
          "Afghanistan Standard Time",
          "Alaskan Standard Time",
          "Arab Standard Time",
          "Arabian Standard Time",
          "Arabic Standard Time",
          "Argentina Standard Time",
          "Atlantic Standard Time",
          "AUS Central Standard Time",
          "AUS Eastern Standard Time",
          "Azerbaijan Standard Time",
          "Azores Standard Time",
          "Canada Central Standard Time",
          "Cape Verde Standard Time",
          "Caucasus Standard Time",
          "Cen. Australia Standard Time",
          "Central America Standard Time",
          "Central Asia Standard Time",
          "Central Brazilian Standard Time",
          "Central Europe Standard Time",
          "Central European Standard Time",
          "Central Pacific Standard Time",
          "Central Standard Time",
          "Central Standard Time (Mexico)",
          "China Standard Time",
          "Dateline Standard Time",
          "E. Africa Standard Time",
          "E. Australia Standard Time",
          "E. Europe Standard Time",
          "E. South America Standard Time",
          "Eastern Standard Time",
          "Egypt Standard Time",
          "Ekaterinburg Standard Time",
          "Fiji Standard Time",
          "FLE Standard Time",
          "Georgian Standard Time",
          "GMT Standard Time",
          "Greenland Standard Time",
          "Greenwich Standard Time",
          "GTB Standard Time",
          "Hawaiian Standard Time",
          "India Standard Time",
          "Iran Standard Time",
          "Israel Standard Time",
          "Jordan Standard Time",
          "Korea Standard Time",
          "Mauritius Standard Time",
          "Mid-Atlantic Standard Time",
          "Middle East Standard Time",
          "Montevideo Standard Time",
          "Morocco Standard Time",
          "Mountain Standard Time",
          "Mountain Standard Time (Mexico)",
          "Myanmar Standard Time",
          "N. Central Asia Standard Time",
          "Namibia Standard Time",
          "Nepal Standard Time",
          "New Zealand Standard Time",
          "Newfoundland Standard Time",
          "North Asia East Standard Time",
          "North Asia Standard Time",
          "Pacific SA Standard Time",
          "Pacific Standard Time",
          "Pacific Standard Time (Mexico)",
          "Pakistan Standard Time",
          "Romance Standard Time",
          "Russian Standard Time",
          "SA Eastern Standard Time",
          "SA Pacific Standard Time",
          "SA Western Standard Time",
          "Samoa Standard Time",
          "SE Asia Standard Time",
          "Singapore Standard Time",
          "South Africa Standard Time",
          "Sri Lanka Standard Time",
          "Taipei Standard Time",
          "Tasmania Standard Time",
          "Tokyo Standard Time",
          "Tonga Standard Time",
          "US Eastern Standard Time",
          "US Mountain Standard Time",
          "UTC",
          "Venezuela Standard Time",
          "Vladivostok Standard Time",
          "W. Australia Standard Time",
          "W. Central Africa Standard Time",
          "W. Europe Standard Time",
          "West Asia Standard Time",
          "West Pacific Standard Time",
          "Yakutsk Standard Time"
        ],
        "type": "string",
        "description": "The enum of Timezone.",
        "x-enumDescriptions": {
          "Afghanistan Standard Time": "(GMT+04:30) Kabul",
          "Alaskan Standard Time": "(GMT-09:00) Alaska",
          "Arab Standard Time": "(GMT+03:00) Kuwait, Riyadh",
          "Arabian Standard Time": "(GMT+04:00) Abu Dhabi, Muscat",
          "Arabic Standard Time": "(GMT+03:00) Baghdad",
          "Argentina Standard Time": "(GMT-03:00) Buenos Aires",
          "Atlantic Standard Time": "(GMT-04:00) Atlantic Time (Canada)",
          "AUS Central Standard Time": "(GMT+09:30) Darwin",
          "AUS Eastern Standard Time": "(GMT+10:00) Canberra, Melbourne, Sydney",
          "Azerbaijan Standard Time": "(GMT+04:00) Baku",
          "Azores Standard Time": "(GMT-01:00) Azores",
          "Canada Central Standard Time": "(GMT-06:00) Saskatchewan",
          "Cape Verde Standard Time": "(GMT-01:00) Cape Verde Is.",
          "Caucasus Standard Time": "(GMT+04:00) Yerevan",
          "Cen. Australia Standard Time": "(GMT+09:30) Adelaide",
          "Central America Standard Time": "(GMT-06:00) Central America",
          "Central Asia Standard Time": "(GMT+06:00) Astana, Dhaka",
          "Central Brazilian Standard Time": "(GMT-04:00) Manaus",
          "Central Europe Standard Time": "(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
          "Central European Standard Time": "(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
          "Central Pacific Standard Time": "(GMT+11:00) Magadan, Solomon Is., New Caledonia",
          "Central Standard Time": "(GMT-06:00) Central Time (US & Canada)",
          "Central Standard Time (Mexico)": "(GMT-06:00) Guadalajara, Mexico City, Monterrey",
          "China Standard Time": "(GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
          "Dateline Standard Time": "(GMT-12:00) International Date Line West",
          "E. Africa Standard Time": "(GMT+03:00) Nairobi",
          "E. Australia Standard Time": "(GMT+10:00) Brisbane",
          "E. Europe Standard Time": "(GMT+02:00) Minsk",
          "E. South America Standard Time": "(GMT-03:00) Brasilia",
          "Eastern Standard Time": "(GMT-05:00) Eastern Time (US & Canada)",
          "Egypt Standard Time": "(GMT+02:00) Cairo",
          "Ekaterinburg Standard Time": "(GMT+05:00) Ekaterinburg",
          "Fiji Standard Time": "(GMT+12:00) Fiji, Kamchatka, Marshall Is.",
          "FLE Standard Time": "(GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
          "Georgian Standard Time": "(GMT+03:00) Tbilisi",
          "GMT Standard Time": "(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
          "Greenland Standard Time": "(GMT-03:00) Greenland",
          "Greenwich Standard Time": "(GMT) Monrovia, Reykjavik",
          "GTB Standard Time": "(GMT+02:00) Athens, Bucharest, Istanbul",
          "Hawaiian Standard Time": "(GMT-10:00) Hawaii",
          "India Standard Time": "(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi",
          "Iran Standard Time": "(GMT+03:30) Tehran",
          "Israel Standard Time": "(GMT+02:00) Jerusalem",
          "Jordan Standard Time": "(GMT+02:00) Amman",
          "Korea Standard Time": "(GMT+09:00) Seoul",
          "Mauritius Standard Time": "(GMT+04:00) Port Louis",
          "Mid-Atlantic Standard Time": "(GMT-02:00) Mid-Atlantic",
          "Middle East Standard Time": "(GMT+02:00) Beirut",
          "Montevideo Standard Time": "(GMT-03:00) Montevideo",
          "Morocco Standard Time": "(GMT) Casablanca",
          "Mountain Standard Time": "(GMT-07:00) Mountain Time (US & Canada)",
          "Mountain Standard Time (Mexico)": "(GMT-07:00) Chihuahua, La Paz, Mazatlan",
          "Myanmar Standard Time": "(GMT+06:30) Yangon (Rangoon)",
          "N. Central Asia Standard Time": "(GMT+06:00) Almaty, Novosibirsk",
          "Namibia Standard Time": "(GMT+02:00) Windhoek",
          "Nepal Standard Time": "(GMT+05:45) Kathmandu",
          "New Zealand Standard Time": "(GMT+12:00) Auckland, Wellington",
          "Newfoundland Standard Time": "(GMT-03:30) Newfoundland",
          "North Asia East Standard Time": "(GMT+08:00) Irkutsk, Ulaan Bataar",
          "North Asia Standard Time": "(GMT+07:00) Krasnoyarsk",
          "Pacific SA Standard Time": "(GMT-04:00) Santiago",
          "Pacific Standard Time": "(GMT-08:00) Pacific Time (US & Canada)",
          "Pacific Standard Time (Mexico)": "(GMT-08:00) Tijuana, Baja California",
          "Pakistan Standard Time": "(GMT+05:00) Islamabad, Karachi",
          "Romance Standard Time": "(GMT+01:00) Brussels, Copenhagen, Madrid, Paris",
          "Russian Standard Time": "(GMT+03:00) Moscow, St. Petersburg, Volgograd",
          "SA Eastern Standard Time": "(GMT-03:00) Georgetown",
          "SA Pacific Standard Time": "(GMT-05:00) Bogota, Lima, Quito, Rio Branco",
          "SA Western Standard Time": "(GMT-04:00) La Paz",
          "Samoa Standard Time": "(GMT-11:00) Midway Island, Samoa",
          "SE Asia Standard Time": "(GMT+07:00) Bangkok, Hanoi, Jakarta",
          "Singapore Standard Time": "(GMT+08:00) Kuala Lumpur, Singapore",
          "South Africa Standard Time": "(GMT+02:00) Harare, Pretoria",
          "Sri Lanka Standard Time": "(GMT+05:30) Sri Jayawardenepura",
          "Taipei Standard Time": "(GMT+08:00) Taipei",
          "Tasmania Standard Time": "(GMT+10:00) Hobart",
          "Tokyo Standard Time": "(GMT+09:00) Osaka, Sapporo, Tokyo",
          "Tonga Standard Time": "(GMT+13:00) Nuku'alofa",
          "US Eastern Standard Time": "(GMT-05:00) Indiana (East)",
          "US Mountain Standard Time": "(GMT-07:00) Arizona",
          "UTC": "UTC",
          "Venezuela Standard Time": "(GMT-04:30) Caracas",
          "Vladivostok Standard Time": "(GMT+10:00) Vladivostok",
          "W. Australia Standard Time": "(GMT+08:00) Perth",
          "W. Central Africa Standard Time": "(GMT+01:00) West Central Africa",
          "W. Europe Standard Time": "(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
          "West Asia Standard Time": "(GMT+05:00) Tashkent",
          "West Pacific Standard Time": "(GMT+10:00) Guam, Port Moresby",
          "Yakutsk Standard Time": "(GMT+09:00) Yakutsk"
        }
      },
      "EnumCurrency": {
        "enum": [
          "AUD",
          "BHD",
          "BGN",
          "CAD",
          "CNY",
          "HRK",
          "CZK",
          "DKK",
          "AED",
          "EUR",
          "GBP",
          "HKD",
          "HUF",
          "ISK",
          "JPY",
          "NOK",
          "PLN",
          "RUB",
          "SGD",
          "SEK",
          "CHF",
          "THB",
          "TRY",
          "UAH",
          "USD"
        ],
        "type": "string",
        "description": "The enum of Currency.",
        "x-enumDescriptions": {
          "AUD": "Australian Dollar",
          "BHD": "Bahraini Dinar",
          "BGN": "Bulgarian Lev",
          "CAD": "Canadian Dollar",
          "CNY": "Chinese Yuan Renminbi",
          "HRK": "Croatian Kuna",
          "CZK": "Czech Koruna",
          "DKK": "Danish Krone",
          "AED": "Emirati Dirham",
          "EUR": "Euro",
          "GBP": "Great British Pound",
          "HKD": "Hong Kong Dollar",
          "HUF": "Hungarian Forint",
          "ISK": "Icelandic krona",
          "JPY": "Japanese Yen",
          "NOK": "Norwegian Krone",
          "PLN": "Polish Zloty",
          "RUB": "Russian Ruble",
          "SGD": "Singapore Dollar",
          "SEK": "Swedish Kroner",
          "CHF": "Swiss Franc",
          "THB": "Thailand Baht",
          "TRY": "Turkish Lira",
          "UAH": "Ukrainian hryvnia",
          "USD": "United States Dollar"
        }
      },
      "LocationData": {
        "required": [
          "Id",
          "Name",
          "Is_Active"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The guid to identify the location"
          },
          "ExternalId": {
            "type": "string",
            "description": "The external identifier of the location"
          },
          "Name": {
            "type": "string",
            "description": "The name of the location"
          },
          "CountryId": {
            "$ref": "#/components/schemas/EnumCountry"
          },
          "TimezoneId": {
            "$ref": "#/components/schemas/EnumTimezone"
          },
          "CurrencyId": {
            "$ref": "#/components/schemas/EnumCurrency"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if the location is active and can be used",
            "default": false,
            "example": false
          }
        },
        "description": "The record of Location information."
      },
      "LocationInsertData": {
        "required": [
          "Id",
          "Name",
          "Is_Active"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The guid to identify the location"
          },
          "ExternalId": {
            "type": "string",
            "description": "The external identifier of the location"
          },
          "Name": {
            "type": "string",
            "description": "The name of the location"
          },
          "CountryId": {
            "$ref": "#/components/schemas/EnumCountry"
          },
          "TimezoneId": {
            "$ref": "#/components/schemas/EnumTimezone"
          },
          "CurrencyId": {
            "$ref": "#/components/schemas/EnumCurrency"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if the location is active and can be used",
            "default": false,
            "example": false
          }
        },
        "description": "The record of Location information."
      },
      "LocationUpdateData": {
        "required": [
          "Name",
          "Is_Active"
        ],
        "type": "object",
        "properties": {
          "ExternalId": {
            "type": "string",
            "description": "The external identifier of the location"
          },
          "Name": {
            "type": "string",
            "description": "The name of the location"
          },
          "CountryId": {
            "$ref": "#/components/schemas/EnumCountry"
          },
          "TimezoneId": {
            "$ref": "#/components/schemas/EnumTimezone"
          },
          "CurrencyId": {
            "$ref": "#/components/schemas/EnumCurrency"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if the location is active and can be used",
            "default": false,
            "example": false
          }
        },
        "description": "The record of Location information."
      },
      "Connection": {
        "required": [
          "Id",
          "Name",
          "URL"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of the module that owns the entity that is being processed"
          },
          "Name": {
            "type": "string",
            "description": "Name of connection"
          },
          "Description": {
            "type": "string",
            "description": "Description of connection"
          },
          "ApiKey": {
            "type": "string",
            "description": "An API key is a unique identifier used to authenticate a user, developer, or calling program to an API"
          },
          "SecretKey": {
            "type": "string",
            "description": "A secret key for signing payloads, enhancing security."
          },
          "URL": {
            "type": "string",
            "description": "Webhook external service URL-address"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "If true, the configuration is active",
            "default": false,
            "example": false
          },
          "Is_System": {
            "type": "boolean",
            "description": "If true, the configuration is internal to the system and not visible in the user interface",
            "default": false,
            "example": false
          },
          "ModifiedBy": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated.",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created.",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Connection information."
      },
      "Connections": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection"
            },
            "description": "The list of `Connection records`"
          }
        },
        "description": "The list of `Connection` records"
      },
      "ConnectionData": {
        "required": [
          "Id",
          "Name",
          "URL"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of the module that owns the entity that is being processed"
          },
          "Name": {
            "type": "string",
            "description": "Name of connection"
          },
          "Description": {
            "type": "string",
            "description": "Description of connection"
          },
          "ApiKey": {
            "type": "string",
            "description": "An API key is a unique identifier used to authenticate a user, developer, or calling program to an API"
          },
          "SecretKey": {
            "type": "string",
            "description": "A secret key for signing payloads, enhancing security."
          },
          "URL": {
            "type": "string",
            "description": "Webhook external service URL-address"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "If true, the configuration is active",
            "default": false,
            "example": false
          },
          "Is_System": {
            "type": "boolean",
            "description": "If true, the configuration is internal to the system and not visible in the user interface",
            "default": false,
            "example": false
          },
          "ModifiedBy": {
            "$ref": "#/components/schemas/FieldType"
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated.",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/FieldType"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created.",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Connection information."
      },
      "Config": {
        "required": [
          "Id",
          "WebhookEntityId"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of the config"
          },
          "WebhookEntityId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "HasCreateAccess": {
            "type": "boolean",
            "description": "Service has create access to data",
            "default": false,
            "example": false
          },
          "HasUpdateAccess": {
            "type": "boolean",
            "description": "Service has update access to data",
            "default": false,
            "example": false
          },
          "HasDeleteAccess": {
            "type": "boolean",
            "description": "Service has delete access to data",
            "default": false,
            "example": false
          },
          "Is_Active": {
            "type": "boolean",
            "description": "If true, the configuration is active",
            "default": false,
            "example": false
          },
          "ModifiedBy": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated.",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created.",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Config information."
      },
      "Configs": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Config"
            },
            "description": "The list of `Config records`"
          }
        },
        "description": "The list of `Config` records"
      },
      "ConfigData": {
        "required": [
          "Id",
          "WebhookEntityId"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of the config"
          },
          "WebhookEntityId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "HasCreateAccess": {
            "type": "boolean",
            "description": "Service has create access to data",
            "default": false,
            "example": false
          },
          "HasUpdateAccess": {
            "type": "boolean",
            "description": "Service has update access to data",
            "default": false,
            "example": false
          },
          "HasDeleteAccess": {
            "type": "boolean",
            "description": "Service has delete access to data",
            "default": false,
            "example": false
          },
          "Is_Active": {
            "type": "boolean",
            "description": "If true, the configuration is active",
            "default": false,
            "example": false
          },
          "ModifiedBy": {
            "$ref": "#/components/schemas/FieldType"
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated.",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/FieldType"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created.",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Config information."
      },
      "ConfigText": {
        "required": [
          "Id",
          "WebhookEntityId"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of the config"
          },
          "WebhookEntityId": {
            "type": "string",
            "description": "Identifier of webhook entity."
          },
          "HasCreateAccess": {
            "type": "boolean",
            "description": "Service has create access to data",
            "default": false,
            "example": false
          },
          "HasUpdateAccess": {
            "type": "boolean",
            "description": "Service has update access to data",
            "default": false,
            "example": false
          },
          "HasDeleteAccess": {
            "type": "boolean",
            "description": "Service has delete access to data",
            "default": false,
            "example": false
          },
          "Is_Active": {
            "type": "boolean",
            "description": "If true, the configuration is active",
            "default": false,
            "example": false
          },
          "ModifiedBy": {
            "type": "string",
            "description": "The Identifier of the user who updated the record"
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated.",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "CreatedBy": {
            "type": "string",
            "description": "The Identifier of the user who created the record"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created.",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Config information."
      },
      "ConfigsData": {
        "type": "object",
        "properties": {
          "Extra": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListValidation"
            },
            "description": "List validation for entity attribute"
          },
          "IsFullValidation": {
            "type": "boolean",
            "description": "If the value is true, the data quality of all fields are checked. This has an effect on performance.",
            "default": false,
            "example": false
          },
          "Configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigText"
            },
            "description": "The list of `Config` data record for import"
          }
        },
        "description": "The data loading record of Config importing"
      },
      "Entity": {
        "required": [
          "Id",
          "Name",
          "Application",
          "InternalConfigId"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The Guid identifier of web hook entity"
          },
          "Name": {
            "type": "string",
            "description": "Name of entity"
          },
          "Application": {
            "type": "string",
            "description": "Name of application"
          },
          "InternalConfigId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "If true, the entity is active",
            "default": false,
            "example": false
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created.",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Entity information."
      },
      "Entities": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entity"
            },
            "description": "The list of `Entity records`"
          }
        },
        "description": "The list of `Entity` records"
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request - The user has provided input that the browser is unable to convert.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "The user has provided input that the browser is unable to convert.",
                "There are multiple rows in the database for the same value",
                "The value does not match the specified entity structure",
                "..."
              ],
              "Type": "/Errors/Bad Input",
              "Title": "Bad Request",
              "StatusCode": 400,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "The session Id or OAuth token used has expired or is invalid."
              ],
              "Type": "/Errors/Unauthorized",
              "Title": "Unauthorized",
              "StatusCode": 401,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden - The user does not have access to execute operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "The user does not have access to execute operation"
              ],
              "Type": "/Errors/Permission",
              "Title": "Bad Request",
              "StatusCode": 403,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      },
      "404": {
        "description": "Not Found - The requested resource does not exist.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "The requested resource does not exist"
              ],
              "Type": "/Errors/Not Found",
              "Title": "Not Found",
              "StatusCode": 404,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error - An internal server error is an error on the web server you're trying to access.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "An internal server error is an error on the web server you're trying to access."
              ],
              "Type": "/Errors/Internal Server Error",
              "Title": "Internal Server Error",
              "StatusCode": 500,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "description": "oAuth autentication flow",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://dev.esystems.fi/oAuth/rest/v2/Token",
            "refreshUrl": "https://dev.esystems.fi/oAuth/rest/v2/Token",
            "scopes": {
              "AccessManager:Read": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessUser:Read": "Allows to review access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessManager:Create, Update": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessUser:Create, Update": "Allows to review access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessManager:Create": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessUser:Create": "Allows to review access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessManager:Update": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessUser:Update": "Allows to review access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessManager:Delete": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessUser:Delete": "Allows to review access groups and all related data. (ABAC) permissions required to perform a function."
            }
          }
        }
      }
    }
  }
}