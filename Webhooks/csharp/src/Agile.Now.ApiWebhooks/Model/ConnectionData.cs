/*
 * Webhook API
 *
 * ## Introduction  The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.    An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.    | Version | URL | Description |  | - -- | - -- | - -- |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Json/Webhooks | Serializes to the Open API document as a string in the JSON format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Yaml/Webhooks | Serializes to the Open API document as a string in the Yaml format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Json/Webhooks | Serializes to the Open API document as a string in the JSON format and represents OpenAPI V2.0 spec.|  | v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Yaml/Webhooks | Serializes to the Open API document as a string in the Yaml format and represents OpenAPI V2.0 spec. |
 *
 * The version of the OpenAPI document: 3.0.18
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agile.Now.ApiWebhooks.Client.OpenAPIDateConverter;

namespace Agile.Now.ApiWebhooks.Model
{
    /// <summary>
    /// The record of Connection information.
    /// </summary>
    [DataContract(Name = "ConnectionData")]
    public partial class ConnectionData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConnectionData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionData" /> class.
        /// </summary>
        /// <param name="id">The identifier of the module that owns the entity that is being processed (required).</param>
        /// <param name="name">Name of connection (required).</param>
        /// <param name="description">Description of connection.</param>
        /// <param name="apiKey">An API key is a unique identifier used to authenticate a user, developer, or calling program to an API.</param>
        /// <param name="secretKey">A secret key for signing payloads, enhancing security..</param>
        /// <param name="uRL">Webhook external service URL-address (required).</param>
        /// <param name="isActive">If true, the configuration is active (default to false).</param>
        /// <param name="isSystem">If true, the configuration is internal to the system and not visible in the user interface (default to false).</param>
        /// <param name="modifiedBy">modifiedBy.</param>
        /// <param name="modifiedOn">The date the record was updated. (default to &quot;1900-01-01T00:00Z&quot;).</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdOn">The date the record was created. (default to &quot;1900-01-01T00:00Z&quot;).</param>
        public ConnectionData(string id = default(string), string name = default(string), string description = default(string), string apiKey = default(string), string secretKey = default(string), string uRL = default(string), bool isActive = false, bool isSystem = false, FieldType modifiedBy = default(FieldType), DateTime modifiedOn = default(DateTime), FieldType createdBy = default(FieldType), DateTime createdOn = default(DateTime))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ConnectionData and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ConnectionData and cannot be null");
            }
            this.Name = name;
            // to ensure "uRL" is required (not null)
            if (uRL == null)
            {
                throw new ArgumentNullException("uRL is a required property for ConnectionData and cannot be null");
            }
            this.URL = uRL;
            this.Description = description;
            this.ApiKey = apiKey;
            this.SecretKey = secretKey;
            this.IsActive = isActive;
            this.IsSystem = isSystem;
            this.ModifiedBy = modifiedBy;
            this.ModifiedOn = modifiedOn;
            this.CreatedBy = createdBy;
            this.CreatedOn = createdOn;
        }

        /// <summary>
        /// The identifier of the module that owns the entity that is being processed
        /// </summary>
        /// <value>The identifier of the module that owns the entity that is being processed</value>
        [DataMember(Name = "Id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Name of connection
        /// </summary>
        /// <value>Name of connection</value>
        [DataMember(Name = "Name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Description of connection
        /// </summary>
        /// <value>Description of connection</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// An API key is a unique identifier used to authenticate a user, developer, or calling program to an API
        /// </summary>
        /// <value>An API key is a unique identifier used to authenticate a user, developer, or calling program to an API</value>
        [DataMember(Name = "ApiKey", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// A secret key for signing payloads, enhancing security.
        /// </summary>
        /// <value>A secret key for signing payloads, enhancing security.</value>
        [DataMember(Name = "SecretKey", EmitDefaultValue = false)]
        public string SecretKey { get; set; }

        /// <summary>
        /// Webhook external service URL-address
        /// </summary>
        /// <value>Webhook external service URL-address</value>
        [DataMember(Name = "URL", IsRequired = true, EmitDefaultValue = true)]
        public string URL { get; set; }

        /// <summary>
        /// If true, the configuration is active
        /// </summary>
        /// <value>If true, the configuration is active</value>
        /// <example>false</example>
        [DataMember(Name = "Is_Active", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// If true, the configuration is internal to the system and not visible in the user interface
        /// </summary>
        /// <value>If true, the configuration is internal to the system and not visible in the user interface</value>
        /// <example>false</example>
        [DataMember(Name = "Is_System", EmitDefaultValue = true)]
        public bool IsSystem { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name = "ModifiedBy", EmitDefaultValue = false)]
        public FieldType ModifiedBy { get; set; }

        /// <summary>
        /// The date the record was updated.
        /// </summary>
        /// <value>The date the record was updated.</value>
        /// <example>1900-01-01T00:00Z</example>
        [DataMember(Name = "ModifiedOn", EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "CreatedBy", EmitDefaultValue = false)]
        public FieldType CreatedBy { get; set; }

        /// <summary>
        /// The date the record was created.
        /// </summary>
        /// <value>The date the record was created.</value>
        /// <example>1900-01-01T00:00Z</example>
        [DataMember(Name = "CreatedOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectionData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  SecretKey: ").Append(SecretKey).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
