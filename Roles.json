{
  "openapi": "3.0.1",
  "info": {
    "title": "Roles API documentation",
    "description": "## Introduction\r\nThe OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.\r\n\r\nAn OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.\r\n\r\n| Version | URL | Description |\r\n| --- | --- | --- |\r\n| v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Json/Roles | Serializes to the Open API document as a string in the JSON format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |\r\n| v3 | https://dev.esystems.fi/Endpoint/rest/Doc/v3/Yaml/Roles | Serializes to the Open API document as a string in the Yaml format and represents all patches of OpenAPI V3.0 spec (e.g. 3.0.0, 3.0.1). |\r\n| v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Json/Roles | Serializes to the Open API document as a string in the JSON format and represents OpenAPI V2.0 spec.|\r\n| v2 | https://dev.esystems.fi/Endpoint/rest/Doc/v2/Yaml/Roles | Serializes to the Open API document as a string in the Yaml format and represents OpenAPI V2.0 spec. |",
    "contact": { },
    "license": {
      "name": "BSD-3 license",
      "url": "https://opensource.org/licenses/BSD-3-Clause"
    },
    "version": "3.0.9"
  },
  "servers": [
    {
      "url": "https://dev.esystems.fi",
      "description": "Default entry point of service"
    }
  ],
  "paths": {
    "/Endpoint/rest/api/v1/Role/{Id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "description": "The method returns one record of the `Role`.\n\nMethod returns an extended `Role` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `AccessApplicationId, RoleId, ApplicationId, EspaceId, ModifiedBy, CreatedBy`\n\n### Get a record of Role\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id, Name, RoleKey` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.",
        "operationId": "Get Role",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName, RoleKey\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName, RoleKey\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The record of `Role` information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "description": "Use the `RoleData` object resource to update `Role` using `Id, Name, RoleKey` field(s) value.\n\nProvide the updated record information in your request data and use the `PUT` method of the resource with a specific record ID to update that record. \n\nThe input parameter must be used in the `RoleData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `AccessApplicationId, RoleId, ApplicationId, EspaceId, ModifiedBy, CreatedBy`\n\n### Update a record of Role\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id, Name, RoleKey` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the updated record if the call is successful. Method returns an extended `Role` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Update Role",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName, RoleKey\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName, RoleKey\n```"
            }
          }
        ],
        "requestBody": {
          "description": "Role information to update.\n\nThe input parameter must be used in the `RoleData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Updated `Role` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Update"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "description": "Use the query string resource to delete `Role` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id, Name, RoleKey` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `Role` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `AccessApplicationId, RoleId, ApplicationId, EspaceId, ModifiedBy, CreatedBy`\n\n### Delete a record of Role\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id, Name, RoleKey` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Role",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName, RoleKey\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nName, RoleKey\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `Role` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Delete"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `Role` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `AccessApplicationId, RoleId, ApplicationId, EspaceId, ModifiedBy, CreatedBy`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Roles",
        "parameters": [
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, Name, RoleKey, FullName, Description, ExternalId, AccessApplicationId, Is_Active, ModifiedOn, ModifiedBy, CreatedBy, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, Name, RoleKey, FullName, Description, ExternalId, AccessApplicationId, Is_Active, ModifiedOn, ModifiedBy, CreatedBy, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Read"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Role": {
      "patch": {
        "tags": [
          "Roles"
        ],
        "description": "Use the `RoleData` object resource to insert or update (Upsert) `Role` using `Id, Name, RoleKey` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `RoleData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `AccessApplicationId, RoleId, ApplicationId, EspaceId, ModifiedBy, CreatedBy`\n\n### Update a record of Role\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `Name, RoleKey` field value is not empty and `Id` field value is empty, action try insert record according `Name, RoleKey` field value (if set, the value is a unique identifier).\n\n### Create a new record of Role\n* If the value in the `Name, RoleKey` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`RoleData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Role` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Role",
        "requestBody": {
          "description": "`Role` information to insert or update.\n\nThe input parameter must be used in the `RoleData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `Role` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Create, Update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "description": "Use the `RoleData` object resource to create new records.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `RoleData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `AccessApplicationId, RoleId, ApplicationId, EspaceId, ModifiedBy, CreatedBy`\n\n### Create a new record of Role\n* If the value in the `Id, Name, RoleKey` fields are empty then action insert a new record according input parameter entity record structure (`RoleData`).\n* If the value in the `Name, RoleKey` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`RoleData`).\n* If the `Id, Name, RoleKey` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the created record if the call is successful. Method returns an extended `Role` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\n",
        "operationId": "Create Role",
        "requestBody": {
          "description": "`Role` information to insert.\n\nThe input parameter must be used in the `RoleData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted `Role` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Create"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Role/{Id}/Permissions": {
      "get": {
        "tags": [
          "Roles"
        ],
        "description": "Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.\n\nLeverage the search service to extract the requisite information from the system effectively.\n\nThe method returns a list structured with an extended `Permission` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.\n\nThe foreign key fields involved are: `AccessRoleId, RoleId, PermissionId`\n\n### Example\nIt searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.\n\n```http\nfields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000\n```",
        "operationId": "List Role Permissions",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, AccessRoleId, PermissionId, CreatedOn\n```",
            "schema": {
              "type": "string",
              "description": "Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.\n\nThe list of database column attributes. If list is empty or &quot;*&quot; then all of fields will be returned.\n\nThis method converts a string list to a string with a comma separator.\n\nExample: \n```\nId, AccessRoleId, PermissionId, CreatedOn\n```"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n",
            "schema": {
              "type": "string",
              "description": "In the List methods, filtering of resources can be performed using filter parameters.\n\nYou can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.\n\nThe name of the entity field. Example: `Name` or relation field `OwnerId.Name`\n\nPlease refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.\n\nThe operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn\n\nYou can add multiple values separated by comma when using the `In`, `NotIn` operators.\nExample of text field; `USA; FIN; ARE`\nExample of numeric field; `1, 2, 3`\n\nExample of filters:\n```sql\nFilters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)\n\nFilters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)\n\nFilters=ExternalId In S100;S101;S120;100\n\nFilters=Id = 100\n\n```\n"
            }
          },
          {
            "name": "Orders",
            "in": "query",
            "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```",
            "schema": {
              "type": "string",
              "description": "The `Orders` parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "schema": {
              "type": "integer",
              "description": "This field specifies the current page of results being returned. It&#39;s often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
            "schema": {
              "type": "integer",
              "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.\n\nThe value ranges from `1` to `1000` and defaults to `50`.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permissions"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Roles"
        ],
        "description": "Use the `PermissionsData` object resource to insert or update (Upsert) a list of `PermissionData` using `Id, PermissionId` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `PermissionList` record structure as text fields in the foreign key fields.\n\nForeign key fields are: `AccessRoleId, RoleId, PermissionId`\n\n### Update a record of Permission\n* If the `PermissionId` field value is not empty and `Id` field value is empty, action try insert record according `PermissionId` field value (if set, the value is a unique identifier).\n\n**Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.\n\n### Create a new record of Permission\n* If the value in the `PermissionId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`PermissionData`).\n\nThe response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `Permission` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.",
        "operationId": "Patch Role Permissions",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "DeleteNotExists",
            "in": "query",
            "description": "The Delete not exists function delete orphan values from a table.\n\nIf you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.",
            "schema": {
              "type": "string",
              "description": "The Delete not exists function delete orphan values from a table.\n\nIf you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.",
              "default": "false"
            }
          }
        ],
        "requestBody": {
          "description": "The list of Permission information to insert or update.\n\nThe input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Data"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated list of Permission information. \n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permissions"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Create, Update"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Role/{Id}/Permission": {
      "post": {
        "tags": [
          "Roles"
        ],
        "description": "Use the `PermissionPost` object resource to insert or update (Upsert) `Permission` using `Id, PermissionId` field(s) value.\n\nYou can supply the required field values in the request data, and then use the `POST` method of the resource.\n\nThe input parameter must be used in the `PermissionData` record structure inside the `FieldType` parameter in the foreign key fields.\n\nForeign key fields are: `AccessRoleId, RoleId, PermissionId`\n\n### Update a record of Permission\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).\n* If the `PermissionId` field value is not empty and `Id` field value is empty, action try insert record according `PermissionId` field value (if set, the value is a unique identifier).\n\n### Create a new record of Permission\n* If the value in the `PermissionId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`PermissionData`).\n\nThe response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Permission` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.",
        "operationId": "Upsert Role Permission",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          }
        ],
        "requestBody": {
          "description": "`Permission` information to insert or update.\n\nThe input parameter must be used in the `PermissionData` record structure inside the `FieldType` parameter in the foreign key fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionData"
              }
            }
          },
          "required": true,
          "x-bodyName": "Record"
        },
        "responses": {
          "200": {
            "description": "Inserted or updated `Permission` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Create, Update"
            ]
          }
        ]
      }
    },
    "/Endpoint/rest/api/v1/Role/{Id}/Permission/{SubId}": {
      "delete": {
        "tags": [
          "Roles"
        ],
        "description": "Use the query string resource to delete `Permission` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id, PermissionId` field(s) value and use the `DELETE` method of the resource to delete a record.\n\nMethod returns an extended `Permission` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.\n\nForeign key fields are: `AccessRoleId, RoleId, PermissionId`\n\n### Delete a record of Permission\n* If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.\n* If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id, PermissionId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.\n\nThe response body will contain the object of the deleted record if the call is successful.",
        "operationId": "Delete Role Permission",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Role record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nId\n```"
            }
          },
          {
            "name": "SubId",
            "in": "path",
            "description": "The identifier of the Permission record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the Permission record. The parameter is part of the url address and some special characters are forbidden.\n\nYou can extract any string to a base64 string.\nE.g email address name@domain.com value is base64\\|bmFtZUBkb21haW4uY29t"
            }
          },
          {
            "name": "SubName",
            "in": "query",
            "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nPermissionId\n```",
            "schema": {
              "type": "string",
              "description": "The name of the database field. If empty, the entity `Id` field is used.\n\nExample: \n```\nPermissionId\n```"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted `Permission` information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "OAuth2": [
              "AccessManager:Delete"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Meta": {
        "required": [
          "TotalItems",
          "CurrentPage",
          "PageSize",
          "Type"
        ],
        "type": "object",
        "properties": {
          "TotalItems": {
            "type": "integer",
            "description": "This field represents the total number of items available in the entire dataset, not just the items returned in the current response. It's useful for implementing pagination, as clients can use it to calculate the number of pages or total available items.",
            "format": "int32",
            "default": 0,
            "example": 1000
          },
          "CurrentPage": {
            "type": "integer",
            "description": "This field specifies the current page of results being returned. It's often used in conjunction with `PageSize` to manage pagination by indicating which subset of the total data is currently being retrieved.",
            "format": "int32",
            "default": 1,
            "example": 50
          },
          "PageSize": {
            "type": "integer",
            "description": "The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.",
            "format": "int32",
            "default": 50,
            "example": 50
          },
          "Type": {
            "type": "string",
            "description": "The type of the record",
            "example": "User"
          }
        },
        "description": "The object provides metadata about the list of items returned in the API response. It typically includes information that helps clients understand and work with the data."
      },
      "Error": {
        "required": [
          "Errors",
          "StatusCode"
        ],
        "type": "object",
        "properties": {
          "Errors": {
            "type": "array",
            "items": {
              "type": "string",
              "default": ""
            },
            "description": "Human-readable explanation of the errors"
          },
          "Type": {
            "type": "string",
            "description": "URI identifier that categorizes the error",
            "default": ""
          },
          "Title": {
            "type": "string",
            "description": "Brief, human-readable message about the error",
            "default": ""
          },
          "StatusCode": {
            "type": "integer",
            "description": "The HTTP response code",
            "format": "int32",
            "example": 400
          },
          "Instance": {
            "type": "string",
            "description": "URI that identifies the specific occurrence of the error",
            "default": ""
          },
          "RequestKey": {
            "type": "string",
            "description": "Provides a request key that identifies the current request.",
            "default": ""
          }
        },
        "description": "The list of errors. Throw specific exceptions based on the received error."
      },
      "Role": {
        "required": [
          "Id",
          "RoleKey"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of the role"
          },
          "Name": {
            "type": "string",
            "description": "Name of role"
          },
          "RoleKey": {
            "type": "string",
            "description": " The key used to identify the role must be unique within each workspace."
          },
          "FullName": {
            "type": "string",
            "description": "Full name of role. Example Application 1 \\ Espace 1 \\ Role 1"
          },
          "Description": {
            "type": "string",
            "description": "The description of access group"
          },
          "ExternalId": {
            "type": "string",
            "description": "The external system code of the role"
          },
          "AccessApplicationId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if record is active",
            "default": false,
            "example": false
          },
          "ModifiedOn": {
            "type": "string",
            "description": "The date the record was updated",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          },
          "ModifiedBy": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/AbstractLong"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date the record was created",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Role information."
      },
      "AbstractText": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The primary key of the record. It uniquely identifies each record within the dataset. This attribute is required and must be unique across all records.",
            "example": "3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5"
          },
          "ExternalId": {
            "type": "string",
            "description": "An external identifier for the record, which can be used to link the record to external systems or datasets. This attribute is optional but should be unique if provided.",
            "example": "3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5"
          },
          "Name": {
            "type": "string",
            "description": "The name of the record. This attribute provides a human-readable identifier for the record, making it easier to recognize and differentiate records in lists or other displays. This attribute is optional.",
            "example": "Bob Normal"
          },
          "Type": {
            "type": "string",
            "description": "The type of the record object. This attribute is used to classify the record into specific categories or types, helping to organize and manage different kinds of records. This attribute is optional.",
            "example": "User"
          }
        },
        "description": "This structure represents an abstract object with a primary key of type Text. It is used to encapsulate detailed information about related entities."
      },
      "AbstractLong": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The primary key of the record. It uniquely identifies each record within the dataset. This attribute is required and must be unique across all records.",
            "format": "int64",
            "default": 0,
            "example": 1234567891234567
          },
          "ExternalId": {
            "type": "string",
            "description": "An external identifier for the record, which can be used to link the record to external systems or datasets. This attribute is optional but should be unique if provided.",
            "example": "3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5"
          },
          "Name": {
            "type": "string",
            "description": "The name of the record. This attribute provides a human-readable identifier for the record, making it easier to recognize and differentiate records in lists or other displays. This attribute is optional.",
            "example": "Bob Normal"
          },
          "Type": {
            "type": "string",
            "description": "The type of the record object. This attribute is used to classify the record into specific categories or types, helping to organize and manage different kinds of records. This attribute is optional.",
            "example": "User"
          }
        },
        "description": "This structure represents an abstract object with a primary key of type Long. It is used to encapsulate detailed information about related entities."
      },
      "Roles": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "description": "The list of `Role records`"
          }
        },
        "description": "The list of `Role` records"
      },
      "RoleData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The identifier of the role."
          },
          "Name": {
            "type": "string",
            "description": "Name of role. The value must be unique in the system and you cannot add multiple values."
          },
          "RoleKey": {
            "type": "string",
            "description": " The key used to identify the role must be unique within each workspace. The value must be unique in the system and you cannot add multiple values."
          },
          "FullName": {
            "type": "string",
            "description": "Full name of role. Example Application 1 \\ Espace 1 \\ Role 1."
          },
          "Description": {
            "type": "string",
            "description": "The description of access group."
          },
          "ExternalId": {
            "type": "string",
            "description": "The external system code of the role."
          },
          "AccessApplicationId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "Is_Active": {
            "type": "boolean",
            "description": "Defines if record is active.",
            "default": false,
            "example": false
          }
        },
        "description": "The record of Role information."
      },
      "FieldType": {
        "required": [
          "Value"
        ],
        "type": "object",
        "properties": {
          "Field": {
            "type": "string",
            "description": "The name of the data field. This can be any field name from the related database table, such as 'Email' from the User table or 'Name' from the Department table."
          },
          "Value": {
            "type": "string",
            "description": "The value corresponding to the specified data field. This value is used to identify the record in the related database table. For example, it could be an email address, a department name, or an external system's identifier."
          }
        },
        "description": "The field object structure. This structure allows users to specify any related entity field and its corresponding value. When saving data, the system automatically retrieves and assigns the primary key value from the system database table based on the provided field name and value."
      },
      "Permission": {
        "required": [
          "Id",
          "PermissionId",
          "CreatedOn"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The identifier of entity",
            "format": "int64",
            "default": 0,
            "example": 0
          },
          "PermissionId": {
            "$ref": "#/components/schemas/AbstractText"
          },
          "CreatedOn": {
            "type": "string",
            "description": "The date when the record was created.",
            "format": "date-time",
            "default": "1900-01-01T00:00:00Z",
            "example": "1900-01-01T00:00:00Z"
          }
        },
        "description": "The record of Permission information."
      },
      "Permissions": {
        "type": "object",
        "properties": {
          "Meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "The list of `Permission records`"
          }
        },
        "description": "The list of `Permission` records"
      },
      "EnumPermissionType": {
        "enum": [
          "Create",
          "Read",
          "Update",
          "Delete",
          "Details",
          "Export",
          "Import",
          "Generic"
        ],
        "type": "string",
        "description": "The enum of PermissionType.",
        "x-enums": [
          {
            "value": "Create",
            "name": "Create",
            "description": "Create",
            "isString": true
          },
          {
            "value": "Read",
            "name": "Read",
            "description": "Read",
            "isString": true
          },
          {
            "value": "Update",
            "name": "Update",
            "description": "Update",
            "isString": true
          },
          {
            "value": "Delete",
            "name": "Delete",
            "description": "Delete",
            "isString": true
          },
          {
            "value": "Details",
            "name": "Details",
            "description": "Details",
            "isString": true
          },
          {
            "value": "Export",
            "name": "Export",
            "description": "Export",
            "isString": true
          },
          {
            "value": "Import",
            "name": "Import",
            "description": "Import",
            "isString": true
          },
          {
            "value": "Generic",
            "name": "Generic",
            "description": "Generic",
            "isString": true
          }
        ]
      },
      "PermissionData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The identifier of entity.",
            "format": "int64",
            "default": 0,
            "example": 0
          },
          "RoleId": {
            "$ref": "#/components/schemas/FieldType"
          },
          "PermissionId": {
            "$ref": "#/components/schemas/EnumPermissionType"
          }
        },
        "description": "The record of Permission information."
      },
      "PermissionText": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The identifier of entity.",
            "format": "int64",
            "default": 0,
            "example": 0
          },
          "RoleId": {
            "type": "string",
            "description": "The identifier of role."
          },
          "PermissionId": {
            "type": "string",
            "description": "The identifier of permission."
          }
        },
        "description": "The record of Permission information."
      },
      "PermissionsData": {
        "type": "object",
        "properties": {
          "Extra": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListValidation"
            },
            "description": "List validation for entity attribute"
          },
          "IsFullValidation": {
            "type": "boolean",
            "description": "If the value is true, the data quality of all fields are checked. This has an effect on performance.",
            "default": false,
            "example": false
          },
          "Permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionText"
            },
            "description": "The list of `Permission` data record for import"
          }
        },
        "description": "The data loading record of Permission importing"
      },
      "ListValidation": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the entity field."
          },
          "FieldName": {
            "type": "string",
            "description": "The field name of relation database table.\n\nExample; \nThe field name is 'TenantId' and is associated with the 'Tenant' table. You want to use in the 'Tenant' table 'Name' field fetching data. Once 'Name' is specified, the validation service retrieves the tenant identifier from the 'Tenant' table based on the 'Name' field."
          },
          "Required": {
            "type": "boolean",
            "description": "If True, the value is required.",
            "default": false,
            "example": false
          },
          "Unique": {
            "type": "boolean",
            "description": "If True, the value must be unique in the database and you cannot add multiple values.",
            "default": false,
            "example": false
          },
          "Max": {
            "type": "string",
            "description": "The max value of input value."
          },
          "Min": {
            "type": "string",
            "description": "The min value of input value."
          },
          "Pattern": {
            "type": "string",
            "description": "The pattern of the validation. Searches the input string for an occurrence of a regular expression."
          },
          "DefaultValue": {
            "type": "string",
            "description": "The default value of row. If the value of the field is empty, the service automatically sets the value in the field. If the value does not match the data type, the value is cleaned. Remember data types."
          }
        },
        "description": "List validation for entity attribute"
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request - The user has provided input that the browser is unable to convert.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "The user has provided input that the browser is unable to convert.",
                "There are multiple rows in the database for the same value",
                "The value does not match the specified entity structure",
                "..."
              ],
              "Type": "/Errors/Bad Input",
              "Title": "Bad Request",
              "StatusCode": 400,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "The session Id or OAuth token used has expired or is invalid."
              ],
              "Type": "/Errors/Unauthorized",
              "Title": "Unauthorized",
              "StatusCode": 401,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden - The user does not have access to execute operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "The user does not have access to execute operation"
              ],
              "Type": "/Errors/Permission",
              "Title": "Bad Request",
              "StatusCode": 403,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      },
      "404": {
        "description": "Not Found - The requested resource does not exist.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "The requested resource does not exist"
              ],
              "Type": "/Errors/Not Found",
              "Title": "Not Found",
              "StatusCode": 404,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error - An internal server error is an error on the web server you're trying to access.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "Errors": [
                "An internal server error is an error on the web server you're trying to access."
              ],
              "Type": "/Errors/Internal Server Error",
              "Title": "Internal Server Error",
              "StatusCode": 500,
              "Instance": "/OpenApi/rest/Xzy",
              "RequestKey": "894ea43c-b8a6-4195-9a9c-82c07d9cc33a"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "description": "oAuth autentication flow",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://dev.esystems.fi/oAuth/rest/v2/Token",
            "refreshUrl": "https://dev.esystems.fi/oAuth/rest/v2/Token",
            "scopes": {
              "AccessManager:Read": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessManager:Create, Update": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessManager:Create": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessManager:Update": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function.",
              "AccessManager:Delete": "Allows to edit access groups and all related data. (ABAC) permissions required to perform a function."
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Roles",
      "description": "Roles"
    }
  ]
}