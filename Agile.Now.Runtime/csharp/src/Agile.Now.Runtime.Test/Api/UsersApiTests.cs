/*
 * Agile.Now.AccessHub API
 *
 * Agile.Now.AccessHub is a secure REST API designed to manage accounts, access groups, user groups, organizations, locations, applications, roles, and webhooks. This API provides a robust and scalable solution for managing user access and organizational structures in a multi-tenant environment.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: dev@agilenow.io
 *
 * BSD 3-Clause License
 * 
 * Copyright (c) 2024, eSystems Nordic Ltd.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list
 *    of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this
 *    list of conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without specific
 *    prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using Agile.Now.Runtime.Api;
using Agile.Now.Runtime.Model;
using Agile.Now.Runtime.Test.Data;
using Xunit;
using Xunit.Abstractions;
// uncomment below to import models
//using Agile.Now.AccessHub.Model;

namespace Agile.Now.Runtime.Test.Api {
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests : IDisposable {
        private readonly UsersApi api;

        public UsersApiTests(ITestOutputHelper testOutputHelper) {
            api = new(Settings.Connections[0]);
        }

        public void Dispose() { }

        /// <summary>
        /// Test GetUser by Id
        /// </summary>
        [Fact]
        public void Test_User_Get_ById() {
            var created = TestUserData.Users[0];
            Assert.Null(Record.Exception(() => {
                var existing = api.GetUser(created.Id.ToString());
                Assert.Equal(created.Id, existing.Id);
                return existing;
            }));
        }

        /// <summary>
        /// Test GetUser by Name
        /// </summary>
        [Fact]
        public void Test_User_Get_ByName() {
            var created = TestUserData.Users[0];
            Assert.Null(Record.Exception(() => {
                var existing = api.GetUser(created.Name, "Name");
                Assert.Equal(created.Name, existing.Name.ToString());
                return existing;
            }));
        }

        /// <summary>
        /// Test ListUsers by Id
        /// </summary>
        [Fact]
        public void Test_User_List_ById() {
            var existing = api.ListUsers(
                filters: $"Id In {string.Join(", ", TestUserData.Users.Select(i => i.Id))}").Data;
            Assert.Equal(TestUserData.Users.Length, existing.Count);
        }

        /// <summary>
        /// Test ListUsers by Name
        /// </summary>
        [Fact]
        public void Test_User_List_ByName() {
            var existing = api.ListUsers(
                filters: $"Name In {string.Join("; ", TestUserData.Users.Select(i => i.Name))}").Data;
            Assert.Equal(TestUserData.Users.Length, existing.Count);
        }

        /// <summary>
        /// Test ListUsers with paging
        /// </summary>
        [Fact]
        public void Test_User_List_Paging() {
            var existing = TestUserData.Users;
            var filters = $"Name In {string.Join("; ", existing.Select(i => i.Name))}";
            var pageSize = 2;
            var pages = new[] {
                    api.ListUsers(filters: filters, currentPage: 0, pageSize: pageSize).Data,
                    api.ListUsers(filters: filters, currentPage: 1, pageSize: pageSize).Data,
                };
            Assert.Equal(pageSize, pages[0].Count);
            Assert.Equal(pageSize, pages[1].Count);
            Assert.Equal(existing.Length, pages[0].Concat(pages[1]).GroupBy(i => i.Id).Count());
        }

        /// <summary>
        /// Test DeleteUserAccessGroup
        /// </summary>
        [Fact]
        public void Test_User_AccessGroup_Delete() {
            var entity = TestUserData.Users[0];
            var created = api.UpsertUserAccessGroup(entity.Id.ToString(),
                TestUserData.CreateAccessGroupData(TestUserData.AccessGroups[0]));
            api.DeleteUserAccessGroup(entity.Id.ToString(), created.Id.ToString());
            var existing = api.ListUserAccessGroups(entity.Id.ToString()).Data;
            Assert.Empty(existing);
        }

        /// <summary>
        /// Test ListUserAccessGroups
        /// </summary>
        [Fact]
        public void Test_User_AccessGroup_List() {
            var entity = TestUserData.Users[0];
            var created = TestUserData.AccessGroups.Select(i =>
                api.UpsertUserAccessGroup(entity.Id.ToString(),
                    TestUserData.CreateAccessGroupData(i))).ToArray();
            try {
                var existing = api.ListUserAccessGroups(entity.Id.ToString()).Data;
                Assert.Equal(created.Length, existing.Count);
            }
            finally {
                foreach(var i in created)
                    api.DeleteUserAccessGroup(entity.Id.ToString(), i.Id.ToString());
            }
        }

        /// <summary>
        /// Test UpsertUserAccessGroup
        /// </summary>
        [Fact]
        public void Test_User_AccessGroup_Upsert() {
            var entity = TestUserData.Users[1];
            var data = TestUserData.CreateAccessGroupData(TestUserData.AccessGroups[0]);
            var created = api.UpsertUserAccessGroup(entity.Id.ToString(), data);
            try {
                var existing = api.ListUserAccessGroups(entity.Id.ToString()).Data;
                Assert.Contains(existing, i => i.Id == created.Id);
                data = TestUserData.CreateAccessGroupData(TestUserData.AccessGroups[1]);
                var updated = api.UpsertUserAccessGroup(entity.Id.ToString(), data);
                Assert.Equal(created.Id, updated.Id);
                Assert.Equal(data.AccessGroupId.Value, updated.Id);
            }
            finally {
                api.DeleteUserAccessGroup(entity.Id.ToString(), created.Id.ToString());
            }
        }

        /// <summary>
        /// Test DeleteUserGroup
        /// </summary>
        [Fact]
        public void Test_User_Group_Delete() {
            var entity = TestUserData.Users[0];
            var created = api.UpsertUserGroup(entity.Id.ToString(), TestUserData.CreateGroupData(TestUserData.Groups[0]));
            api.DeleteUserGroup(entity.Id.ToString(), created.Id.ToString());
            var existing = api.ListUserGroups(entity.Id.ToString()).Data;
            Assert.Empty(existing);
        }

        /// <summary>
        /// Test ListUserGroups
        /// </summary>
        [Fact]
        public void Test_User_Group_List() {
            var entity = TestUserData.Users[0];
            //var created = TestUserData.Groups.Select(i =>
            //    api.UpsertUserGroup(entity.Id.ToString(), TestUserData.CreateGroupData(i))).ToArray();
            try {
                var existing = api.ListUserGroups(entity.Id.ToString()).Data;
                //Assert.Equal(created.Length, existing.Count);
            }
            finally {
                //foreach(var i in created)
                //    api.DeleteUserGroup(entity.Id.ToString(), i.Id.ToString());
            }
        }

        /// <summary>
        /// Test UpsertUserGroup
        /// </summary>
        [Fact]
        public void Test_User_Group_Upsert() {
            var entity = TestUserData.Users[0];
            var data = TestUserData.CreateGroupData(TestUserData.Groups[0]);
            var created = api.UpsertUserGroup(entity.Id.ToString(), data);
            try {
                var existing = api.ListUserGroups(entity.Id.ToString()).Data;
                Assert.Contains(existing, i => i.Id == created.Id);
                data = TestUserData.CreateGroupData(TestUserData.Groups[1]);
                //data.Id = created.Id;
                var updated = api.UpsertUserGroup(entity.Id.ToString(), data);
                Assert.Equal(created.Id, updated.Id);
                Assert.Equal(data.GroupId.Value, updated.Id.ToString());
            }
            finally {
                api.DeleteUserGroup(entity.Id.ToString(), created.Id.ToString());
            }
        }

        /// <summary>
        /// Test DeleteUserDepartment
        /// </summary>
        [Fact]
        public void Test_User_Department_Delete() {
            var entity = TestUserData.Users[0];
            var created = api.UpsertUserDepartment(entity.Id.ToString(),
                TestUserData.CreateDepartmentData(TestUserData.Departments[0]));
            api.DeleteUserDepartment(entity.Id.ToString(), created.Id.ToString());
            var existing = api.ListUserDepartments(entity.Id.ToString()).Data;
            Assert.Empty(existing);
        }

        /// <summary>
        /// Test ListUserDepartments
        /// </summary>
        [Fact]
        public void Test_User_Department_List() {
            var entity = TestUserData.Users[0];
            var created = TestUserData.Departments.Select(i =>
                api.UpsertUserDepartment(entity.Id.ToString(), TestUserData.CreateDepartmentData(i))).ToArray();
            try {
                var existing = api.ListUserDepartments(entity.Id.ToString()).Data;
                Assert.Equal(created.Length, existing.Count);
            }
            finally {
                foreach(var i in created)
                    api.DeleteUserDepartment(entity.Id.ToString(), i.Id.ToString());
            }
        }

        /// <summary>
        /// Test UpsertUserDepartment
        /// </summary>
        [Fact]
        public void Test_User_Department_Upsert() {
            var entity = TestUserData.Users[0];
            var data = TestUserData.CreateDepartmentData(TestUserData.Departments[0]);
            var created = api.UpsertUserDepartment(entity.Id.ToString(), data);
            try {
                var existing = api.ListUserDepartments(entity.Id.ToString()).Data;
                Assert.Contains(existing, i => i.Id == created.Id);
                data = TestUserData.CreateDepartmentData(TestUserData.Departments[1]);
                //data.Id = created.Id;
                var updated = api.UpsertUserDepartment(entity.Id.ToString(), data);
                Assert.Equal(created.Id, updated.Id);
                //Assert.Equal(data.DepartmentId.Value, updated.DepartmentId.Id);
            }
            finally {
                api.DeleteUserDepartment(entity.Id.ToString(), created.Id.ToString());
            }
        }

        /// <summary>
        /// Test PatchUserDepartment
        /// </summary>
        [Fact]
        public void Test_User_Department_Patch() {
            var entity = TestUserData.Users[0];
            var created = api.UpsertUserDepartment(entity.Id.ToString(),
                    TestUserData.CreateDepartmentData(TestUserData.Departments[0]));
            try {
                var patched = api.PatchUserDepartments(entity.Id.ToString(),
                    new(departments: new List<DepartmentText> {
                            new(departmentId: TestUserData.Departments[1].ToString()),
                            new(departmentId: TestUserData.Departments[2].ToString()/*, id: created.Id*/)
                    })).Data;
                try {
                    var existing = api.ListUserDepartments(entity.Id.ToString()).Data;
                    //Assert.Contains(existing, i => i.DepartmentId.Id == TestUserData.Departments[1]);
                    //Assert.Contains(existing, i => i.DepartmentId.Id == TestUserData.Departments[2] && i.Id == created.Id);
                }
                finally {
                    api.DeleteUserDepartment(entity.Id.ToString(), patched.First(i => i.Id != created.Id).Id.ToString());
                }
            }
            finally {
                api.DeleteUserDepartment(entity.Id.ToString(), created.Id.ToString());
            }
        }

        /// <summary>
        /// Test PatchUserDepartments with deleteNotExists
        /// </summary>
        [Fact]
        public void Test_User_Department_Patch_DeleteNotExists() {
            var entity = TestUserData.Users[0];
            var toDelete = api.UpsertUserDepartment(entity.Id.ToString(),
                TestUserData.CreateDepartmentData(TestUserData.Departments[0]));
            var toPatch = api.UpsertUserDepartment(entity.Id.ToString(),
                TestUserData.CreateDepartmentData(TestUserData.Departments[1]));
            try {
                api.PatchUserDepartments(entity.Id.ToString(),
                    new(departments: new List<DepartmentText> {
                        new(departmentId: TestUserData.Departments[2].ToString()/*, id: toPatch.Id*/)
                    }),
                    deleteNotExists: true.ToString());
                toDelete = null;
                var existing = api.ListUserDepartments(entity.Id.ToString()).Data;
                Assert.Single(existing);
                //Assert.Contains(existing,
                //    i => i.DepartmentId.Id == TestUserData.Departments[2] && i.Id == toPatch.Id);
            }
            finally {
                if(toDelete != null)
                    api.DeleteUserDepartment(entity.Id.ToString(), toDelete.Id.ToString());
                api.DeleteUserDepartment(entity.Id.ToString(), toPatch.Id.ToString());
            }
        }

        /// <summary>
        /// Test DeleteUserLocation
        /// </summary>
        [Fact]
        public void Test_User_Location_Delete() {
            var entity = TestUserData.Users[0];
            var created = api.UpsertUserLocation(entity.Id.ToString(),
                TestUserData.CreateLocationData(TestUserData.Locations[0]));
            api.DeleteUserLocation(entity.Id.ToString(), created.Id.ToString());
            var existing = api.ListUserLocations(entity.Id.ToString()).Data;
            Assert.Empty(existing);
        }

        /// <summary>
        /// Test ListUserLocations
        /// </summary>
        [Fact]
        public void Test_User_Location_List() {
            var entity = TestUserData.Users[0];
            var created = TestUserData.Locations.Select(i =>
                api.UpsertUserLocation(entity.Id.ToString(), TestUserData.CreateLocationData(i))).ToArray();
            try {
                var existing = api.ListUserLocations(entity.Id.ToString()).Data;
                Assert.Equal(created.Length, existing.Count);
            }
            finally {
                foreach(var i in created)
                    api.DeleteUserLocation(entity.Id.ToString(), i.Id.ToString());
            }
        }

        /// <summary>
        /// Test UpsertUserLocation
        /// </summary>
        [Fact]
        public void Test_User_Location_Upsert() {
            var entity = TestUserData.Users[0];
            var data = TestUserData.CreateLocationData(TestUserData.Locations[0]);
            var created = api.UpsertUserLocation(entity.Id.ToString(), data);
            try {
                var existing = api.ListUserLocations(entity.Id.ToString()).Data;
                Assert.Contains(existing, i => i.Id == created.Id);
                data = TestUserData.CreateLocationData(TestUserData.Locations[1]);
                //data.Id = created.Id;
                var updated = api.UpsertUserLocation(entity.Id.ToString(), data);
                Assert.Equal(created.Id, updated.Id);
                //Assert.Equal(data.LocationId.Value, updated.LocationId.Id);
            }
            finally {
                api.DeleteUserLocation(entity.Id.ToString(), created.Id.ToString());
            }
        }

        /// <summary>
        /// Test PatchUserLocation
        /// </summary>
        [Fact]
        public void Test_User_Location_Patch() {
            var entity = TestUserData.Users[0];
            var created = api.UpsertUserLocation(entity.Id.ToString(),
                    TestUserData.CreateLocationData(TestUserData.Locations[0]));
            try {
                var patched = api.PatchUserLocations(entity.Id.ToString(),
                    new(locations: new List<LocationText> {
                            new (locationId: TestUserData.Locations[1].ToString()),
                            new (locationId: TestUserData.Locations[2].ToString()/*, id: created.Id*/)
                    })).Data;
                try {
                    var existing = api.ListUserLocations(entity.Id.ToString()).Data;
                    //Assert.Contains(existing, i => i.LocationId.Id == TestUserData.Locations[1]);
                    //Assert.Contains(existing, i => i.LocationId.Id == TestUserData.Locations[2] && i.Id == created.Id);
                }
                finally {
                    api.DeleteUserLocation(entity.Id.ToString(), patched.First(i => i.Id != created.Id).Id.ToString());
                }
            }
            finally {
                api.DeleteUserLocation(entity.Id.ToString(), created.Id.ToString());
            }
        }

        /// <summary>
        /// Test PatchUserLocations with deleteNotExists
        /// </summary>
        [Fact]
        public void Test_User_Location_Patch_DeleteNotExists() {
            var entity = TestUserData.Users[0];
            var toDelete = api.UpsertUserLocation(entity.Id.ToString(),
                TestUserData.CreateLocationData(TestUserData.Locations[0]));
            var toPatch = api.UpsertUserLocation(entity.Id.ToString(),
                TestUserData.CreateLocationData(TestUserData.Locations[1]));
            try {
                api.PatchUserLocations(entity.Id.ToString(),
                    new(locations: new List<LocationText> {
                        new(locationId: TestUserData.Locations[2].ToString()/*, id: toPatch.Id*/)
                    }),
                    deleteNotExists: true.ToString());
                toDelete = null;
                var existing = api.ListUserLocations(entity.Id.ToString()).Data;
                Assert.Single(existing);
                //Assert.Contains(existing,
                //    i => i.LocationId.Id == TestUserData.Locations[2] && i.Id == toPatch.Id);
            }
            finally {
                if(toDelete != null)
                    api.DeleteUserLocation(entity.Id.ToString(), toDelete.Id.ToString());
                api.DeleteUserLocation(entity.Id.ToString(), toPatch.Id.ToString());
            }
        }

        /// <summary>
        /// Test ListUserApplications
        /// </summary>
        [Fact]
        public void Test_User_Application_List() {
            var entity = TestUserData.UserWithApplications;
            var existing = api.ListUserApplications(entity.ToString()).Data;
            Assert.NotEmpty(existing);
        }

        /// <summary>
        /// Test ListUserEffectivePermissions
        /// </summary>
        [Fact]
        public void Test_User_EffectivePermissions_List() {
            var entity = TestUserData.UserWithEffectivePermissions;
            var existing = api.ListUserEffectivePermissions(entity.ToString()).Data;
            Assert.NotEmpty(existing);
        }

        /// <summary>
        /// Test ListUserAccessRoles
        /// </summary>
        [Fact]
        public void Test_User_AccessRoles_List() {
            var entity = TestUserData.UserWithAccessRoles;
            var existing = api.ListUserAccessRoles(entity.ToString(), "Id").Data;
            Assert.NotEmpty(existing);
        }
    }
}