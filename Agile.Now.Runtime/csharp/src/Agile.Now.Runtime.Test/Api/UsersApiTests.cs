/*
 * Agile.Now.Runtime API
 *
 * Agile.Now.Runtime is a dynamic and secure REST API designed to streamline the management of users, their access groups, user groups, organizations, locations, applications, and roles within a single-tenant environment. This API provides a robust, scalable, and secure platform for businesses to manage user access and organizational structures effectively. It supports both Role-Based Access Control (RBAC) and Attribute-Based Access Control (ABAC) to ensure fine-grained security and flexibility.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: dev@agilenow.io
 *
 * BSD 3-Clause License
 * 
 * Copyright (c) 2024, eSystems Nordic Ltd.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list
 *    of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this
 *    list of conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without specific
 *    prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Agile.Now.Runtime.Client;
using Agile.Now.Runtime.Api;
// uncomment below to import models
//using Agile.Now.Runtime.Model;

namespace Agile.Now.Runtime.Test.Api
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests : IDisposable
    {
        private UsersApi instance;

        public UsersApiTests()
        {
            instance = new UsersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UsersApi
            //Assert.IsType<UsersApi>(instance);
        }

        /// <summary>
        /// Test DeleteUserAccessGroup
        /// </summary>
        [Fact]
        public void DeleteUserAccessGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string subId = null;
            //string name = null;
            //string subName = null;
            //var response = instance.DeleteUserAccessGroup(id, subId, name, subName);
            //Assert.IsType<AccessGroup>(response);
        }

        /// <summary>
        /// Test DeleteUserDepartment
        /// </summary>
        [Fact]
        public void DeleteUserDepartmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string subId = null;
            //string name = null;
            //string subName = null;
            //var response = instance.DeleteUserDepartment(id, subId, name, subName);
            //Assert.IsType<Department>(response);
        }

        /// <summary>
        /// Test DeleteUserGroup
        /// </summary>
        [Fact]
        public void DeleteUserGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string subId = null;
            //string name = null;
            //string subName = null;
            //var response = instance.DeleteUserGroup(id, subId, name, subName);
            //Assert.IsType<Group>(response);
        }

        /// <summary>
        /// Test DeleteUserLocation
        /// </summary>
        [Fact]
        public void DeleteUserLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string subId = null;
            //string name = null;
            //string subName = null;
            //var response = instance.DeleteUserLocation(id, subId, name, subName);
            //Assert.IsType<Location>(response);
        }

        /// <summary>
        /// Test GetUser
        /// </summary>
        [Fact]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //var response = instance.GetUser(id, name);
            //Assert.IsType<User>(response);
        }

        /// <summary>
        /// Test ListUserAccessGroups
        /// </summary>
        [Fact]
        public void ListUserAccessGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListUserAccessGroups(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<AccessGroups>(response);
        }

        /// <summary>
        /// Test ListUserAccessRoles
        /// </summary>
        [Fact]
        public void ListUserAccessRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListUserAccessRoles(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<AccessRoles>(response);
        }

        /// <summary>
        /// Test ListUserApplications
        /// </summary>
        [Fact]
        public void ListUserApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListUserApplications(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Applications>(response);
        }

        /// <summary>
        /// Test ListUserDepartments
        /// </summary>
        [Fact]
        public void ListUserDepartmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListUserDepartments(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Departments>(response);
        }

        /// <summary>
        /// Test ListUserEffectivePermissions
        /// </summary>
        [Fact]
        public void ListUserEffectivePermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListUserEffectivePermissions(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<EffectivePermissions>(response);
        }

        /// <summary>
        /// Test ListUserGroups
        /// </summary>
        [Fact]
        public void ListUserGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListUserGroups(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Groups>(response);
        }

        /// <summary>
        /// Test ListUserLocations
        /// </summary>
        [Fact]
        public void ListUserLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListUserLocations(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Locations>(response);
        }

        /// <summary>
        /// Test ListUsers
        /// </summary>
        [Fact]
        public void ListUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListUsers(fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Users>(response);
        }

        /// <summary>
        /// Test PatchUserDepartments
        /// </summary>
        [Fact]
        public void PatchUserDepartmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DepartmentsData departmentsData = null;
            //string name = null;
            //string deleteNotExists = null;
            //var response = instance.PatchUserDepartments(id, departmentsData, name, deleteNotExists);
            //Assert.IsType<Departments>(response);
        }

        /// <summary>
        /// Test PatchUserLocations
        /// </summary>
        [Fact]
        public void PatchUserLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //LocationsData locationsData = null;
            //string name = null;
            //string deleteNotExists = null;
            //var response = instance.PatchUserLocations(id, locationsData, name, deleteNotExists);
            //Assert.IsType<Locations>(response);
        }

        /// <summary>
        /// Test UpsertUserAccessGroup
        /// </summary>
        [Fact]
        public void UpsertUserAccessGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AccessGroupData accessGroupData = null;
            //string name = null;
            //var response = instance.UpsertUserAccessGroup(id, accessGroupData, name);
            //Assert.IsType<AccessGroup>(response);
        }

        /// <summary>
        /// Test UpsertUserDepartment
        /// </summary>
        [Fact]
        public void UpsertUserDepartmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DepartmentData departmentData = null;
            //string name = null;
            //var response = instance.UpsertUserDepartment(id, departmentData, name);
            //Assert.IsType<Department>(response);
        }

        /// <summary>
        /// Test UpsertUserGroup
        /// </summary>
        [Fact]
        public void UpsertUserGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GroupData groupData = null;
            //string name = null;
            //var response = instance.UpsertUserGroup(id, groupData, name);
            //Assert.IsType<Group>(response);
        }

        /// <summary>
        /// Test UpsertUserLocation
        /// </summary>
        [Fact]
        public void UpsertUserLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //LocationData locationData = null;
            //string name = null;
            //var response = instance.UpsertUserLocation(id, locationData, name);
            //Assert.IsType<Location>(response);
        }
    }
}
