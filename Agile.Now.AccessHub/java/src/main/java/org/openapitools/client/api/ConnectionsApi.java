/*
 * Agile.Now.AccessHub API documentation
 * Agile.Now.AccessHub is a secure REST API designed to manage accounts, access groups, user groups, organizations, locations, applications, roles, and webhooks. This API provides a robust and scalable solution for managing user access and organizational structures in a multi-tenant environment.    **Key Features:**    1. **Accounts Management:**     - Manage user accounts with secure authentication and authorization.    2. **Access Groups:**     - Define and manage access groups for access control.     - Assign users to access groups based on roles and permissions.    3. **User Groups:**     - Create and manage user groups for better organization and collaboration.    4. **Organizations & Locations:**     - Manage multiple organizations and locations within a single platform.     - Attribute-based access control (ABAC) for settings.    5. **Applications:**     - Centralized management of applications within the platform.     - Assign and monitor application usage and access.    6. **Roles:**     - Define and manage roles for different access levels.     - Role-based access control to ensure appropriate permissions.    7. **Webhooks:**     - Integration with external services and applications.     - Configure and manage webhooks for real-time notifications and data syncing.    **Benefits:**    - **Enhanced Security:** Attribute-based and role-based access controls ensure data protection and authorized access.  - **Scalability:** Designed for growing organizations.  - **Efficiency:** Streamlined management of accounts, groups, and roles reduces overhead.  - **Flexibility:** Multi-tenant architecture allows easy customization.  - **Integration:** Webhook support facilitates seamless integration with external systems.    **Conclusion:**    Agile.Now.AccessHub is a powerful platform for managing your business data. It offers a centralized, secure, and scalable solution, enhancing operational efficiency, security, and flexibility in managing multi-tenant environments.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: dev@agilenow.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Config;
import org.openapitools.client.model.ConfigData;
import org.openapitools.client.model.Configs;
import org.openapitools.client.model.ConfigsData;
import org.openapitools.client.model.Connection;
import org.openapitools.client.model.ConnectionData;
import org.openapitools.client.model.Connections;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createConnection
     * @param connectionData &#x60;Connection&#x60; information to insert.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConnectionCall(ConnectionData connectionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionData;

        // create path and map variables
        String localVarPath = "/Endpoint/rest/api/v1/Connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConnectionValidateBeforeCall(ConnectionData connectionData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionData' is set
        if (connectionData == null) {
            throw new ApiException("Missing the required parameter 'connectionData' when calling createConnection(Async)");
        }

        return createConnectionCall(connectionData, _callback);

    }

    /**
     * 
     * Use the &#x60;ConnectionData&#x60; object resource to create new records.  You can supply the required field values in the request data, and then use the &#x60;POST&#x60; method of the resource.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Create a new record of Connection * If the value in the &#x60;Id,Name&#x60; fields are empty then action insert a new record according input parameter entity record structure (&#x60;ConnectionData&#x60;). * If the value in the &#x60;Name&#x60; and &#x60;Id&#x60; fields are empty then action insert a new record according input parameter entity record structure (&#x60;ConnectionData&#x60;). * If the &#x60;Id,Name&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.  The response body will contain the object of the created record if the call is successful. Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.  
     * @param connectionData &#x60;Connection&#x60; information to insert.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @return Connection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public Connection createConnection(ConnectionData connectionData) throws ApiException {
        ApiResponse<Connection> localVarResp = createConnectionWithHttpInfo(connectionData);
        return localVarResp.getData();
    }

    /**
     * 
     * Use the &#x60;ConnectionData&#x60; object resource to create new records.  You can supply the required field values in the request data, and then use the &#x60;POST&#x60; method of the resource.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Create a new record of Connection * If the value in the &#x60;Id,Name&#x60; fields are empty then action insert a new record according input parameter entity record structure (&#x60;ConnectionData&#x60;). * If the value in the &#x60;Name&#x60; and &#x60;Id&#x60; fields are empty then action insert a new record according input parameter entity record structure (&#x60;ConnectionData&#x60;). * If the &#x60;Id,Name&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.  The response body will contain the object of the created record if the call is successful. Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.  
     * @param connectionData &#x60;Connection&#x60; information to insert.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @return ApiResponse&lt;Connection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connection> createConnectionWithHttpInfo(ConnectionData connectionData) throws ApiException {
        okhttp3.Call localVarCall = createConnectionValidateBeforeCall(connectionData, null);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use the &#x60;ConnectionData&#x60; object resource to create new records.  You can supply the required field values in the request data, and then use the &#x60;POST&#x60; method of the resource.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Create a new record of Connection * If the value in the &#x60;Id,Name&#x60; fields are empty then action insert a new record according input parameter entity record structure (&#x60;ConnectionData&#x60;). * If the value in the &#x60;Name&#x60; and &#x60;Id&#x60; fields are empty then action insert a new record according input parameter entity record structure (&#x60;ConnectionData&#x60;). * If the &#x60;Id,Name&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.  The response body will contain the object of the created record if the call is successful. Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.  
     * @param connectionData &#x60;Connection&#x60; information to insert.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConnectionAsync(ConnectionData connectionData, final ApiCallback<Connection> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConnectionValidateBeforeCall(connectionData, _callback);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConnection
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Name &#x60;&#x60;&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionCall(String id, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Endpoint/rest/api/v1/Connection/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConnectionValidateBeforeCall(String id, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteConnection(Async)");
        }

        return deleteConnectionCall(id, name, _callback);

    }

    /**
     * 
     * Use the query string resource to delete &#x60;Connection&#x60; record. The method contains two parameters &#x60;Id&#x60; and &#x60;Name&#x60;. Specify the record &#x60;{Id}&#x60;, &#x60;Name&#x60; using &#x60;Id,Name&#x60; field(s) value and use the &#x60;DELETE&#x60; method of the resource to delete a record.  Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Delete a record of Connection * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned. * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned. * If the &#x60;Id,Name&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.  The response body will contain the object of the deleted record if the call is successful.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Name &#x60;&#x60;&#x60; (optional)
     * @return Connection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public Connection deleteConnection(String id, String name) throws ApiException {
        ApiResponse<Connection> localVarResp = deleteConnectionWithHttpInfo(id, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Use the query string resource to delete &#x60;Connection&#x60; record. The method contains two parameters &#x60;Id&#x60; and &#x60;Name&#x60;. Specify the record &#x60;{Id}&#x60;, &#x60;Name&#x60; using &#x60;Id,Name&#x60; field(s) value and use the &#x60;DELETE&#x60; method of the resource to delete a record.  Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Delete a record of Connection * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned. * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned. * If the &#x60;Id,Name&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.  The response body will contain the object of the deleted record if the call is successful.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Name &#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;Connection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connection> deleteConnectionWithHttpInfo(String id, String name) throws ApiException {
        okhttp3.Call localVarCall = deleteConnectionValidateBeforeCall(id, name, null);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use the query string resource to delete &#x60;Connection&#x60; record. The method contains two parameters &#x60;Id&#x60; and &#x60;Name&#x60;. Specify the record &#x60;{Id}&#x60;, &#x60;Name&#x60; using &#x60;Id,Name&#x60; field(s) value and use the &#x60;DELETE&#x60; method of the resource to delete a record.  Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Delete a record of Connection * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned. * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned. * If the &#x60;Id,Name&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.  The response body will contain the object of the deleted record if the call is successful.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Name &#x60;&#x60;&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionAsync(String id, String name, final ApiCallback<Connection> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConnectionValidateBeforeCall(id, name, _callback);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConnectionConfig
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param subId The identifier of the Config record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param subName The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted &#x60;Config&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionConfigCall(String id, String subId, String name, String subName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Endpoint/rest/api/v1/Connection/{Id}/Config/{SubId}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "SubId" + "}", localVarApiClient.escapeString(subId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (subName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubName", subName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConnectionConfigValidateBeforeCall(String id, String subId, String name, String subName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteConnectionConfig(Async)");
        }

        // verify the required parameter 'subId' is set
        if (subId == null) {
            throw new ApiException("Missing the required parameter 'subId' when calling deleteConnectionConfig(Async)");
        }

        return deleteConnectionConfigCall(id, subId, name, subName, _callback);

    }

    /**
     * 
     * Use the query string resource to delete &#x60;Config&#x60; record. The method contains two parameters &#x60;SubId&#x60; and &#x60;SubName&#x60;. Specify the record &#x60;SubId&#x60;, &#x60;SubName&#x60; using &#x60;Id&#x60; field(s) value and use the &#x60;DELETE&#x60; method of the resource to delete a record.  Method returns an extended &#x60;Config&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.  Foreign key fields are: &#x60;WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy&#x60;  ### Delete a record of Config * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned. * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned. * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.  The response body will contain the object of the deleted record if the call is successful.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param subId The identifier of the Config record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param subName The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60; (optional)
     * @return Config
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted &#x60;Config&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public Config deleteConnectionConfig(String id, String subId, String name, String subName) throws ApiException {
        ApiResponse<Config> localVarResp = deleteConnectionConfigWithHttpInfo(id, subId, name, subName);
        return localVarResp.getData();
    }

    /**
     * 
     * Use the query string resource to delete &#x60;Config&#x60; record. The method contains two parameters &#x60;SubId&#x60; and &#x60;SubName&#x60;. Specify the record &#x60;SubId&#x60;, &#x60;SubName&#x60; using &#x60;Id&#x60; field(s) value and use the &#x60;DELETE&#x60; method of the resource to delete a record.  Method returns an extended &#x60;Config&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.  Foreign key fields are: &#x60;WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy&#x60;  ### Delete a record of Config * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned. * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned. * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.  The response body will contain the object of the deleted record if the call is successful.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param subId The identifier of the Config record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param subName The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;Config&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted &#x60;Config&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Config> deleteConnectionConfigWithHttpInfo(String id, String subId, String name, String subName) throws ApiException {
        okhttp3.Call localVarCall = deleteConnectionConfigValidateBeforeCall(id, subId, name, subName, null);
        Type localVarReturnType = new TypeToken<Config>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use the query string resource to delete &#x60;Config&#x60; record. The method contains two parameters &#x60;SubId&#x60; and &#x60;SubName&#x60;. Specify the record &#x60;SubId&#x60;, &#x60;SubName&#x60; using &#x60;Id&#x60; field(s) value and use the &#x60;DELETE&#x60; method of the resource to delete a record.  Method returns an extended &#x60;Config&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.  Foreign key fields are: &#x60;WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy&#x60;  ### Delete a record of Config * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned. * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned. * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.  The response body will contain the object of the deleted record if the call is successful.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param subId The identifier of the Config record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param subName The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted &#x60;Config&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionConfigAsync(String id, String subId, String name, String subName, final ApiCallback<Config> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConnectionConfigValidateBeforeCall(id, subId, name, subName, _callback);
        Type localVarReturnType = new TypeToken<Config>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConnection
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Name &#x60;&#x60;&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The record of &#x60;Connection&#x60; information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionCall(String id, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Endpoint/rest/api/v1/Connection/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectionValidateBeforeCall(String id, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnection(Async)");
        }

        return getConnectionCall(id, name, _callback);

    }

    /**
     * 
     * The method returns one record of the &#x60;Connection&#x60;.  Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Get a record of Connection * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned. * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned. * If the &#x60;Id,Name&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Name &#x60;&#x60;&#x60; (optional)
     * @return Connection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The record of &#x60;Connection&#x60; information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public Connection getConnection(String id, String name) throws ApiException {
        ApiResponse<Connection> localVarResp = getConnectionWithHttpInfo(id, name);
        return localVarResp.getData();
    }

    /**
     * 
     * The method returns one record of the &#x60;Connection&#x60;.  Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Get a record of Connection * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned. * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned. * If the &#x60;Id,Name&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Name &#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;Connection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The record of &#x60;Connection&#x60; information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connection> getConnectionWithHttpInfo(String id, String name) throws ApiException {
        okhttp3.Call localVarCall = getConnectionValidateBeforeCall(id, name, null);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The method returns one record of the &#x60;Connection&#x60;.  Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Get a record of Connection * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned. * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned. * If the &#x60;Id,Name&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Name &#x60;&#x60;&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The record of &#x60;Connection&#x60; information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionAsync(String id, String name, final ApiCallback<Connection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectionValidateBeforeCall(id, name, _callback);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConnectionConfigs
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param fields Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.  The list of database column attributes. If list is empty or &amp;quot;*&amp;quot; then all of fields will be returned.  This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Id, WebhookConnectionId, WebhookEntityId, HasCreateAccess, HasUpdateAccess, HasDeleteAccess, Is_Active, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn &#x60;&#x60;&#x60; (optional)
     * @param filters In the List methods, filtering of resources can be performed using filter parameters.  You can also use parent tables as a search filter. For example, the &#x60;Employee&#x60; table has a &#x60;DepartmentId&#x60; field, so you can search for a department name using the &#x60;DepartmentId.Name&#x60; field name. All fields in the parent table are available.  The name of the entity field. Example: &#x60;Name&#x60; or relation field &#x60;OwnerId.Name&#x60;  Please refer to the corresponding method&amp;#39;s documentation for the complete list of supported filter parameters by record.  The operator must be a standard comparison operator &#x3D;, &amp;lt;&amp;gt;, &amp;gt;, &amp;gt;&#x3D;, &amp;lt;, &amp;lt;&#x3D;, In, Like, NotIn  You can add multiple values separated by comma when using the &#x60;In&#x60;, &#x60;NotIn&#x60; operators. Example of text field; &#x60;USA; FIN; ARE&#x60; Example of numeric field; &#x60;1, 2, 3&#x60;  Example of filters: &#x60;&#x60;&#x60;sql Filters&#x3D;(DepartmentId.Name &#x3D; My Department) AND (DepartmentId.CreatedOn &#x3D; 2021-01-01)  Filters&#x3D;(DepartmentId.Name &#x3D; My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)  Filters&#x3D;ExternalId In S100;S101;S120;100  Filters&#x3D;Id &#x3D; 100  &#x60;&#x60;&#x60;  (optional)
     * @param orders The &#x60;Orders&#x60; parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Name DESC, CreatedOn ASC &#x60;&#x60;&#x60; (optional)
     * @param currentPage This field specifies the current page of results being returned. It&amp;#39;s often used in conjunction with &#x60;PageSize&#x60; to manage pagination by indicating which subset of the total data is currently being retrieved. (optional, default to 0)
     * @param pageSize The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.  The value ranges from &#x60;1&#x60; to &#x60;1000&#x60; and defaults to &#x60;50&#x60;. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Configs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConnectionConfigsCall(String id, String name, String fields, String filters, String orders, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Endpoint/rest/api/v1/Connection/{Id}/Configs"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Fields", fields));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Filters", filters));
        }

        if (orders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Orders", orders));
        }

        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CurrentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConnectionConfigsValidateBeforeCall(String id, String name, String fields, String filters, String orders, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listConnectionConfigs(Async)");
        }

        return listConnectionConfigsCall(id, name, fields, filters, orders, currentPage, pageSize, _callback);

    }

    /**
     * 
     * Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.  Leverage the search service to extract the requisite information from the system effectively.  The method returns a list structured with an extended &#x60;Config&#x60; representation. In this format, all foreign key fields are depicted as abstract object structures, employing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types. This offers an enriched and detailed perspective of the data and its associated entities.  The foreign key fields involved are: &#x60;WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy&#x60;  ### Example It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&amp;#39;s name, and a limit is set to return a maximum of 1000 rows.  &#x60;&#x60;&#x60;http fields&#x3D;Name,ExternalId,Email&amp;amp;Filters&#x3D;(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &amp;gt; 2022-01-01)&amp;amp;Orders&#x3D;Name ASC&amp;amp;PageSize&#x3D;1000 &#x60;&#x60;&#x60;
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param fields Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.  The list of database column attributes. If list is empty or &amp;quot;*&amp;quot; then all of fields will be returned.  This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Id, WebhookConnectionId, WebhookEntityId, HasCreateAccess, HasUpdateAccess, HasDeleteAccess, Is_Active, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn &#x60;&#x60;&#x60; (optional)
     * @param filters In the List methods, filtering of resources can be performed using filter parameters.  You can also use parent tables as a search filter. For example, the &#x60;Employee&#x60; table has a &#x60;DepartmentId&#x60; field, so you can search for a department name using the &#x60;DepartmentId.Name&#x60; field name. All fields in the parent table are available.  The name of the entity field. Example: &#x60;Name&#x60; or relation field &#x60;OwnerId.Name&#x60;  Please refer to the corresponding method&amp;#39;s documentation for the complete list of supported filter parameters by record.  The operator must be a standard comparison operator &#x3D;, &amp;lt;&amp;gt;, &amp;gt;, &amp;gt;&#x3D;, &amp;lt;, &amp;lt;&#x3D;, In, Like, NotIn  You can add multiple values separated by comma when using the &#x60;In&#x60;, &#x60;NotIn&#x60; operators. Example of text field; &#x60;USA; FIN; ARE&#x60; Example of numeric field; &#x60;1, 2, 3&#x60;  Example of filters: &#x60;&#x60;&#x60;sql Filters&#x3D;(DepartmentId.Name &#x3D; My Department) AND (DepartmentId.CreatedOn &#x3D; 2021-01-01)  Filters&#x3D;(DepartmentId.Name &#x3D; My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)  Filters&#x3D;ExternalId In S100;S101;S120;100  Filters&#x3D;Id &#x3D; 100  &#x60;&#x60;&#x60;  (optional)
     * @param orders The &#x60;Orders&#x60; parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Name DESC, CreatedOn ASC &#x60;&#x60;&#x60; (optional)
     * @param currentPage This field specifies the current page of results being returned. It&amp;#39;s often used in conjunction with &#x60;PageSize&#x60; to manage pagination by indicating which subset of the total data is currently being retrieved. (optional, default to 0)
     * @param pageSize The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.  The value ranges from &#x60;1&#x60; to &#x60;1000&#x60; and defaults to &#x60;50&#x60;. (optional, default to 0)
     * @return Configs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Configs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public Configs listConnectionConfigs(String id, String name, String fields, String filters, String orders, Integer currentPage, Integer pageSize) throws ApiException {
        ApiResponse<Configs> localVarResp = listConnectionConfigsWithHttpInfo(id, name, fields, filters, orders, currentPage, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.  Leverage the search service to extract the requisite information from the system effectively.  The method returns a list structured with an extended &#x60;Config&#x60; representation. In this format, all foreign key fields are depicted as abstract object structures, employing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types. This offers an enriched and detailed perspective of the data and its associated entities.  The foreign key fields involved are: &#x60;WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy&#x60;  ### Example It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&amp;#39;s name, and a limit is set to return a maximum of 1000 rows.  &#x60;&#x60;&#x60;http fields&#x3D;Name,ExternalId,Email&amp;amp;Filters&#x3D;(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &amp;gt; 2022-01-01)&amp;amp;Orders&#x3D;Name ASC&amp;amp;PageSize&#x3D;1000 &#x60;&#x60;&#x60;
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param fields Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.  The list of database column attributes. If list is empty or &amp;quot;*&amp;quot; then all of fields will be returned.  This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Id, WebhookConnectionId, WebhookEntityId, HasCreateAccess, HasUpdateAccess, HasDeleteAccess, Is_Active, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn &#x60;&#x60;&#x60; (optional)
     * @param filters In the List methods, filtering of resources can be performed using filter parameters.  You can also use parent tables as a search filter. For example, the &#x60;Employee&#x60; table has a &#x60;DepartmentId&#x60; field, so you can search for a department name using the &#x60;DepartmentId.Name&#x60; field name. All fields in the parent table are available.  The name of the entity field. Example: &#x60;Name&#x60; or relation field &#x60;OwnerId.Name&#x60;  Please refer to the corresponding method&amp;#39;s documentation for the complete list of supported filter parameters by record.  The operator must be a standard comparison operator &#x3D;, &amp;lt;&amp;gt;, &amp;gt;, &amp;gt;&#x3D;, &amp;lt;, &amp;lt;&#x3D;, In, Like, NotIn  You can add multiple values separated by comma when using the &#x60;In&#x60;, &#x60;NotIn&#x60; operators. Example of text field; &#x60;USA; FIN; ARE&#x60; Example of numeric field; &#x60;1, 2, 3&#x60;  Example of filters: &#x60;&#x60;&#x60;sql Filters&#x3D;(DepartmentId.Name &#x3D; My Department) AND (DepartmentId.CreatedOn &#x3D; 2021-01-01)  Filters&#x3D;(DepartmentId.Name &#x3D; My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)  Filters&#x3D;ExternalId In S100;S101;S120;100  Filters&#x3D;Id &#x3D; 100  &#x60;&#x60;&#x60;  (optional)
     * @param orders The &#x60;Orders&#x60; parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Name DESC, CreatedOn ASC &#x60;&#x60;&#x60; (optional)
     * @param currentPage This field specifies the current page of results being returned. It&amp;#39;s often used in conjunction with &#x60;PageSize&#x60; to manage pagination by indicating which subset of the total data is currently being retrieved. (optional, default to 0)
     * @param pageSize The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.  The value ranges from &#x60;1&#x60; to &#x60;1000&#x60; and defaults to &#x60;50&#x60;. (optional, default to 0)
     * @return ApiResponse&lt;Configs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Configs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Configs> listConnectionConfigsWithHttpInfo(String id, String name, String fields, String filters, String orders, Integer currentPage, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listConnectionConfigsValidateBeforeCall(id, name, fields, filters, orders, currentPage, pageSize, null);
        Type localVarReturnType = new TypeToken<Configs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.  Leverage the search service to extract the requisite information from the system effectively.  The method returns a list structured with an extended &#x60;Config&#x60; representation. In this format, all foreign key fields are depicted as abstract object structures, employing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types. This offers an enriched and detailed perspective of the data and its associated entities.  The foreign key fields involved are: &#x60;WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy&#x60;  ### Example It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&amp;#39;s name, and a limit is set to return a maximum of 1000 rows.  &#x60;&#x60;&#x60;http fields&#x3D;Name,ExternalId,Email&amp;amp;Filters&#x3D;(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &amp;gt; 2022-01-01)&amp;amp;Orders&#x3D;Name ASC&amp;amp;PageSize&#x3D;1000 &#x60;&#x60;&#x60;
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param fields Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.  The list of database column attributes. If list is empty or &amp;quot;*&amp;quot; then all of fields will be returned.  This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Id, WebhookConnectionId, WebhookEntityId, HasCreateAccess, HasUpdateAccess, HasDeleteAccess, Is_Active, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn &#x60;&#x60;&#x60; (optional)
     * @param filters In the List methods, filtering of resources can be performed using filter parameters.  You can also use parent tables as a search filter. For example, the &#x60;Employee&#x60; table has a &#x60;DepartmentId&#x60; field, so you can search for a department name using the &#x60;DepartmentId.Name&#x60; field name. All fields in the parent table are available.  The name of the entity field. Example: &#x60;Name&#x60; or relation field &#x60;OwnerId.Name&#x60;  Please refer to the corresponding method&amp;#39;s documentation for the complete list of supported filter parameters by record.  The operator must be a standard comparison operator &#x3D;, &amp;lt;&amp;gt;, &amp;gt;, &amp;gt;&#x3D;, &amp;lt;, &amp;lt;&#x3D;, In, Like, NotIn  You can add multiple values separated by comma when using the &#x60;In&#x60;, &#x60;NotIn&#x60; operators. Example of text field; &#x60;USA; FIN; ARE&#x60; Example of numeric field; &#x60;1, 2, 3&#x60;  Example of filters: &#x60;&#x60;&#x60;sql Filters&#x3D;(DepartmentId.Name &#x3D; My Department) AND (DepartmentId.CreatedOn &#x3D; 2021-01-01)  Filters&#x3D;(DepartmentId.Name &#x3D; My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)  Filters&#x3D;ExternalId In S100;S101;S120;100  Filters&#x3D;Id &#x3D; 100  &#x60;&#x60;&#x60;  (optional)
     * @param orders The &#x60;Orders&#x60; parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Name DESC, CreatedOn ASC &#x60;&#x60;&#x60; (optional)
     * @param currentPage This field specifies the current page of results being returned. It&amp;#39;s often used in conjunction with &#x60;PageSize&#x60; to manage pagination by indicating which subset of the total data is currently being retrieved. (optional, default to 0)
     * @param pageSize The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.  The value ranges from &#x60;1&#x60; to &#x60;1000&#x60; and defaults to &#x60;50&#x60;. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Configs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConnectionConfigsAsync(String id, String name, String fields, String filters, String orders, Integer currentPage, Integer pageSize, final ApiCallback<Configs> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConnectionConfigsValidateBeforeCall(id, name, fields, filters, orders, currentPage, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Configs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConnections
     * @param fields Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.  The list of database column attributes. If list is empty or &amp;quot;*&amp;quot; then all of fields will be returned.  This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Id, Name, Description, ApiKey, SecretKey, URL, Is_Active, Is_System, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn &#x60;&#x60;&#x60; (optional)
     * @param filters In the List methods, filtering of resources can be performed using filter parameters.  You can also use parent tables as a search filter. For example, the &#x60;Employee&#x60; table has a &#x60;DepartmentId&#x60; field, so you can search for a department name using the &#x60;DepartmentId.Name&#x60; field name. All fields in the parent table are available.  The name of the entity field. Example: &#x60;Name&#x60; or relation field &#x60;OwnerId.Name&#x60;  Please refer to the corresponding method&amp;#39;s documentation for the complete list of supported filter parameters by record.  The operator must be a standard comparison operator &#x3D;, &amp;lt;&amp;gt;, &amp;gt;, &amp;gt;&#x3D;, &amp;lt;, &amp;lt;&#x3D;, In, Like, NotIn  You can add multiple values separated by comma when using the &#x60;In&#x60;, &#x60;NotIn&#x60; operators. Example of text field; &#x60;USA; FIN; ARE&#x60; Example of numeric field; &#x60;1, 2, 3&#x60;  Example of filters: &#x60;&#x60;&#x60;sql Filters&#x3D;(DepartmentId.Name &#x3D; My Department) AND (DepartmentId.CreatedOn &#x3D; 2021-01-01)  Filters&#x3D;(DepartmentId.Name &#x3D; My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)  Filters&#x3D;ExternalId In S100;S101;S120;100  Filters&#x3D;Id &#x3D; 100  &#x60;&#x60;&#x60;  (optional)
     * @param orders The &#x60;Orders&#x60; parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Name DESC, CreatedOn ASC &#x60;&#x60;&#x60; (optional)
     * @param currentPage This field specifies the current page of results being returned. It&amp;#39;s often used in conjunction with &#x60;PageSize&#x60; to manage pagination by indicating which subset of the total data is currently being retrieved. (optional, default to 0)
     * @param pageSize The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.  The value ranges from &#x60;1&#x60; to &#x60;1000&#x60; and defaults to &#x60;50&#x60;. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Connections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConnectionsCall(String fields, String filters, String orders, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Endpoint/rest/api/v1/Connections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Fields", fields));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Filters", filters));
        }

        if (orders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Orders", orders));
        }

        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CurrentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConnectionsValidateBeforeCall(String fields, String filters, String orders, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listConnectionsCall(fields, filters, orders, currentPage, pageSize, _callback);

    }

    /**
     * 
     * Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.  Leverage the search service to extract the requisite information from the system effectively.  The method returns a list structured with an extended &#x60;Connection&#x60; representation. In this format, all foreign key fields are depicted as abstract object structures, employing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types. This offers an enriched and detailed perspective of the data and its associated entities.  The foreign key fields involved are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Example It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&amp;#39;s name, and a limit is set to return a maximum of 1000 rows.  &#x60;&#x60;&#x60;http fields&#x3D;Name,ExternalId,Email&amp;amp;Filters&#x3D;(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &amp;gt; 2022-01-01)&amp;amp;Orders&#x3D;Name ASC&amp;amp;PageSize&#x3D;1000 &#x60;&#x60;&#x60;
     * @param fields Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.  The list of database column attributes. If list is empty or &amp;quot;*&amp;quot; then all of fields will be returned.  This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Id, Name, Description, ApiKey, SecretKey, URL, Is_Active, Is_System, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn &#x60;&#x60;&#x60; (optional)
     * @param filters In the List methods, filtering of resources can be performed using filter parameters.  You can also use parent tables as a search filter. For example, the &#x60;Employee&#x60; table has a &#x60;DepartmentId&#x60; field, so you can search for a department name using the &#x60;DepartmentId.Name&#x60; field name. All fields in the parent table are available.  The name of the entity field. Example: &#x60;Name&#x60; or relation field &#x60;OwnerId.Name&#x60;  Please refer to the corresponding method&amp;#39;s documentation for the complete list of supported filter parameters by record.  The operator must be a standard comparison operator &#x3D;, &amp;lt;&amp;gt;, &amp;gt;, &amp;gt;&#x3D;, &amp;lt;, &amp;lt;&#x3D;, In, Like, NotIn  You can add multiple values separated by comma when using the &#x60;In&#x60;, &#x60;NotIn&#x60; operators. Example of text field; &#x60;USA; FIN; ARE&#x60; Example of numeric field; &#x60;1, 2, 3&#x60;  Example of filters: &#x60;&#x60;&#x60;sql Filters&#x3D;(DepartmentId.Name &#x3D; My Department) AND (DepartmentId.CreatedOn &#x3D; 2021-01-01)  Filters&#x3D;(DepartmentId.Name &#x3D; My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)  Filters&#x3D;ExternalId In S100;S101;S120;100  Filters&#x3D;Id &#x3D; 100  &#x60;&#x60;&#x60;  (optional)
     * @param orders The &#x60;Orders&#x60; parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Name DESC, CreatedOn ASC &#x60;&#x60;&#x60; (optional)
     * @param currentPage This field specifies the current page of results being returned. It&amp;#39;s often used in conjunction with &#x60;PageSize&#x60; to manage pagination by indicating which subset of the total data is currently being retrieved. (optional, default to 0)
     * @param pageSize The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.  The value ranges from &#x60;1&#x60; to &#x60;1000&#x60; and defaults to &#x60;50&#x60;. (optional, default to 0)
     * @return Connections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Connections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public Connections listConnections(String fields, String filters, String orders, Integer currentPage, Integer pageSize) throws ApiException {
        ApiResponse<Connections> localVarResp = listConnectionsWithHttpInfo(fields, filters, orders, currentPage, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.  Leverage the search service to extract the requisite information from the system effectively.  The method returns a list structured with an extended &#x60;Connection&#x60; representation. In this format, all foreign key fields are depicted as abstract object structures, employing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types. This offers an enriched and detailed perspective of the data and its associated entities.  The foreign key fields involved are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Example It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&amp;#39;s name, and a limit is set to return a maximum of 1000 rows.  &#x60;&#x60;&#x60;http fields&#x3D;Name,ExternalId,Email&amp;amp;Filters&#x3D;(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &amp;gt; 2022-01-01)&amp;amp;Orders&#x3D;Name ASC&amp;amp;PageSize&#x3D;1000 &#x60;&#x60;&#x60;
     * @param fields Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.  The list of database column attributes. If list is empty or &amp;quot;*&amp;quot; then all of fields will be returned.  This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Id, Name, Description, ApiKey, SecretKey, URL, Is_Active, Is_System, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn &#x60;&#x60;&#x60; (optional)
     * @param filters In the List methods, filtering of resources can be performed using filter parameters.  You can also use parent tables as a search filter. For example, the &#x60;Employee&#x60; table has a &#x60;DepartmentId&#x60; field, so you can search for a department name using the &#x60;DepartmentId.Name&#x60; field name. All fields in the parent table are available.  The name of the entity field. Example: &#x60;Name&#x60; or relation field &#x60;OwnerId.Name&#x60;  Please refer to the corresponding method&amp;#39;s documentation for the complete list of supported filter parameters by record.  The operator must be a standard comparison operator &#x3D;, &amp;lt;&amp;gt;, &amp;gt;, &amp;gt;&#x3D;, &amp;lt;, &amp;lt;&#x3D;, In, Like, NotIn  You can add multiple values separated by comma when using the &#x60;In&#x60;, &#x60;NotIn&#x60; operators. Example of text field; &#x60;USA; FIN; ARE&#x60; Example of numeric field; &#x60;1, 2, 3&#x60;  Example of filters: &#x60;&#x60;&#x60;sql Filters&#x3D;(DepartmentId.Name &#x3D; My Department) AND (DepartmentId.CreatedOn &#x3D; 2021-01-01)  Filters&#x3D;(DepartmentId.Name &#x3D; My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)  Filters&#x3D;ExternalId In S100;S101;S120;100  Filters&#x3D;Id &#x3D; 100  &#x60;&#x60;&#x60;  (optional)
     * @param orders The &#x60;Orders&#x60; parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Name DESC, CreatedOn ASC &#x60;&#x60;&#x60; (optional)
     * @param currentPage This field specifies the current page of results being returned. It&amp;#39;s often used in conjunction with &#x60;PageSize&#x60; to manage pagination by indicating which subset of the total data is currently being retrieved. (optional, default to 0)
     * @param pageSize The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.  The value ranges from &#x60;1&#x60; to &#x60;1000&#x60; and defaults to &#x60;50&#x60;. (optional, default to 0)
     * @return ApiResponse&lt;Connections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Connections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connections> listConnectionsWithHttpInfo(String fields, String filters, String orders, Integer currentPage, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listConnectionsValidateBeforeCall(fields, filters, orders, currentPage, pageSize, null);
        Type localVarReturnType = new TypeToken<Connections>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.  Leverage the search service to extract the requisite information from the system effectively.  The method returns a list structured with an extended &#x60;Connection&#x60; representation. In this format, all foreign key fields are depicted as abstract object structures, employing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types. This offers an enriched and detailed perspective of the data and its associated entities.  The foreign key fields involved are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Example It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&amp;#39;s name, and a limit is set to return a maximum of 1000 rows.  &#x60;&#x60;&#x60;http fields&#x3D;Name,ExternalId,Email&amp;amp;Filters&#x3D;(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &amp;gt; 2022-01-01)&amp;amp;Orders&#x3D;Name ASC&amp;amp;PageSize&#x3D;1000 &#x60;&#x60;&#x60;
     * @param fields Specify the fields you want to retrieve in the fields parameter and use the GET method of the resource.  The list of database column attributes. If list is empty or &amp;quot;*&amp;quot; then all of fields will be returned.  This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Id, Name, Description, ApiKey, SecretKey, URL, Is_Active, Is_System, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn &#x60;&#x60;&#x60; (optional)
     * @param filters In the List methods, filtering of resources can be performed using filter parameters.  You can also use parent tables as a search filter. For example, the &#x60;Employee&#x60; table has a &#x60;DepartmentId&#x60; field, so you can search for a department name using the &#x60;DepartmentId.Name&#x60; field name. All fields in the parent table are available.  The name of the entity field. Example: &#x60;Name&#x60; or relation field &#x60;OwnerId.Name&#x60;  Please refer to the corresponding method&amp;#39;s documentation for the complete list of supported filter parameters by record.  The operator must be a standard comparison operator &#x3D;, &amp;lt;&amp;gt;, &amp;gt;, &amp;gt;&#x3D;, &amp;lt;, &amp;lt;&#x3D;, In, Like, NotIn  You can add multiple values separated by comma when using the &#x60;In&#x60;, &#x60;NotIn&#x60; operators. Example of text field; &#x60;USA; FIN; ARE&#x60; Example of numeric field; &#x60;1, 2, 3&#x60;  Example of filters: &#x60;&#x60;&#x60;sql Filters&#x3D;(DepartmentId.Name &#x3D; My Department) AND (DepartmentId.CreatedOn &#x3D; 2021-01-01)  Filters&#x3D;(DepartmentId.Name &#x3D; My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)  Filters&#x3D;ExternalId In S100;S101;S120;100  Filters&#x3D;Id &#x3D; 100  &#x60;&#x60;&#x60;  (optional)
     * @param orders The &#x60;Orders&#x60; parameter is provided for sorting the result in the desired order. Both the attribute based on which sorting needs to be done, and the order of sorting (ascending or descending) can be specified. This method converts a string list to a string with a comma separator.  Example:  &#x60;&#x60;&#x60; Name DESC, CreatedOn ASC &#x60;&#x60;&#x60; (optional)
     * @param currentPage This field specifies the current page of results being returned. It&amp;#39;s often used in conjunction with &#x60;PageSize&#x60; to manage pagination by indicating which subset of the total data is currently being retrieved. (optional, default to 0)
     * @param pageSize The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.  The value ranges from &#x60;1&#x60; to &#x60;1000&#x60; and defaults to &#x60;50&#x60;. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Connections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConnectionsAsync(String fields, String filters, String orders, Integer currentPage, Integer pageSize, final ApiCallback<Connections> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConnectionsValidateBeforeCall(fields, filters, orders, currentPage, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Connections>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchConnectionConfigs
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param configsData The list of Config information to insert or update.  The input parameter must be used in the &#x60;Extra&#x60; record array structure inside the &#x60;Name&#x60; and &#x60;FieldName&#x60; parameters in the foreign key fields. (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param deleteNotExists The Delete not exists function delete orphan values from a table.  If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted or updated list of Config information.   </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchConnectionConfigsCall(String id, ConfigsData configsData, String name, String deleteNotExists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = configsData;

        // create path and map variables
        String localVarPath = "/Endpoint/rest/api/v1/Connection/{Id}/Configs"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (deleteNotExists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeleteNotExists", deleteNotExists));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchConnectionConfigsValidateBeforeCall(String id, ConfigsData configsData, String name, String deleteNotExists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchConnectionConfigs(Async)");
        }

        // verify the required parameter 'configsData' is set
        if (configsData == null) {
            throw new ApiException("Missing the required parameter 'configsData' when calling patchConnectionConfigs(Async)");
        }

        return patchConnectionConfigsCall(id, configsData, name, deleteNotExists, _callback);

    }

    /**
     * 
     * Use the &#x60;ConfigsData&#x60; object resource to insert or update (Upsert) a list of &#x60;ConfigData&#x60; using &#x60;Id&#x60; field(s) value.  You can supply the required field values in the request data, and then use the &#x60;POST&#x60; method of the resource.  The input parameter must be used in the &#x60;ConfigList&#x60; record structure as text fields in the foreign key fields.  Foreign key fields are: &#x60;WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy&#x60;  ### Update a record of Config * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.  **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.  ### Create a new record of Config * If the value in the &#x60;Id&#x60; field is empty then action insert a new record according input parameter entity record structure (&#x60;ConfigData&#x60;).  The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended &#x60;Config&#x60; representation. In this format, all foreign key fields are depicted as abstract object structures, employing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types. This offers an enriched and detailed perspective of the data and its associated entities.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param configsData The list of Config information to insert or update.  The input parameter must be used in the &#x60;Extra&#x60; record array structure inside the &#x60;Name&#x60; and &#x60;FieldName&#x60; parameters in the foreign key fields. (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param deleteNotExists The Delete not exists function delete orphan values from a table.  If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table. (optional, default to false)
     * @return Config
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted or updated list of Config information.   </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public Config patchConnectionConfigs(String id, ConfigsData configsData, String name, String deleteNotExists) throws ApiException {
        ApiResponse<Config> localVarResp = patchConnectionConfigsWithHttpInfo(id, configsData, name, deleteNotExists);
        return localVarResp.getData();
    }

    /**
     * 
     * Use the &#x60;ConfigsData&#x60; object resource to insert or update (Upsert) a list of &#x60;ConfigData&#x60; using &#x60;Id&#x60; field(s) value.  You can supply the required field values in the request data, and then use the &#x60;POST&#x60; method of the resource.  The input parameter must be used in the &#x60;ConfigList&#x60; record structure as text fields in the foreign key fields.  Foreign key fields are: &#x60;WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy&#x60;  ### Update a record of Config * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.  **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.  ### Create a new record of Config * If the value in the &#x60;Id&#x60; field is empty then action insert a new record according input parameter entity record structure (&#x60;ConfigData&#x60;).  The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended &#x60;Config&#x60; representation. In this format, all foreign key fields are depicted as abstract object structures, employing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types. This offers an enriched and detailed perspective of the data and its associated entities.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param configsData The list of Config information to insert or update.  The input parameter must be used in the &#x60;Extra&#x60; record array structure inside the &#x60;Name&#x60; and &#x60;FieldName&#x60; parameters in the foreign key fields. (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param deleteNotExists The Delete not exists function delete orphan values from a table.  If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table. (optional, default to false)
     * @return ApiResponse&lt;Config&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted or updated list of Config information.   </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Config> patchConnectionConfigsWithHttpInfo(String id, ConfigsData configsData, String name, String deleteNotExists) throws ApiException {
        okhttp3.Call localVarCall = patchConnectionConfigsValidateBeforeCall(id, configsData, name, deleteNotExists, null);
        Type localVarReturnType = new TypeToken<Config>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use the &#x60;ConfigsData&#x60; object resource to insert or update (Upsert) a list of &#x60;ConfigData&#x60; using &#x60;Id&#x60; field(s) value.  You can supply the required field values in the request data, and then use the &#x60;POST&#x60; method of the resource.  The input parameter must be used in the &#x60;ConfigList&#x60; record structure as text fields in the foreign key fields.  Foreign key fields are: &#x60;WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy&#x60;  ### Update a record of Config * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.  **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.  ### Create a new record of Config * If the value in the &#x60;Id&#x60; field is empty then action insert a new record according input parameter entity record structure (&#x60;ConfigData&#x60;).  The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended &#x60;Config&#x60; representation. In this format, all foreign key fields are depicted as abstract object structures, employing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types. This offers an enriched and detailed perspective of the data and its associated entities.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param configsData The list of Config information to insert or update.  The input parameter must be used in the &#x60;Extra&#x60; record array structure inside the &#x60;Name&#x60; and &#x60;FieldName&#x60; parameters in the foreign key fields. (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param deleteNotExists The Delete not exists function delete orphan values from a table.  If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted or updated list of Config information.   </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchConnectionConfigsAsync(String id, ConfigsData configsData, String name, String deleteNotExists, final ApiCallback<Config> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchConnectionConfigsValidateBeforeCall(id, configsData, name, deleteNotExists, _callback);
        Type localVarReturnType = new TypeToken<Config>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConnection
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param connectionData Connection information to update.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Name &#x60;&#x60;&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConnectionCall(String id, ConnectionData connectionData, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionData;

        // create path and map variables
        String localVarPath = "/Endpoint/rest/api/v1/Connection/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConnectionValidateBeforeCall(String id, ConnectionData connectionData, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateConnection(Async)");
        }

        // verify the required parameter 'connectionData' is set
        if (connectionData == null) {
            throw new ApiException("Missing the required parameter 'connectionData' when calling updateConnection(Async)");
        }

        return updateConnectionCall(id, connectionData, name, _callback);

    }

    /**
     * 
     * Use the &#x60;ConnectionData&#x60; object resource to update &#x60;Connection&#x60; using &#x60;Id,Name&#x60; field(s) value.  Provide the updated record information in your request data and use the &#x60;PUT&#x60; method of the resource with a specific record ID to update that record.   The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Update a record of Connection * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned.. You cannot change &#x60;Id&#x60; field value (primary key). * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned. * If the &#x60;Id,Name&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.  The response body will contain the object of the updated record if the call is successful. Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param connectionData Connection information to update.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Name &#x60;&#x60;&#x60; (optional)
     * @return Connection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public Connection updateConnection(String id, ConnectionData connectionData, String name) throws ApiException {
        ApiResponse<Connection> localVarResp = updateConnectionWithHttpInfo(id, connectionData, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Use the &#x60;ConnectionData&#x60; object resource to update &#x60;Connection&#x60; using &#x60;Id,Name&#x60; field(s) value.  Provide the updated record information in your request data and use the &#x60;PUT&#x60; method of the resource with a specific record ID to update that record.   The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Update a record of Connection * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned.. You cannot change &#x60;Id&#x60; field value (primary key). * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned. * If the &#x60;Id,Name&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.  The response body will contain the object of the updated record if the call is successful. Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param connectionData Connection information to update.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Name &#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;Connection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connection> updateConnectionWithHttpInfo(String id, ConnectionData connectionData, String name) throws ApiException {
        okhttp3.Call localVarCall = updateConnectionValidateBeforeCall(id, connectionData, name, null);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use the &#x60;ConnectionData&#x60; object resource to update &#x60;Connection&#x60; using &#x60;Id,Name&#x60; field(s) value.  Provide the updated record information in your request data and use the &#x60;PUT&#x60; method of the resource with a specific record ID to update that record.   The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Update a record of Connection * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned.. You cannot change &#x60;Id&#x60; field value (primary key). * If the &#x60;Id&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned. * If the &#x60;Id,Name&#x60; field value is matched multiple times, then a &#x60;400&#x60; error is reported (&#x60;Errors/Multible Rows&#x60;), and the error record is returned.  The response body will contain the object of the updated record if the call is successful. Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param connectionData Connection information to update.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Name &#x60;&#x60;&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConnectionAsync(String id, ConnectionData connectionData, String name, final ApiCallback<Connection> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConnectionValidateBeforeCall(id, connectionData, name, _callback);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertConnection
     * @param connectionData &#x60;Connection&#x60; information to insert or update.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted or updated &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertConnectionCall(ConnectionData connectionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionData;

        // create path and map variables
        String localVarPath = "/Endpoint/rest/api/v1/Connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertConnectionValidateBeforeCall(ConnectionData connectionData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionData' is set
        if (connectionData == null) {
            throw new ApiException("Missing the required parameter 'connectionData' when calling upsertConnection(Async)");
        }

        return upsertConnectionCall(connectionData, _callback);

    }

    /**
     * 
     * Use the &#x60;ConnectionData&#x60; object resource to insert or update (Upsert) &#x60;Connection&#x60; using &#x60;Id,Name&#x60; field(s) value.  You can supply the required field values in the request data, and then use the &#x60;POST&#x60; method of the resource.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Update a record of Connection * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned.. You cannot change &#x60;Id&#x60; field value (primary key). * If the &#x60;Name&#x60; field value is not empty and &#x60;Id&#x60; field value is empty, action try insert record according &#x60;Name&#x60; field value (if set, the value is a unique identifier).  ### Create a new record of Connection * If the value in the &#x60;Name&#x60; and &#x60;Id&#x60; fields are empty then action insert a new record according input parameter entity record structure (&#x60;ConnectionData&#x60;).  The response body will contain the object of the updated or created record if the call is successful. Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.
     * @param connectionData &#x60;Connection&#x60; information to insert or update.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @return Connection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted or updated &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public Connection upsertConnection(ConnectionData connectionData) throws ApiException {
        ApiResponse<Connection> localVarResp = upsertConnectionWithHttpInfo(connectionData);
        return localVarResp.getData();
    }

    /**
     * 
     * Use the &#x60;ConnectionData&#x60; object resource to insert or update (Upsert) &#x60;Connection&#x60; using &#x60;Id,Name&#x60; field(s) value.  You can supply the required field values in the request data, and then use the &#x60;POST&#x60; method of the resource.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Update a record of Connection * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned.. You cannot change &#x60;Id&#x60; field value (primary key). * If the &#x60;Name&#x60; field value is not empty and &#x60;Id&#x60; field value is empty, action try insert record according &#x60;Name&#x60; field value (if set, the value is a unique identifier).  ### Create a new record of Connection * If the value in the &#x60;Name&#x60; and &#x60;Id&#x60; fields are empty then action insert a new record according input parameter entity record structure (&#x60;ConnectionData&#x60;).  The response body will contain the object of the updated or created record if the call is successful. Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.
     * @param connectionData &#x60;Connection&#x60; information to insert or update.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @return ApiResponse&lt;Connection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted or updated &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connection> upsertConnectionWithHttpInfo(ConnectionData connectionData) throws ApiException {
        okhttp3.Call localVarCall = upsertConnectionValidateBeforeCall(connectionData, null);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use the &#x60;ConnectionData&#x60; object resource to insert or update (Upsert) &#x60;Connection&#x60; using &#x60;Id,Name&#x60; field(s) value.  You can supply the required field values in the request data, and then use the &#x60;POST&#x60; method of the resource.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields.  Foreign key fields are: &#x60;ModifiedBy, CreatedBy&#x60;  ### Update a record of Connection * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned.. You cannot change &#x60;Id&#x60; field value (primary key). * If the &#x60;Name&#x60; field value is not empty and &#x60;Id&#x60; field value is empty, action try insert record according &#x60;Name&#x60; field value (if set, the value is a unique identifier).  ### Create a new record of Connection * If the value in the &#x60;Name&#x60; and &#x60;Id&#x60; fields are empty then action insert a new record according input parameter entity record structure (&#x60;ConnectionData&#x60;).  The response body will contain the object of the updated or created record if the call is successful. Method returns an extended &#x60;Connection&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.
     * @param connectionData &#x60;Connection&#x60; information to insert or update.  The input parameter must be used in the &#x60;ConnectionData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted or updated &#x60;Connection&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertConnectionAsync(ConnectionData connectionData, final ApiCallback<Connection> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertConnectionValidateBeforeCall(connectionData, _callback);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertConnectionConfig
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param configData &#x60;Config&#x60; information to insert or update.  The input parameter must be used in the &#x60;ConfigData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted or updated &#x60;Config&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertConnectionConfigCall(String id, ConfigData configData, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = configData;

        // create path and map variables
        String localVarPath = "/Endpoint/rest/api/v1/Connection/{Id}/Config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertConnectionConfigValidateBeforeCall(String id, ConfigData configData, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling upsertConnectionConfig(Async)");
        }

        // verify the required parameter 'configData' is set
        if (configData == null) {
            throw new ApiException("Missing the required parameter 'configData' when calling upsertConnectionConfig(Async)");
        }

        return upsertConnectionConfigCall(id, configData, name, _callback);

    }

    /**
     * 
     * Use the &#x60;ConfigPost&#x60; object resource to insert or update (Upsert) &#x60;Config&#x60; using &#x60;Id&#x60; field(s) value.  You can supply the required field values in the request data, and then use the &#x60;POST&#x60; method of the resource.  The input parameter must be used in the &#x60;ConfigData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields.  Foreign key fields are: &#x60;WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy&#x60;  ### Update a record of Config * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned.. You cannot change &#x60;Id&#x60; field value (primary key). * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.  ### Create a new record of Config * If the value in the &#x60;Id&#x60; field is empty then action insert a new record according input parameter entity record structure (&#x60;ConfigData&#x60;).  The response body will contain the object of the updated or created record if the call is successful. Method returns an extended &#x60;Config&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param configData &#x60;Config&#x60; information to insert or update.  The input parameter must be used in the &#x60;ConfigData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @return Config
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted or updated &#x60;Config&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public Config upsertConnectionConfig(String id, ConfigData configData, String name) throws ApiException {
        ApiResponse<Config> localVarResp = upsertConnectionConfigWithHttpInfo(id, configData, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Use the &#x60;ConfigPost&#x60; object resource to insert or update (Upsert) &#x60;Config&#x60; using &#x60;Id&#x60; field(s) value.  You can supply the required field values in the request data, and then use the &#x60;POST&#x60; method of the resource.  The input parameter must be used in the &#x60;ConfigData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields.  Foreign key fields are: &#x60;WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy&#x60;  ### Update a record of Config * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned.. You cannot change &#x60;Id&#x60; field value (primary key). * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.  ### Create a new record of Config * If the value in the &#x60;Id&#x60; field is empty then action insert a new record according input parameter entity record structure (&#x60;ConfigData&#x60;).  The response body will contain the object of the updated or created record if the call is successful. Method returns an extended &#x60;Config&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param configData &#x60;Config&#x60; information to insert or update.  The input parameter must be used in the &#x60;ConfigData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;Config&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted or updated &#x60;Config&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Config> upsertConnectionConfigWithHttpInfo(String id, ConfigData configData, String name) throws ApiException {
        okhttp3.Call localVarCall = upsertConnectionConfigValidateBeforeCall(id, configData, name, null);
        Type localVarReturnType = new TypeToken<Config>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use the &#x60;ConfigPost&#x60; object resource to insert or update (Upsert) &#x60;Config&#x60; using &#x60;Id&#x60; field(s) value.  You can supply the required field values in the request data, and then use the &#x60;POST&#x60; method of the resource.  The input parameter must be used in the &#x60;ConfigData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields.  Foreign key fields are: &#x60;WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy&#x60;  ### Update a record of Config * If the &#x60;Id&#x60; field value is not matched, then a &#x60;404&#x60; error is reported (&#x60;Errors/Not Found&#x60;), and the error record is returned.. You cannot change &#x60;Id&#x60; field value (primary key). * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.  ### Create a new record of Config * If the value in the &#x60;Id&#x60; field is empty then action insert a new record according input parameter entity record structure (&#x60;ConfigData&#x60;).  The response body will contain the object of the updated or created record if the call is successful. Method returns an extended &#x60;Config&#x60; structure. Here, all foreign key fields are abstract object structures, utilizing &#x60;AbstractText&#x60; or &#x60;AbstractLong&#x60; data types, offering a detailed view of the data and related entities.
     * @param id The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.  You can extract any string to a base64 string. E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t (required)
     * @param configData &#x60;Config&#x60; information to insert or update.  The input parameter must be used in the &#x60;ConfigData&#x60; record structure inside the &#x60;FieldType&#x60; parameter in the foreign key fields. (required)
     * @param name The name of the database field. If empty, the entity &#x60;Id&#x60; field is used.  Example:  &#x60;&#x60;&#x60; Id &#x60;&#x60;&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inserted or updated &#x60;Config&#x60; information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - The user has provided input that the browser is unable to convert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - The response status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The user does not have access to execute operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - An internal server error is an error on the web server you&#39;re trying to access. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertConnectionConfigAsync(String id, ConfigData configData, String name, final ApiCallback<Config> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertConnectionConfigValidateBeforeCall(id, configData, name, _callback);
        Type localVarReturnType = new TypeToken<Config>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
