/*
 * Agile.Now.AccessHub API documentation
 * Agile.Now.AccessHub is a secure REST API designed to manage accounts, access groups, user groups, organizations, locations, applications, roles, and webhooks. This API provides a robust and scalable solution for managing user access and organizational structures in a multi-tenant environment.    **Key Features:**    1. **Accounts Management:**     - Manage user accounts with secure authentication and authorization.    2. **Access Groups:**     - Define and manage access groups for access control.     - Assign users to access groups based on roles and permissions.    3. **User Groups:**     - Create and manage user groups for better organization and collaboration.    4. **Organizations & Locations:**     - Manage multiple organizations and locations within a single platform.     - Attribute-based access control (ABAC) for settings.    5. **Applications:**     - Centralized management of applications within the platform.     - Assign and monitor application usage and access.    6. **Roles:**     - Define and manage roles for different access levels.     - Role-based access control to ensure appropriate permissions.    7. **Webhooks:**     - Integration with external services and applications.     - Configure and manage webhooks for real-time notifications and data syncing.    **Benefits:**    - **Enhanced Security:** Attribute-based and role-based access controls ensure data protection and authorized access.  - **Scalability:** Designed for growing organizations.  - **Efficiency:** Streamlined management of accounts, groups, and roles reduces overhead.  - **Flexibility:** Multi-tenant architecture allows easy customization.  - **Integration:** Webhook support facilitates seamless integration with external systems.    **Conclusion:**    Agile.Now.AccessHub is a powerful platform for managing your business data. It offers a centralized, secure, and scalable solution, enhancing operational efficiency, security, and flexibility in managing multi-tenant environments.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: dev@agilenow.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigText;
import org.openapitools.client.model.ListValidation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data loading record of Config importing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-01T14:05:01.090617400+03:00[Europe/Helsinki]", comments = "Generator version: 7.6.0")
public class ConfigsData {
  public static final String SERIALIZED_NAME_EXTRA = "Extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private List<ListValidation> extra = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_FULL_VALIDATION = "IsFullValidation";
  @SerializedName(SERIALIZED_NAME_IS_FULL_VALIDATION)
  private Boolean isFullValidation = false;

  public static final String SERIALIZED_NAME_CONFIGS = "Configs";
  @SerializedName(SERIALIZED_NAME_CONFIGS)
  private List<ConfigText> configs = new ArrayList<>();

  public ConfigsData() {
  }

  public ConfigsData extra(List<ListValidation> extra) {
    this.extra = extra;
    return this;
  }

  public ConfigsData addExtraItem(ListValidation extraItem) {
    if (this.extra == null) {
      this.extra = new ArrayList<>();
    }
    this.extra.add(extraItem);
    return this;
  }

   /**
   * List validation for entity attribute
   * @return extra
  **/
  @javax.annotation.Nullable
  public List<ListValidation> getExtra() {
    return extra;
  }

  public void setExtra(List<ListValidation> extra) {
    this.extra = extra;
  }


  public ConfigsData isFullValidation(Boolean isFullValidation) {
    this.isFullValidation = isFullValidation;
    return this;
  }

   /**
   * If the value is true, the data quality of all fields are checked. This has an effect on performance.
   * @return isFullValidation
  **/
  @javax.annotation.Nullable
  public Boolean getIsFullValidation() {
    return isFullValidation;
  }

  public void setIsFullValidation(Boolean isFullValidation) {
    this.isFullValidation = isFullValidation;
  }


  public ConfigsData configs(List<ConfigText> configs) {
    this.configs = configs;
    return this;
  }

  public ConfigsData addConfigsItem(ConfigText configsItem) {
    if (this.configs == null) {
      this.configs = new ArrayList<>();
    }
    this.configs.add(configsItem);
    return this;
  }

   /**
   * The list of &#x60;Config&#x60; data record for import
   * @return configs
  **/
  @javax.annotation.Nullable
  public List<ConfigText> getConfigs() {
    return configs;
  }

  public void setConfigs(List<ConfigText> configs) {
    this.configs = configs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigsData configsData = (ConfigsData) o;
    return Objects.equals(this.extra, configsData.extra) &&
        Objects.equals(this.isFullValidation, configsData.isFullValidation) &&
        Objects.equals(this.configs, configsData.configs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extra, isFullValidation, configs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigsData {\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    isFullValidation: ").append(toIndentedString(isFullValidation)).append("\n");
    sb.append("    configs: ").append(toIndentedString(configs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Extra");
    openapiFields.add("IsFullValidation");
    openapiFields.add("Configs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ConfigsData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigsData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigsData is not found in the empty JSON string", ConfigsData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigsData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigsData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Extra") != null && !jsonObj.get("Extra").isJsonNull()) {
        JsonArray jsonArrayextra = jsonObj.getAsJsonArray("Extra");
        if (jsonArrayextra != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Extra").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Extra` to be an array in the JSON string but got `%s`", jsonObj.get("Extra").toString()));
          }

          // validate the optional field `Extra` (array)
          for (int i = 0; i < jsonArrayextra.size(); i++) {
            ListValidation.validateJsonElement(jsonArrayextra.get(i));
          };
        }
      }
      if (jsonObj.get("Configs") != null && !jsonObj.get("Configs").isJsonNull()) {
        JsonArray jsonArrayconfigs = jsonObj.getAsJsonArray("Configs");
        if (jsonArrayconfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Configs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Configs` to be an array in the JSON string but got `%s`", jsonObj.get("Configs").toString()));
          }

          // validate the optional field `Configs` (array)
          for (int i = 0; i < jsonArrayconfigs.size(); i++) {
            ConfigText.validateJsonElement(jsonArrayconfigs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigsData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigsData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigsData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigsData.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigsData>() {
           @Override
           public void write(JsonWriter out, ConfigsData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigsData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfigsData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfigsData
  * @throws IOException if the JSON string is invalid with respect to ConfigsData
  */
  public static ConfigsData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigsData.class);
  }

 /**
  * Convert an instance of ConfigsData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

