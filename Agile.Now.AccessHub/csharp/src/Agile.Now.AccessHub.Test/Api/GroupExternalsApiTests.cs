/*
 * Agile.Now.AccessHub API
 *
 * Agile.Now.AccessHub is a secure REST API designed to manage accounts, access groups, user groups, organizations, locations, applications, roles, and webhooks. This API provides a robust and scalable solution for managing user access and organizational structures in a multi-tenant environment.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: dev@agilenow.io
 *
 * BSD 3-Clause License
 * 
 * Copyright (c) 2024, eSystems Nordic Ltd.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list
 *    of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this
 *    list of conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without specific
 *    prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */
using System;
using System.Collections.Generic;
using System.Linq;
using Agile.Now.AccessHub.Api;
using Agile.Now.AccessHub.Client;
using Agile.Now.AccessHub.Model;
using Agile.Now.AccessHub.Test.Data;
using Agile.Now.ApiAccessGroups.Test.Api;
using Xunit;
using Xunit.Abstractions;
// uncomment below to import models
//using Agile.Now.AccessHub.Model;

namespace Agile.Now.AccessHub.Test.Api
{
    /// <summary>
    ///  Class for testing GroupExternalsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GroupExternalsApiTests : IDisposable
    {
        private readonly GroupExternalsApi api;

        public GroupExternalsApiTests(ITestOutputHelper testOutputHelper)
        {
            Configuration configuration = new Configuration
            {
                BasePath = "https://dev.esystems.fi",
                OAuthTokenUrl = "https://dev.esystems.fi/oAuth/rest/v2/Token",
                OAuthFlow = Client.Auth.OAuthFlow.APPLICATION,
                OAuthClientId = "c8907421-0886-4fb0-b859-d29966762e16",
                OAuthClientSecret = "1da54fa9-ae11-4db3-9740-1bb47b85cd8e"
            };
            api = new GroupExternalsApi(configuration);
        }

        public void Dispose()
        {
        }

        /// <summary>
        /// Test an instance of GroupExternalsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
        }

        void AssertGroupDataEqual(GroupExternalData entityData, GroupExternal group)
        {
            Assert.Equal(entityData.Name, group.Name);
            Assert.Equal(entityData.Description, group.Description);
        }

        /// <summary>
        /// Test CreateGroupExternal
        /// </summary>
        [Fact]
        public void Test_Group_Create()
        {
            var entityData = TestGroupData.CreateGroupData();
            var createdEntity = api.CreateGroupExternal(entityData);
            try
            {
                AssertGroupDataEqual(entityData, createdEntity);
            }
            finally
            {
                api.DeleteGroupExternal(createdEntity.Id.ToString());
            }
        }

        /// <summary>
        /// Test DeleteGroupExternal by Id
        /// </summary>
        [Fact]
        public void Test_Group_Delete_ById()
        {
            var createdEntity = api.CreateGroupExternal(TestGroupData.CreateGroupData());
            api.DeleteGroupExternal(createdEntity.Id.ToString());
            Assert.Throws<ApiException>(() => api.GetGroupExternal(createdEntity.Id.ToString()));
        }

        /// <summary>
        /// Test DeleteGroupExternal by Name
        /// </summary>
        [Fact]
        public void Test_Group_Delete_ByName()
        {
            var createdEntity = api.CreateGroupExternal(TestGroupData.CreateGroupData());
            api.DeleteGroupExternal(createdEntity.Name, "Name");
            Assert.Throws<ApiException>(() => api.GetGroupExternal(createdEntity.Id.ToString()));
        }

        /// <summary>
        /// Test GetGroup by Id
        /// </summary>
        [Fact]
        public void Test_Group_Get_ById()
        {
            var createdEntity = api.CreateGroupExternal(TestGroupData.CreateGroupData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existingGroup = api.GetGroupExternal(createdEntity.Id.ToString());
                    Assert.Equal(createdEntity.Id, existingGroup.Id);
                    return existingGroup;
                }));
            }
            finally
            {
                api.DeleteGroupExternal(createdEntity.Id.ToString());
            }
        }

        /// <summary>
        /// Test GetGroup by Name
        /// </summary>
        [Fact]
        public void Test_Group_Get_ByName()
        {
            var createdEntity = api.CreateGroupExternal(TestGroupData.CreateGroupData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existingGroup = api.GetGroupExternal(createdEntity.Name, "Name");
                    Assert.Equal(createdEntity.Name, existingGroup.Name);
                    return existingGroup;
                }));
            }
            finally
            {
                api.DeleteGroupExternal(createdEntity.Id.ToString());
            }
        }

        /// <summary>
        /// Test ListGroups by Id
        /// </summary>
        [Fact]
        public void Test_Group_List_ById()
        {
            var createdEntities = TestGroupData.CreateGroupDataList(2).Select(i => api.CreateGroupExternal(i)).ToArray();
            try
            {
                var existingEntities = api.ListGroupExternals(
                    filters: $"Id In {string.Join(", ", createdEntities.Select(i => i.Id))}").Data;
                Assert.Equal(existingEntities.Count, createdEntities.Length);
            }
            finally
            {
                foreach (var i in createdEntities)
                    api.DeleteGroupExternal(i.Id.ToString());
            }
        }

        /// <summary>
        /// Test ListGroups by Name
        /// </summary>
        [Fact]
        public void Test_Group_List_ByName()
        {
            var entityData = TestGroupData.CreateGroupDataList(2);
            var createdEntities = entityData.Select(i => api.CreateGroupExternal(i)).ToArray();
            try
            {
                var existingEntities = api.ListGroupExternals(
                    filters: $"Name In {string.Join("; ", createdEntities.Select(i => i.Name))}");
                Assert.Equal(existingEntities.Data.Count, createdEntities.Length);
            }
            finally
            {
                foreach (var i in createdEntities)
                    api.DeleteGroupExternal(i.Id.ToString());
            }
        }

        /// <summary>
        /// Test UpdateGroup
        /// </summary>
        [Fact]
        public void Test_Group_Update()
        {
            var entityData = TestGroupData.CreateGroupData();
            var createdEntity = api.CreateGroupExternal(entityData);
            try
            {
                TestGroupData.UpdateGroupData(entityData);
                var updatedGroup = api.UpdateGroupExternal(createdEntity.Id.ToString(), entityData);
                AssertGroupDataEqual(entityData, updatedGroup);
            }
            finally
            {
                api.DeleteGroupExternal(createdEntity.Id.ToString());
            }
        }

        /// <summary>
        /// Test UpsertGroup
        /// </summary>
        [Fact]
        public void Test_Group_Upsert()
        {
            var entityData = TestGroupData.CreateGroupData();
            var createdEntity = api.UpsertGroupExternal(entityData);
            try
            {
                AssertGroupDataEqual(entityData, createdEntity);
                TestGroupData.UpdateGroupData(entityData);
                entityData.Id = createdEntity.Id;
                var updatedEntity = api.UpsertGroupExternal(entityData);
                Assert.Equal(createdEntity.Id, updatedEntity.Id);
                AssertGroupDataEqual(entityData, updatedEntity);
            }
            finally
            {
                api.DeleteGroupExternal(createdEntity.Id.ToString());
            }
        }

        /// <summary>
        /// Test PatchGroup
        /// </summary>
        [Fact]
        public void Test_Group_Patch()
        {
            var entityData = TestGroupData.CreateGroupDataList(2);
            var createdEntity = api.CreateGroupExternal(entityData[0]);
            TestGroupData.UpdateGroupData(entityData[0]);
            var anotherEntity = entityData[1].ToGroupExternalText();
            try
            {
                api.PatchGroupExternals(new(groupExternals: new List<GroupExternalText> {
                    new(
                        name: anotherEntity.Name,
                        description: anotherEntity.Description),
                    new(
                        id: createdEntity.Id,
                        name: entityData[0].Name,
                        description: entityData[0].Description)
                }));
                var existingEntities = api.ListGroupExternals(createdEntity.Id.ToString()).Data;
                Assert.Contains(existingEntities, i =>
                    entityData[0].Id == createdEntity.Id &&
                    entityData[0].Equal(i));
                Assert.Contains(existingEntities, i =>
                    entityData[1].Equal(i));
            }
            finally
            {
                api.DeleteGroupExternal(createdEntity.Id.ToString());
            }
        }

        /// <summary>
        /// Test DeleteGroupExternalUserExternal
        /// </summary>
        [Fact]
        public void Test_Group_User_Delete()
        {
            var createdEntity = api.CreateGroupExternal(TestGroupData.CreateGroupData());
            try
            {
                var createdSubEntity = api.UpsertGroupExternalUserExternal(createdEntity.Id.ToString(),
                    new(userId: new("Id", TestUserData.Users[0].ToString())));
                api.DeleteGroupExternalUserExternal(createdEntity.Id.ToString(), createdSubEntity.Id.ToString());
                var existingdGroupExternalUserExternals =
                    api.ListGroupExternalUserExternals(createdEntity.Id.ToString()).Data;
                Assert.Empty(existingdGroupExternalUserExternals);
            }
            finally
            {
                api.DeleteGroupExternal(createdEntity.Id.ToString());
            }
        }

        /// <summary>
        /// Test ListGroupExternalUserExternals
        /// </summary>
        [Fact]
        public void Test_Group_User_List()
        {
            var createdEntity = api.CreateGroupExternal(TestGroupData.CreateGroupData());
            try
            {
                var createdSubEntities = TestUserData.Users.Select(i =>
                    api.UpsertGroupExternalUserExternal(createdEntity.Id.ToString(),
                        new(userId: new("Id", i.ToString())))).ToArray();
                var existingSubEntities = api.ListGroupExternalUserExternals(createdEntity.Id.ToString()).Data;
                Assert.Equal(createdSubEntities.Length, existingSubEntities.Count);
            }
            finally
            {
                api.DeleteGroupExternal(createdEntity.Id.ToString());
            }
        }

        /// <summary>
        /// Test UpsertAccessGroupUser
        /// </summary>
        [Fact]
        public void Test_Group_User_Upsert()
        {
            var createdEntity = api.CreateGroupExternal(TestGroupData.CreateGroupData());
            try
            {
                var createdSubEntity = api.UpsertGroupExternalUserExternal(createdEntity.Id.ToString(),
                    new(userId: new("Id", TestUserData.Users[0].ToString())));
                var existingSubEntities = api.ListGroupExternalUserExternals(createdEntity.Id.ToString()).Data;
                Assert.Contains(existingSubEntities, i => i.Id == createdSubEntity.Id);
            }
            finally
            {
                api.DeleteGroupExternal(createdEntity.Id.ToString());
            }
        }

        /// <summary>
        /// Test PatchGroupUser
        /// </summary>
        [Fact]
        public void Test_Group_User_Patch()
        {
            var createdEntity = api.CreateGroupExternal(TestGroupData.CreateGroupData());
            try
            {
                var createdSubEntity = api.UpsertGroupExternalUserExternal(createdEntity.Id.ToString(),
                    new(userId: new("Id", TestUserData.Users[0].ToString())));
                api.PatchGroupExternalUserExternals(createdEntity.Id.ToString(),
                    new(userExternals: new List<UserExternalText> {
                        new(
                            userId: TestUserData.Users[1].ToString()),
                        new(
                            id: createdSubEntity.Id,
                            userId: TestUserData.Users[2].ToString())
                    }));
                var existingEntities = api.ListGroupExternalUserExternals(createdEntity.Id.ToString()).Data;
                Assert.Contains(existingEntities, i =>
                    i.UserId.Id == TestUserData.Users[1]);
                Assert.Contains(existingEntities, i =>
                    i.Id == createdSubEntity.Id &&
                    i.UserId.Id == TestUserData.Users[2]);
            }
            finally
            {
                api.DeleteGroupExternal(createdEntity.Id.ToString());
            }
        }
    }
}
