/*
 * Agile.Now.AccessHub API
 *
 * Agile.Now.AccessHub is a secure REST API designed to manage accounts, access groups, user groups, organizations, locations, applications, roles, and webhooks. This API provides a robust and scalable solution for managing user access and organizational structures in a multi-tenant environment.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: dev@agilenow.io
 *
 * BSD 3-Clause License
 * 
 * Copyright (c) 2024, eSystems Nordic Ltd.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list
 *    of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this
 *    list of conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without specific
 *    prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */
using System;
using System.Collections.Generic;
using System.Linq;
using Agile.Now.AccessHub.Api;
using Agile.Now.AccessHub.Client;
using Agile.Now.AccessHub.Model;
using Agile.Now.AccessHub.Test.Data;
using Agile.Now.ApiAccessGroups.Test.Api;
using Xunit;
using Xunit.Abstractions;
using static System.Runtime.InteropServices.JavaScript.JSType;
// uncomment below to import models
//using Agile.Now.AccessHub.Model;

namespace Agile.Now.AccessHub.Test.Api
{
    /// <summary>
    ///  Class for testing AccessGroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccessGroupsApiTests : IDisposable
    {
        private readonly AccessGroupsApi api;

        public AccessGroupsApiTests(ITestOutputHelper testOutputHelper)
        {
            api = new AccessGroupsApi(Settings.Connections[0]);
        }

        public void Dispose() { }

        void AssertAccessGroupDataEqual(AccessGroupInsertData accessGroupInsertData, AccessGroup AccessGroup)
        {
            Assert.Equal(accessGroupInsertData.Name, AccessGroup.Name);
            Assert.Equal(accessGroupInsertData.Description, AccessGroup.Description);
            Assert.Equal(accessGroupInsertData.AccessGroupTypeId.ToString(), AccessGroup.AccessGroupTypeId.Id);
        }

        /// <summary>
        /// Test CreateAccessGroup
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Create()
        {
            var data = AccessGroupTestData.CreateAccessGroupData();
            var created = api.CreateAccessGroup(data);
            try
            {
                AssertAccessGroupDataEqual(data, created);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test CreateAccessGroup - unique ExternalId
        /// </summary>

        [Fact]
        public void Test_AccessGroup_Create_UniqueExternalId()
        {
            var externalId = Guid.NewGuid().ToString();
            var data = AccessGroupTestData.CreateAccessGroupData();
            data.ExternalId = externalId;
            var created = api.CreateAccessGroup(data);
            try
            {
                data = AccessGroupTestData.CreateAccessGroupData();
                data.ExternalId = externalId;
                Assert.Throws<ApiException>(() => api.CreateAccessGroup(data));
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccessGroup by Id
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Delete_ById()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            api.DeleteAccessGroup(created.Id);
            Assert.Throws<ApiException>(() => api.GetAccessGroup(created.Id));
        }

        /// <summary>
        /// Test DeleteAccessGroup by Name
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Delete_ByName()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            api.DeleteAccessGroup(created.Name, "Name");
            Assert.Throws<ApiException>(() => api.GetAccessGroup(created.Id));
        }

        /// <summary>
        /// Test GetAccessGroup by Id
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Get_ById()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existing = api.GetAccessGroup(created.Id);
                    Assert.Equal(created.Id, existing.Id);
                    return existing;
                }));
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test GetAccessGroup by Name
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Get_ByName()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existing = api.GetAccessGroup(created.Name, "Name");
                    Assert.Equal(created.Name, existing.Name);
                    return existing;
                }));
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test ListAccessGroups by Id
        /// </summary>
        [Fact]
        public void Test_AccessGroup_List_ById()
        {
            var created = CommonTestData.CreateTestDataList(2, AccessGroupTestData.CreateAccessGroupData).
                Select(i => api.CreateAccessGroup(i)).ToArray();
            try
            {
                var existingEntities = api.ListAccessGroups(
                    filters: $"Id In {string.Join("; ", created.Select(i => i.Id))}").Data;
                Assert.Equal(existingEntities.Count, created.Length);
            }
            finally
            {
                foreach (var i in created)
                    api.DeleteAccessGroup(i.Id);
            }
        }

        /// <summary>
        /// Test ListAccessGroups by Name
        /// </summary>
        [Fact]
        public void Test_AccessGroup_List_ByName()
        {
            var created = CommonTestData.CreateTestDataList(2, AccessGroupTestData.CreateAccessGroupData).
                Select(i => api.CreateAccessGroup(i)).ToArray();
            try
            {
                var existingEntities = api.ListAccessGroups(
                    filters: $"Name In {string.Join("; ", created.Select(i => i.Name))}").Data;
                Assert.Equal(existingEntities.Count, created.Length);
            }
            finally
            {
                foreach (var i in created)
                    api.DeleteAccessGroup(i.Id);
            }
        }

        /// <summary>
        /// Test UpdateAccessGroup
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Update()
        {
            var data = AccessGroupTestData.CreateAccessGroupData();
            var created = api.CreateAccessGroup(data);
            try
            {
                AccessGroupTestData.UpdateAccessGroupData(data);
                var updated = api.UpdateAccessGroup(created.Id, data.ToAccessGroupUpdateData());
                AssertAccessGroupDataEqual(data, updated);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccessGroup
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Upsert()
        {
            var data = AccessGroupTestData.CreateAccessGroupData();
            var created = api.UpsertAccessGroup(data.ToAccessGroupData());
            try
            {
                AssertAccessGroupDataEqual(data, created);
                AccessGroupTestData.UpdateAccessGroupData(data);
                data.Id = created.Id;
                var updated = api.UpsertAccessGroup(data.ToAccessGroupData());
                Assert.Equal(created.Id, updated.Id);
                AssertAccessGroupDataEqual(data, updated);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccessGroupApplication
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Application_Delete()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var createdSubEntity = api.UpsertAccessGroupApplication(created.Id,
                    AccessGroupTestData.CreateApplicationData(AccessGroupTestData.Applications[0]));
                api.DeleteAccessGroupApplication(created.Id, createdSubEntity.Id);
                var existing = api.ListAccessGroupApplications(created.Id).Data;
                Assert.Empty(existing);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test ListAccessGroupAccessApplications
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Application_List()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var createdSubEntities = AccessGroupTestData.Applications.Select(i =>
                    api.UpsertAccessGroupApplication(created.Id,
                        AccessGroupTestData.CreateApplicationData(i))).ToArray();
                var existing = api.ListAccessGroupApplications(created.Id).Data;
                Assert.Equal(createdSubEntities.Length, existing.Count);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccessGroupApplication
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Application_Upsert()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var data = AccessGroupTestData.CreateApplicationData(AccessGroupTestData.Applications[0]);
                var createdSubEntity = api.UpsertAccessGroupApplication(created.Id, data);
                var existing = api.ListAccessGroupApplications(created.Id).Data;
                Assert.Contains(existing, i => i.Id == createdSubEntity.Id);
                data = AccessGroupTestData.CreateApplicationData(AccessGroupTestData.Applications[1]);
                data.Id = createdSubEntity.Id;
                var updated = api.UpsertAccessGroupApplication(created.Id, data);
                Assert.Equal(createdSubEntity.Id, updated.Id);
                Assert.Equal(data.AccessApplicationId.Value, updated.AccessApplicationId.Id);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test PatchAccessGroupApplication
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Application_Patch()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var createdSubEntity = api.UpsertAccessGroupApplication(created.Id,
                    AccessGroupTestData.CreateApplicationData(AccessGroupTestData.Applications[0]));
                api.PatchAccessGroupApplications(created.Id, new(applications: new List<ApplicationText> {
                    new(
                        parentApplicationId: AccessGroupTestData.ParentApplication,
                        accessApplicationId: AccessGroupTestData.Applications[1]),
                    new(
                        id: createdSubEntity.Id,
                        parentApplicationId: AccessGroupTestData.ParentApplication,
                        accessApplicationId: AccessGroupTestData.Applications[2])
                }));
                var existing = api.ListAccessGroupApplications(created.Id).Data;
                Assert.Contains(existing, i =>
                    i.ParentApplicationId.Id == AccessGroupTestData.ParentApplication &&
                    i.AccessApplicationId.Id == AccessGroupTestData.Applications[1]);
                Assert.Contains(existing, i =>
                    i.Id == createdSubEntity.Id &&
                    i.ParentApplicationId.Id == AccessGroupTestData.ParentApplication &&
                    i.AccessApplicationId.Id == AccessGroupTestData.Applications[2]);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccessGroupPermission
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Permission_Delete()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var createdSubEntity = api.UpsertAccessGroupPermission(created.Id,
                    AccessGroupTestData.CreatePermissionData(AccessGroupTestData.Permissions[0]));
                api.DeleteAccessGroupPermission(created.Id, createdSubEntity.Id.ToString());
                var existing = api.ListAccessGroupPermissions(created.Id).Data;
                Assert.Empty(existing);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test ListAccessGroupAccessPermissions
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Permission_List()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var createdSubEntities = AccessGroupTestData.Permissions.Select(i =>
                    api.UpsertAccessGroupPermission(created.Id,
                        AccessGroupTestData.CreatePermissionData(i))).ToArray();
                var existing = api.ListAccessGroupPermissions(created.Id).Data;
                Assert.Equal(createdSubEntities.Length, existing.Count);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccessGroupPermission
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Permission_Upsert()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var data = AccessGroupTestData.CreatePermissionData(AccessGroupTestData.Permissions[0]);
                var createdSubEntity = api.UpsertAccessGroupPermission(created.Id, data);
                var existing = api.ListAccessGroupPermissions(created.Id).Data;
                Assert.Contains(existing, i => i.Id == createdSubEntity.Id);
                data = AccessGroupTestData.CreatePermissionData(AccessGroupTestData.Permissions[1]);
                data.Id = createdSubEntity.Id;
                var updated = api.UpsertAccessGroupPermission(created.Id, data);
                Assert.Equal(createdSubEntity.Id, updated.Id);
                Assert.Equal(data.PermissionId.ToString(), updated.PermissionId.Id);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test PatchAccessGroupPermission
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Permission_Patch()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var createdSubEntity = api.UpsertAccessGroupPermission(created.Id,
                    AccessGroupTestData.CreatePermissionData(AccessGroupTestData.Permissions[0]));
                api.PatchAccessGroupPermissions(created.Id, new(permissions: new List<PermissionText> {
                    new(
                        permissionId: AccessGroupTestData.Permissions[1].ToString(),
                        createdOn: DateTime.Now),
                    new(
                        permissionId: AccessGroupTestData.Permissions[2].ToString(),
                        createdOn: DateTime.Now,
                        id: createdSubEntity.Id)
                }));
                var existing = api.ListAccessGroupPermissions(created.Id).Data;
                Assert.Contains(existing, i =>
                    i.PermissionId.Id == AccessGroupTestData.Permissions[1].ToString());
                Assert.Contains(existing, i =>
                    i.PermissionId.Id == AccessGroupTestData.Permissions[2].ToString() &&
                    i.Id == createdSubEntity.Id);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccessGroupUser
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Group_Delete()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var createdSubEntity = api.UpsertAccessGroupGroup(created.Id,
                    UserTestData.CreateGroupData(UserTestData.Groups[0]));
                api.DeleteAccessGroupGroup(created.Id, createdSubEntity.Id.ToString());
                var existing = api.ListAccessGroupGroups(created.Id).Data;
                Assert.Empty(existing);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test ListAccessGroupGroups
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Group_List()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var createdSubEntities = UserTestData.Groups.Select(i =>
                    api.UpsertAccessGroupGroup(created.Id, UserTestData.CreateGroupData(i))).ToArray();
                var existing = api.ListAccessGroupGroups(created.Id).Data;
                Assert.Equal(createdSubEntities.Length, existing.Count);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccessGroupGroup
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Group_Upsert()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var data = UserTestData.CreateGroupData(UserTestData.Groups[0]);
                var createdSubEntity = api.UpsertAccessGroupGroup(created.Id, data);
                var existing = api.ListAccessGroupGroups(created.Id).Data;
                Assert.Contains(existing, i => i.Id == createdSubEntity.Id);
                data = UserTestData.CreateGroupData(UserTestData.Groups[1]);
                data.Id = createdSubEntity.Id;
                var updated = api.UpsertAccessGroupGroup(created.Id, data);
                Assert.Equal(createdSubEntity.Id, updated.Id);
                Assert.Equal(data.GroupId.Value, updated.GroupId.Id.ToString());
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test PatchAccessGroupGroup
        /// </summary>
        [Fact]
        public void Test_AccessGroup_Group_Patch()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var createdSubEntity = api.UpsertAccessGroupGroup(created.Id,
                    UserTestData.CreateGroupData(UserTestData.Groups[0]));
                api.PatchAccessGroupGroups(created.Id, new(groups: new List<GroupText> {
                    new(
                        groupId: UserTestData.Groups[1].ToString(),
                        createdOn: DateTime.Now),
                    new(
                        id: createdSubEntity.Id,
                        groupId: UserTestData.Groups[2].ToString(),
                        createdOn: DateTime.Now)
                }));
                var existing = api.ListAccessGroupGroups(created.Id).Data;
                Assert.Contains(existing, i => i.GroupId.Id == UserTestData.Groups[1]);
                Assert.Contains(existing, i => i.GroupId.Id == UserTestData.Groups[2] && i.Id == createdSubEntity.Id);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccessGroupUser
        /// </summary>
        [Fact]
        public void Test_AccessGroup_User_Delete()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var createdSubEntity = api.UpsertAccessGroupUser(created.Id,
                    UserTestData.CreateUserData(UserTestData.Users[0]));
                api.DeleteAccessGroupUser(created.Id, createdSubEntity.Id.ToString());
                var existingd = api.ListAccessGroupUsers(created.Id).Data;
                Assert.Empty(existingd);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test ListAccessGroupUsers
        /// </summary>
        [Fact]
        public void Test_AccessGroup_User_List()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var createdSubEntities = UserTestData.Users.Select(i =>
                    api.UpsertAccessGroupUser(created.Id, UserTestData.CreateUserData(i))).ToArray();
                var existing = api.ListAccessGroupUsers(created.Id).Data;
                Assert.Equal(createdSubEntities.Length, existing.Count);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccessGroupUser
        /// </summary>
        [Fact]
        public void Test_AccessGroup_User_Upsert()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var data = UserTestData.CreateUserData(UserTestData.Users[0]);
                var createdSubEntity = api.UpsertAccessGroupUser(created.Id, data);
                var existing = api.ListAccessGroupUsers(created.Id).Data;
                Assert.Contains(existing, i => i.Id == createdSubEntity.Id);
                data = UserTestData.CreateUserData(UserTestData.Users[1]);
                data.Id = createdSubEntity.Id;
                var updated = api.UpsertAccessGroupUser(created.Id, data);
                Assert.Equal(createdSubEntity.Id, updated.Id);
                Assert.Equal(data.UserId.Value, updated.UserId.Id.ToString());
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }

        /// <summary>
        /// Test PatchAccessGroupUser
        /// </summary>
        [Fact]
        public void Test_AccessGroup_User_Patch()
        {
            var created = api.CreateAccessGroup(AccessGroupTestData.CreateAccessGroupData());
            try
            {
                var createdSubEntity = api.UpsertAccessGroupUser(created.Id,
                    UserTestData.CreateUserData(UserTestData.Users[0]));
                api.PatchAccessGroupUsers(created.Id, new(users: new List<UserText> {
                    new(
                        userId: UserTestData.Users[1].ToString(),
                        createdOn: DateTime.Now),
                    new(
                        id: createdSubEntity.Id,
                        userId: UserTestData.Users[2].ToString(),
                        createdOn: DateTime.Now)
                }));
                var existing = api.ListAccessGroupUsers(created.Id).Data;
                Assert.Contains(existing, i => i.UserId.Id == UserTestData.Users[1]);
                Assert.Contains(existing, i => i.UserId.Id == UserTestData.Users[2] && i.Id == createdSubEntity.Id);
            }
            finally
            {
                api.DeleteAccessGroup(created.Id);
            }
        }
    }
}
