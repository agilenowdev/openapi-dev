/*
 * Agile.Now.AccessHub API
 *
 * Agile.Now.AccessHub is a secure REST API designed to manage accounts, access groups, user groups, organizations, locations, applications, roles, and webhooks. This API provides a robust and scalable solution for managing user access and organizational structures in a multi-tenant environment.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: dev@agilenow.io
 *
 * BSD 3-Clause License
 * 
 * Copyright (c) 2024, eSystems Nordic Ltd.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list
 *    of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this
 *    list of conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without specific
 *    prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Agile.Now.AccessHub.Client;
using Agile.Now.AccessHub.Api;
// uncomment below to import models
//using Agile.Now.AccessHub.Model;

namespace Agile.Now.AccessHub.Test.Api
{
    /// <summary>
    ///  Class for testing AccessGroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccessGroupsApiTests : IDisposable
    {
        private AccessGroupsApi instance;

        public AccessGroupsApiTests()
        {
            instance = new AccessGroupsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AccessGroupsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AccessGroupsApi
            //Assert.IsType<AccessGroupsApi>(instance);
        }

        /// <summary>
        /// Test CreateAccessGroup
        /// </summary>
        [Fact]
        public void CreateAccessGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccessGroupData accessGroupData = null;
            //var response = instance.CreateAccessGroup(accessGroupData);
            //Assert.IsType<AccessGroup>(response);
        }

        /// <summary>
        /// Test DeleteAccessGroup
        /// </summary>
        [Fact]
        public void DeleteAccessGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //var response = instance.DeleteAccessGroup(id, name);
            //Assert.IsType<AccessGroup>(response);
        }

        /// <summary>
        /// Test DeleteAccessGroupApplication
        /// </summary>
        [Fact]
        public void DeleteAccessGroupApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string subId = null;
            //string name = null;
            //string subName = null;
            //var response = instance.DeleteAccessGroupApplication(id, subId, name, subName);
            //Assert.IsType<Application>(response);
        }

        /// <summary>
        /// Test DeleteAccessGroupGroup
        /// </summary>
        [Fact]
        public void DeleteAccessGroupGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string subId = null;
            //string name = null;
            //string subName = null;
            //var response = instance.DeleteAccessGroupGroup(id, subId, name, subName);
            //Assert.IsType<Group>(response);
        }

        /// <summary>
        /// Test DeleteAccessGroupUser
        /// </summary>
        [Fact]
        public void DeleteAccessGroupUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string subId = null;
            //string name = null;
            //string subName = null;
            //var response = instance.DeleteAccessGroupUser(id, subId, name, subName);
            //Assert.IsType<User>(response);
        }

        /// <summary>
        /// Test GetAccessGroup
        /// </summary>
        [Fact]
        public void GetAccessGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //var response = instance.GetAccessGroup(id, name);
            //Assert.IsType<AccessGroup>(response);
        }

        /// <summary>
        /// Test ListAccessGroupApplications
        /// </summary>
        [Fact]
        public void ListAccessGroupApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListAccessGroupApplications(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Applications>(response);
        }

        /// <summary>
        /// Test ListAccessGroupGroups
        /// </summary>
        [Fact]
        public void ListAccessGroupGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListAccessGroupGroups(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Groups>(response);
        }

        /// <summary>
        /// Test ListAccessGroupUsers
        /// </summary>
        [Fact]
        public void ListAccessGroupUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListAccessGroupUsers(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Users>(response);
        }

        /// <summary>
        /// Test ListAccessGroups
        /// </summary>
        [Fact]
        public void ListAccessGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListAccessGroups(fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<AccessGroups>(response);
        }

        /// <summary>
        /// Test PatchAccessGroupApplications
        /// </summary>
        [Fact]
        public void PatchAccessGroupApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ApplicationsData applicationsData = null;
            //string name = null;
            //string deleteNotExists = null;
            //var response = instance.PatchAccessGroupApplications(id, applicationsData, name, deleteNotExists);
            //Assert.IsType<Application>(response);
        }

        /// <summary>
        /// Test PatchAccessGroupGroups
        /// </summary>
        [Fact]
        public void PatchAccessGroupGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GroupsData groupsData = null;
            //string name = null;
            //string deleteNotExists = null;
            //var response = instance.PatchAccessGroupGroups(id, groupsData, name, deleteNotExists);
            //Assert.IsType<Group>(response);
        }

        /// <summary>
        /// Test PatchAccessGroupUsers
        /// </summary>
        [Fact]
        public void PatchAccessGroupUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UsersData usersData = null;
            //string name = null;
            //string deleteNotExists = null;
            //var response = instance.PatchAccessGroupUsers(id, usersData, name, deleteNotExists);
            //Assert.IsType<User>(response);
        }

        /// <summary>
        /// Test UpdateAccessGroup
        /// </summary>
        [Fact]
        public void UpdateAccessGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AccessGroupData accessGroupData = null;
            //string name = null;
            //var response = instance.UpdateAccessGroup(id, accessGroupData, name);
            //Assert.IsType<AccessGroup>(response);
        }

        /// <summary>
        /// Test UpsertAccessGroup
        /// </summary>
        [Fact]
        public void UpsertAccessGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccessGroupData accessGroupData = null;
            //var response = instance.UpsertAccessGroup(accessGroupData);
            //Assert.IsType<AccessGroup>(response);
        }

        /// <summary>
        /// Test UpsertAccessGroupApplication
        /// </summary>
        [Fact]
        public void UpsertAccessGroupApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ApplicationData applicationData = null;
            //string name = null;
            //var response = instance.UpsertAccessGroupApplication(id, applicationData, name);
            //Assert.IsType<Application>(response);
        }

        /// <summary>
        /// Test UpsertAccessGroupGroup
        /// </summary>
        [Fact]
        public void UpsertAccessGroupGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GroupData groupData = null;
            //string name = null;
            //var response = instance.UpsertAccessGroupGroup(id, groupData, name);
            //Assert.IsType<Group>(response);
        }

        /// <summary>
        /// Test UpsertAccessGroupUser
        /// </summary>
        [Fact]
        public void UpsertAccessGroupUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserData userData = null;
            //string name = null;
            //var response = instance.UpsertAccessGroupUser(id, userData, name);
            //Assert.IsType<User>(response);
        }
    }
}
