/*
 * Agile.Now.AccessHub API documentation
 *
 * Agile.Now.AccessHub is a secure REST API designed to manage accounts, access groups, user groups, organizations, locations, applications, roles, and webhooks. This API provides a robust and scalable solution for managing user access and organizational structures in a multi-tenant environment.    **Key Features:**    1. **Accounts Management:**     - Manage user accounts with secure authentication and authorization.    2. **Access Groups:**     - Define and manage access groups for access control.     - Assign users to access groups based on roles and permissions.    3. **User Groups:**     - Create and manage user groups for better organization and collaboration.    4. **Organizations & Locations:**     - Manage multiple organizations and locations within a single platform.     - Attribute-based access control (ABAC) for settings.    5. **Applications:**     - Centralized management of applications within the platform.     - Assign and monitor application usage and access.    6. **Roles:**     - Define and manage roles for different access levels.     - Role-based access control to ensure appropriate permissions.    7. **Webhooks:**     - Integration with external services and applications.     - Configure and manage webhooks for real-time notifications and data syncing.    **Benefits:**    - **Enhanced Security:** Attribute-based and role-based access controls ensure data protection and authorized access.  - **Scalability:** Designed for growing organizations.  - **Efficiency:** Streamlined management of accounts, groups, and roles reduces overhead.  - **Flexibility:** Multi-tenant architecture allows easy customization.  - **Integration:** Webhook support facilitates seamless integration with external systems.    **Conclusion:**    Agile.Now.AccessHub is a powerful platform for managing your business data. It offers a centralized, secure, and scalable solution, enhancing operational efficiency, security, and flexibility in managing multi-tenant environments.
 *
 * The version of the OpenAPI document: 2.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Agile.Now.AccessHub.Client;
using Agile.Now.AccessHub.Api;
// uncomment below to import models
//using Agile.Now.AccessHub.Model;

namespace Agile.Now.AccessHub.Test.Api
{
    /// <summary>
    ///  Class for testing ConnectionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ConnectionsApiTests : IDisposable
    {
        private ConnectionsApi instance;

        public ConnectionsApiTests()
        {
            instance = new ConnectionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ConnectionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ConnectionsApi
            //Assert.IsType<ConnectionsApi>(instance);
        }

        /// <summary>
        /// Test CreateConnection
        /// </summary>
        [Fact]
        public void CreateConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConnectionData connectionData = null;
            //var response = instance.CreateConnection(connectionData);
            //Assert.IsType<Connection>(response);
        }

        /// <summary>
        /// Test DeleteConnection
        /// </summary>
        [Fact]
        public void DeleteConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? name = null;
            //var response = instance.DeleteConnection(id, name);
            //Assert.IsType<Connection>(response);
        }

        /// <summary>
        /// Test DeleteConnectionConfig
        /// </summary>
        [Fact]
        public void DeleteConnectionConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string subId = null;
            //string? name = null;
            //string? subName = null;
            //var response = instance.DeleteConnectionConfig(id, subId, name, subName);
            //Assert.IsType<Config>(response);
        }

        /// <summary>
        /// Test GetConnection
        /// </summary>
        [Fact]
        public void GetConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? name = null;
            //var response = instance.GetConnection(id, name);
            //Assert.IsType<Connection>(response);
        }

        /// <summary>
        /// Test ListConnectionConfigs
        /// </summary>
        [Fact]
        public void ListConnectionConfigsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? name = null;
            //string? fields = null;
            //string? filters = null;
            //string? orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListConnectionConfigs(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Configs>(response);
        }

        /// <summary>
        /// Test ListConnections
        /// </summary>
        [Fact]
        public void ListConnectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? fields = null;
            //string? filters = null;
            //string? orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListConnections(fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Connections>(response);
        }

        /// <summary>
        /// Test PatchConnectionConfigs
        /// </summary>
        [Fact]
        public void PatchConnectionConfigsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ConfigsData configsData = null;
            //string? name = null;
            //string? deleteNotExists = null;
            //var response = instance.PatchConnectionConfigs(id, configsData, name, deleteNotExists);
            //Assert.IsType<Config>(response);
        }

        /// <summary>
        /// Test UpdateConnection
        /// </summary>
        [Fact]
        public void UpdateConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ConnectionData connectionData = null;
            //string? name = null;
            //var response = instance.UpdateConnection(id, connectionData, name);
            //Assert.IsType<Connection>(response);
        }

        /// <summary>
        /// Test UpsertConnection
        /// </summary>
        [Fact]
        public void UpsertConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConnectionData connectionData = null;
            //var response = instance.UpsertConnection(connectionData);
            //Assert.IsType<Connection>(response);
        }

        /// <summary>
        /// Test UpsertConnectionConfig
        /// </summary>
        [Fact]
        public void UpsertConnectionConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ConfigData configData = null;
            //string? name = null;
            //var response = instance.UpsertConnectionConfig(id, configData, name);
            //Assert.IsType<Config>(response);
        }
    }
}
