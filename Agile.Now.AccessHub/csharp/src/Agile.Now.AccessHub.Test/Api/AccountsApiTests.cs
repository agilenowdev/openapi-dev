/*
 * Agile.Now.AccessHub API
 *
 * Agile.Now.AccessHub is a secure REST API designed to manage accounts, access groups, user groups, organizations, locations, applications, roles, and webhooks. This API provides a robust and scalable solution for managing user access and organizational structures in a multi-tenant environment.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: dev@agilenow.io
 *
 * BSD 3-Clause License
 * 
 * Copyright (c) 2024, eSystems Nordic Ltd.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list
 *    of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this
 *    list of conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without specific
 *    prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

using System;
using System.Linq;
using Agile.Now.AccessHub.Api;
using Agile.Now.AccessHub.Client;
// uncomment below to import models
using Agile.Now.AccessHub.Model;
using Agile.Now.ApiAccounts.Test.Api;
using Xunit;
using Xunit.Abstractions;

namespace Agile.Now.AccessHub.Test.Api
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountsApiTests : IDisposable
    {
        private readonly AccountsApi api;
        private readonly ITestOutputHelper output;

        public AccountsApiTests(ITestOutputHelper testOutputHelper)
        {
            output = testOutputHelper;
            Configuration configuration = new Configuration
            {
                BasePath = "https://dev.esystems.fi",
                OAuthTokenUrl = "https://dev.esystems.fi/oAuth/rest/v2/Token",
                OAuthFlow = Client.Auth.OAuthFlow.APPLICATION,
                OAuthClientId = "c8907421-0886-4fb0-b859-d29966762e16",
                OAuthClientSecret = "1da54fa9-ae11-4db3-9740-1bb47b85cd8e"
            };
            api = new AccountsApi(configuration);
        }

        public void Dispose()
        {
        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
        }

        void AssertAccountDataEqual(AccountData entityData, Account account)
        {
            Assert.Equal(entityData.LastName, account.LastName);
            Assert.Equal(entityData.FirstName, account.FirstName);
            Assert.Equal(entityData.Email, account.Email);
            Assert.Equal(entityData.IsActive, account.IsActive);

            Assert.Equal($"{entityData.LastName} {entityData.FirstName}", account.Name);

            //Assert.Equal(entityData.DateFormatId.ToString(), account.DateFormatId.Id);
            Assert.Equal(entityData.LanguageId.ToString(), account.LanguageId.Name);
        }

        /// <summary>
        /// Test CreateAccount
        /// </summary>
        [Fact]
        public void Test_Account_Create()
        {
            var entityData = AccountTestData.CreateAccountData();
            var createdEntity = api.CreateAccount(entityData);
            try
            {
                AssertAccountDataEqual(entityData, createdEntity);
                output.WriteLine($"TenantId= {createdEntity.TenantId.Id}");
            }
            finally
            {
                api.DeleteAccount(createdEntity.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccount by Id
        /// </summary>
        [Fact]
        public void Test_Account_Delete_ById()
        {
            var createdEntity = api.CreateAccount(AccountTestData.CreateAccountData());
            api.DeleteAccount(createdEntity.Id);
            Assert.Throws<ApiException>(() => api.GetAccount(createdEntity.Id));
        }

        /// <summary>
        /// Test DeleteAccount by UserName
        /// </summary>
        [Fact]
        public void Test_Account_Delete_ByUserName()
        {
            var createdEntity = api.CreateAccount(AccountTestData.CreateAccountData());
            api.DeleteAccount(createdEntity.Username, "Username");
            Assert.Throws<ApiException>(() => api.GetAccount(createdEntity.Id));
        }

        /// <summary>
        /// Test DeleteAccount with several tenants
        /// </summary>
        [Fact]
        public void Test_Account_Delete_WithSeveralTenants()
        {
            var entityData = AccountTestData.CreateAccountData();
            var createdEntity = api.CreateAccount(entityData);
            try
            {
                var anotherTenant = api.UpsertAccountTenant(createdEntity.Id, new(
                    new("Id", ""),
                    new("Id", AccountTestData.AnotherTenant.ToString())));
                api.DeleteAccount(createdEntity.Id);
                Assert.Null(Record.Exception(() => api.GetAccount(createdEntity.Id)));
                api.DeleteAccountTenant(createdEntity.Id, anotherTenant.UserId.ToString(), subName: "UserId");
                api.DeleteAccount(createdEntity.Id);
                Assert.Throws<ApiException>(() => api.GetAccount(createdEntity.Id));
            }
            finally
            {
                api.DeleteAccount(createdEntity.Id);
            }
        }

        /// <summary>
        /// Test GetAccount by Id
        /// </summary>
        [Fact]
        public void Test_Account_Get_ById()
        {
            var createdEntity = api.CreateAccount(AccountTestData.CreateAccountData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existingEntity = api.GetAccount(createdEntity.Id);
                    Assert.Equal(createdEntity.Id, existingEntity.Id);
                    return existingEntity;
                }));
            }
            finally
            {
                api.DeleteAccount(createdEntity.Id);
            }
        }

        /// <summary>
        /// Test GetAccount by UserName
        /// </summary>
        [Fact]
        public void Test_Account_Get_ByUserName()
        {
            var createdEntity = api.CreateAccount(AccountTestData.CreateAccountData());
            try
            {
                Assert.Null(Record.Exception(() =>
                {
                    var existingEntity = api.GetAccount(createdEntity.Username, "Username");
                    Assert.Equal(createdEntity.Username, existingEntity.Username);
                    return existingEntity;
                }));
            }
            finally
            {
                api.DeleteAccount(createdEntity.Id);
            }
        }

        /// <summary>
        /// Test ListAccounts by Id
        /// </summary>
        [Fact]
        public void Test_Account_List_ById()
        {
            var entityData = AccountTestData.CreateAccountDataList(2);
            var createdEntities = entityData.Select(i => api.CreateAccount(i)).ToArray();
            try
            {
                var existingEntities = api.ListAccounts(
                    filters: $"Id In {string.Join("; ", createdEntities.Select(i => i.Id))}").Data;
                Assert.Equal(createdEntities.Length, existingEntities.Count);
            }
            finally
            {
                foreach (var i in createdEntities)
                    api.DeleteAccount(i.Id);
            }
        }

        /// <summary>
        /// Test ListAccounts by UserName
        /// </summary>
        [Fact]
        public void Test_Account_List_ByUserName()
        {
            var entityData = AccountTestData.CreateAccountDataList(2);
            var createdEntities = entityData.Select(i => api.CreateAccount(i)).ToArray();
            try
            {
                var existingEntities = api.ListAccounts(
                    filters: $"Username In {string.Join("; ", createdEntities.Select(i => i.Username))}").Data;
                Assert.Equal(createdEntities.Length, existingEntities.Count);
            }
            finally
            {
                foreach (var i in createdEntities)
                    api.DeleteAccount(i.Id);
            }
        }

        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Fact]
        public void Test_Account_Update()
        {
            var entityData = AccountTestData.CreateAccountData();
            var createdEntity = api.CreateAccount(entityData);
            try
            {
                AccountTestData.UpdateAccountData(entityData);
                var updatedAccount = api.UpdateAccount(createdEntity.Id, entityData);
                AssertAccountDataEqual(entityData, updatedAccount);
            }
            finally
            {
                api.DeleteAccount(createdEntity.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccount
        /// </summary>
        [Fact]
        public void Test_Account_Upsert()
        {
            var entityData = AccountTestData.CreateAccountData();
            var createdEntity = api.UpsertAccount(entityData);
            try
            {
                AssertAccountDataEqual(entityData, createdEntity);
                AccountTestData.UpdateAccountData(entityData);
                entityData.Id = createdEntity.Id;
                var updatedAccount = api.UpsertAccount(entityData);
                Assert.Equal(createdEntity.Id, updatedAccount.Id);
                AssertAccountDataEqual(entityData, updatedAccount);
            }
            finally
            {
                api.DeleteAccount(createdEntity.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccountTenant
        /// </summary>
        [Fact]
        public void Test_AccountTenant_Delete()
        {
            var entityData = AccountTestData.CreateAccountData();
            var createdEntity = api.CreateAccount(entityData);
            try
            {
                var existingSubEntities = api.ListAccountTenants(createdEntity.Id).Data;
                var deletedSubEntity = api.DeleteAccountTenant(
                    createdEntity.Id, existingSubEntities[0].UserId.ToString(), subName: "UserId");
                existingSubEntities = api.ListAccountTenants(createdEntity.Id).Data;
                Assert.DoesNotContain(existingSubEntities, i => i.TenantId.Id == deletedSubEntity.TenantId.Id);
            }
            finally
            {
                api.DeleteAccount(createdEntity.Id);
            }
        }

        /// <summary>
        /// Test ListAccountTenants
        /// </summary>
        [Fact]
        public void Test_AccountTenant_List()
        {
            var entityData = AccountTestData.CreateAccountData();
            var createdEntity = api.CreateAccount(entityData);
            try
            {
                //var createdTenant = api.UpsertAccountTenant(createdEntity.Id, new(
                //    new("Id", ""),
                //    new("Id", TestAccountData.AnotherTenant.ToString())));
                try
                {
                    var existingEntityTenants = api.ListAccountTenants(createdEntity.Id).Data;
                    //Assert.Collection(existingEntityTenants, i => Assert.Equal(createdEntity.Id, i.AccountId.Id));
                }
                finally
                {
                    //api.DeleteAccountTenant(createdEntity.Id, createdTenant.TenantId.Id.ToString(), subName: "UserId");
                }
            }
            finally
            {
                api.DeleteAccount(createdEntity.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccountTenant
        /// </summary>
        [Fact]
        public void Test_AccountTenant_Upsert()
        {
            var entityData = AccountTestData.CreateAccountData();
            var createdEntity = api.CreateAccount(entityData);
            try
            {
                var createdSubEntity = api.UpsertAccountTenant(createdEntity.Id, new(
                    new("Id", ""),
                    new("Id", AccountTestData.AnotherTenant.ToString())));
                try
                {
                    var existingSubEntities = api.ListAccountTenants(createdEntity.Id).Data;
                    //Assert.Contains(existingEntityTenants, i => createdEntity.Id == i.AccountId.Id);
                }
                finally
                {
                    api.DeleteAccountTenant(createdEntity.Id, createdSubEntity.TenantId.Id.ToString(), subName: "UserId");
                }
            }
            finally
            {
                api.DeleteAccount(createdEntity.Id);
            }
        }

        /// <summary>
        /// Test DeleteAccountPicture
        /// </summary>
        [Fact]
        public void Test_AccountPicture_Delete()
        {
            var entityData = AccountTestData.CreateAccountData();
            var createdEntity = api.CreateAccount(entityData);
            try
            {
                var createdSubEntity = api.UpsertAccountPicture(
                    createdEntity.Id,
                    new(createdEntity.Username + "_picture", AccountTestData.PictureData.ToStream()));
                api.DeleteAccountPicture(createdEntity.Id, null);
            }
            finally
            {
                api.DeleteAccount(createdEntity.Id);
            }
        }

        /// <summary>
        /// Test UpsertAccountPicture
        /// </summary>
        [Fact]
        public void Test_AccountPicture_Upsert()
        {
            var entityData = AccountTestData.CreateAccountData();
            var createdEntity = api.CreateAccount(entityData);
            try
            {
                var createdSubEntity = api.UpsertAccountPicture(createdEntity.Id,
                    new(createdEntity.Username + "_picture", AccountTestData.PictureData.ToStream()));
                try
                {
                    var existingSubEntities = api.ListAccountPictures(createdEntity.Id).Data;
                    Assert.Contains(existingSubEntities, i => i.Filename == createdSubEntity.Filename);
                }
                finally
                {
                    api.DeleteAccountPicture(createdEntity.Id, null);
                }
            }
            finally
            {
                api.DeleteAccount(createdEntity.Id);
            }
        }

        /// <summary>
        /// Test ListAccountPicture
        /// </summary>
        [Fact]
        public void Test_AccountPicture_List()
        {
            var entityData = AccountTestData.CreateAccountData();
            var createdEntity = api.CreateAccount(entityData);
            try
            {
                var createdSubEntity = api.UpsertAccountPicture(createdEntity.Id,
                    new(createdEntity.Username + "_picture", AccountTestData.PictureData.ToStream()));
                try
                {
                    var existingSubEntities = api.ListAccountPictures(createdEntity.Id).Data;
                    Assert.Single(existingSubEntities);
                    Assert.Contains(existingSubEntities, i => i.Filename == createdSubEntity.Filename);
                }
                finally
                {
                    api.DeleteAccountPicture(createdEntity.Id, null);
                }
            }
            finally
            {
                api.DeleteAccount(createdEntity.Id);
            }
        }
    }
}
