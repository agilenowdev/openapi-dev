/*
 * Agile.Now.AccessHub API
 *
 * Agile.Now.AccessHub is a secure REST API designed to manage accounts, access groups, user groups, organizations, locations, applications, roles, and webhooks. This API provides a robust and scalable solution for managing user access and organizational structures in a multi-tenant environment.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: dev@agilenow.io
 *
 * BSD 3-Clause License
 * 
 * Copyright (c) 2024, eSystems Nordic Ltd.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list
 *    of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this
 *    list of conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without specific
 *    prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

using System;
using Xunit;

using Agile.Now.AccessHub.Client;
using Agile.Now.AccessHub.Api;
// uncomment below to import models
using Agile.Now.AccessHub.Model;
using System.Diagnostics;

namespace Agile.Now.AccessHub.Test.Api
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountsApiTests : IDisposable
    {
        private AccountsApi instance;

        public AccountsApiTests()
        {
            instance = new AccountsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AccountsApi
            //Assert.IsType<AccountsApi>(instance);
        }

        /// <summary>
        /// Test CreateAccount
        /// </summary>
        [Fact]
        public void CreateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            AccountData accountData = Data.TestAccountData.CreateAccountData();
            try
            {
                var response = instance.CreateAccount(accountData);
                Assert.IsType<Account>(response);
            }
            catch (ApiException e)
            {
                Debug.Print("Exception when calling AccountsApi.CreateAccount: " + e.Message);
                Debug.Print("Status Code: " + e.ErrorCode);         // The HTTP response code
                Debug.Print("Title: " + e.Error.Title);             // Brief, human-readable message about the error
                Debug.Print("Type: " + e.Error.Type);               // URI identifier that categorizes the error
                Debug.Print("Instance: " + e.Error.Instance);       // URI that identifies the specific occurrence of the error
                Debug.Print("RequestKey: " + e.Error.RequestKey);   // Provides a request key that identifies the current request.
                // Human-readable explanation of the errors
                Debug.Print("Errors: " + string.Join(", ", e.Error.Errors));
                Debug.Print(e.StackTrace);

                Assert.Equal("", e.Error.Title);
            }
            finally {
                
            }
            
        }

        /// <summary>
        /// Test DeleteAccount
        /// </summary>
        [Fact]
        public void DeleteAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //var response = instance.DeleteAccount(id, name);
            //Assert.IsType<Account>(response);
        }

        /// <summary>
        /// Test DeleteAccountPicture
        /// </summary>
        [Fact]
        public void DeleteAccountPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string subId = null;
            //string name = null;
            //string subName = null;
            //var response = instance.DeleteAccountPicture(id, subId, name, subName);
            //Assert.IsType<Picture>(response);
        }

        /// <summary>
        /// Test DeleteAccountTenant
        /// </summary>
        [Fact]
        public void DeleteAccountTenantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string subId = null;
            //string name = null;
            //string subName = null;
            //var response = instance.DeleteAccountTenant(id, subId, name, subName);
            //Assert.IsType<Tenant>(response);
        }

        /// <summary>
        /// Test GetAccount
        /// </summary>
        [Fact]
        public void GetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //var response = instance.GetAccount(id, name);
            //Assert.IsType<Account>(response);
        }

        /// <summary>
        /// Test ListAccountPictures
        /// </summary>
        [Fact]
        public void ListAccountPicturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListAccountPictures(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Pictures>(response);
        }

        /// <summary>
        /// Test ListAccountTenants
        /// </summary>
        [Fact]
        public void ListAccountTenantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListAccountTenants(id, name, fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Tenants>(response);
        }

        /// <summary>
        /// Test ListAccounts
        /// </summary>
        [Fact]
        public void ListAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fields = null;
            //string filters = null;
            //string orders = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //var response = instance.ListAccounts(fields, filters, orders, currentPage, pageSize);
            //Assert.IsType<Accounts>(response);
        }

        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Fact]
        public void UpdateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AccountData accountData = null;
            //string name = null;
            //var response = instance.UpdateAccount(id, accountData, name);
            //Assert.IsType<Account>(response);
        }

        /// <summary>
        /// Test UpsertAccount
        /// </summary>
        [Fact]
        public void UpsertAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccountData accountData = null;
            //var response = instance.UpsertAccount(accountData);
            //Assert.IsType<Account>(response);
        }

        /// <summary>
        /// Test UpsertAccountPicture
        /// </summary>
        [Fact]
        public void UpsertAccountPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PictureData pictureData = null;
            //string name = null;
            //var response = instance.UpsertAccountPicture(id, pictureData, name);
            //Assert.IsType<Picture>(response);
        }

        /// <summary>
        /// Test UpsertAccountTenant
        /// </summary>
        [Fact]
        public void UpsertAccountTenantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TenantData tenantData = null;
            //string name = null;
            //var response = instance.UpsertAccountTenant(id, tenantData, name);
            //Assert.IsType<Tenant>(response);
        }
    }
}
