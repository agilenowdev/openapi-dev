openapi: 3.0.3
info:
  contact:
    email: dev@agilenow.io
    name: Agile.Now Dev Team
    url: https://www.agilenow.io
  description: "Agile.Now.AccessHub is a secure REST API designed to manage accounts,\
    \ access groups, user groups, organizations, locations, applications, roles, and\
    \ webhooks. This API provides a robust and scalable solution for managing user\
    \ access and organizational structures in a multi-tenant environment."
  license:
    name: BSD-3 license
    url: https://opensource.org/licenses/BSD-3-Clause
  title: Agile.Now.AccessHub API
  version: 2.0.1
servers:
- description: Default entry point of service Agile.Now server
  url: https://dev.esystems.fi
tags:
- description: Accounts
  name: Accounts
- description: Departments
  name: Departments
- description: Locations
  name: Locations
- description: Connections
  name: Connections
- description: Entities
  name: Entities
paths:
  /Endpoint/rest/api/v1/Account/{Id}:
    delete:
      description: |-
        Use the query string resource to delete `Account` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id, Username, ExternalId` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`

        ### Delete a record of Account
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Account
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nUsername, ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nUsername, ExternalId\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Deleted `Account` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Delete
        - AccessUser:Delete
      tags:
      - Accounts
    get:
      description: |-
        The method returns one record of the `Account`.

        Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`

        ### Get a record of Account
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
      operationId: Get Account
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nUsername, ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nUsername, ExternalId\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: The record of `Account` information
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Accounts
    put:
      description: "Use the `AccountData` object resource to update `Account` using\
        \ `Id, Username, ExternalId` field(s) value.\n\nProvide the updated record\
        \ information in your request data and use the `PUT` method of the resource\
        \ with a specific record ID to update that record. \n\nThe input parameter\
        \ must be used in the `AccountData` record structure inside the `FieldType`\
        \ parameter in the foreign key fields.\n\nForeign key fields are: `TenantId,\
        \ LanguageId, TimezoneId, DateFormatId`\n\n### Update a record of Account\n\
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not\
        \ Found`), and the error record is returned.. You cannot change `Id` field\
        \ value (primary key).\n* If the `Id` field value is matched multiple times,\
        \ then a `400` error is reported (`Errors/Multible Rows`), and the error record\
        \ is returned.\n* If the `Id, Username, ExternalId` field value is matched\
        \ multiple times, then a `400` error is reported (`Errors/Multible Rows`),\
        \ and the error record is returned.\n\nThe response body will contain the\
        \ object of the updated record if the call is successful. Method returns an\
        \ extended `Account` structure. Here, all foreign key fields are abstract\
        \ object structures, utilizing `AbstractText` or `AbstractLong` data types,\
        \ offering a detailed view of the data and related entities."
      operationId: Update Account
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nUsername, ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nUsername, ExternalId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountData'
        description: |-
          Account information to update.

          The input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Updated `Account` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Update
        - AccessUser:Update
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Accounts:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Account` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `TenantId, LanguageId, TimezoneId, DateFormatId`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Accounts
      parameters:
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, TenantId, Name, FirstName, LastName,\
          \ Phone, Email, LanguageId, TimezoneId, DateFormatId, Username, ExternalId,\
          \ NotifyByEmail, NotifyBySMS, Is_Active, ModifiedOn, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, TenantId, Name, FirstName,\
            \ LastName, Phone, Email, LanguageId, TimezoneId, DateFormatId, Username,\
            \ ExternalId, NotifyByEmail, NotifyBySMS, Is_Active, ModifiedOn, CreatedOn\n\
            ```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
          description: The list of Accounts
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Account:
    patch:
      description: |-
        Use the `AccountData` object resource to insert or update (Upsert) `Account` using `Id, Username, ExternalId` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`

        ### Update a record of Account
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * If the `Username, ExternalId` field value is not empty and `Id` field value is empty, action try insert record according `Username, ExternalId` field value (if set, the value is a unique identifier).

        ### Create a new record of Account
        * If the value in the `Username, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`AccountData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountData'
        description: |-
          `Account` information to insert or update.

          The input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Inserted or updated `Account` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "AccessManager:Create, Update"
        - "AccessUser:Create, Update"
      tags:
      - Accounts
    post:
      description: |+
        Use the `AccountData` object resource to create new records.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`

        ### Create a new record of Account
        * If the value in the `Id, Username, ExternalId` fields are empty then action insert a new record according input parameter entity record structure (`AccountData`).
        * If the value in the `Username, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`AccountData`).
        * If the `Id, Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the created record if the call is successful. Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

      operationId: Create Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountData'
        description: |-
          `Account` information to insert.

          The input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Inserted `Account` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Create
        - AccessUser:Create
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Account/{Id}/Tenants:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Tenant` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `UserId, TenantId, AccountId`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Account Tenants
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nUserId, TenantId, AccountId, CreatedOn\n\
          ```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nUserId, TenantId, AccountId, CreatedOn\n\
            ```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenants'
          description: The list of Tenants
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Account/{Id}/Tenant:
    post:
      description: |-
        Use the `TenantPost` object resource to insert or update (Upsert) `Tenant` using `UserId, TenantId.Name` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `TenantData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `UserId, TenantId, AccountId`

        ### Update a record of Tenant
        * If the `UserId` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `UserId` field value (primary key).
        * If the `TenantId.Name` field value is not empty and `UserId` field value is empty, action try insert record according `TenantId.Name` field value (if set, the value is a unique identifier).

        ### Create a new record of Tenant
        * If the value in the `TenantId.Name` and `UserId` fields are empty then action insert a new record according input parameter entity record structure (`TenantData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Tenant` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Account Tenant
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantData'
        description: |-
          `Tenant` information to insert or update.

          The input parameter must be used in the `TenantData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: Inserted or updated `Tenant` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "AccessManager:Create, Update"
        - "AccessUser:Create, Update"
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Account/{Id}/Tenant/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `Tenant` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `UserId, TenantId.Name` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Tenant` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `UserId, TenantId, AccountId`

        ### Delete a record of Tenant
        * If the `UserId` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `UserId, TenantId.Name` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Account Tenant
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the Tenant record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the Tenant record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `UserId`\
          \ field is used.\n\nExample: \n```\nTenantId.Name\n```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `UserId`\
            \ field is used.\n\nExample: \n```\nTenantId.Name\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: Deleted `Tenant` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Delete
        - AccessUser:Delete
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Account/{Id}/Pictures:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Picture` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `AccountId`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Account Pictures
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nAccountId, Filename, Picture, CreatedOn\n\
          ```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nAccountId, Filename, Picture,\
            \ CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pictures'
          description: The list of Pictures
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Account/{Id}/Picture:
    post:
      description: |-
        Use the `PicturePost` object resource to insert or update (Upsert) `Picture` using `AccountId` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `PictureData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `AccountId`

        ### Update a record of Picture
        * If the `AccountId` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `AccountId` field value (primary key).
        * When the AccountId field value is not provided, the system will automatically initiate the insertion of a new record.

        ### Create a new record of Picture
        * If the value in the `AccountId` field is empty then action insert a new record according input parameter entity record structure (`PictureData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Picture` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Account Picture
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PictureData'
        description: |-
          `Picture` information to insert or update.

          The input parameter must be used in the `PictureData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Picture'
          description: Inserted or updated `Picture` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "AccessManager:Create, Update"
        - "AccessUser:Create, Update"
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Account/{Id}/Picture/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `Picture` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `AccountId` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Picture` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `AccountId`

        ### Delete a record of Picture
        * If the `AccountId` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `AccountId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Account Picture
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the Picture record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the Picture record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `AccountId`\
          \ field is used.\n\nExample: \n```\n\n```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `AccountId`\
            \ field is used.\n\nExample: \n```\n\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Picture'
          description: Deleted `Picture` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Delete
        - AccessUser:Delete
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Department/{Id}:
    delete:
      description: |-
        Use the query string resource to delete `Department` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id, Name, ExternalId` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`

        ### Delete a record of Department
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Department
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName, ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName, ExternalId\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: Deleted `Department` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Delete
      tags:
      - Departments
    get:
      description: |-
        The method returns one record of the `Department`.

        Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`

        ### Get a record of Department
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
      operationId: Get Department
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName, ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName, ExternalId\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: The record of `Department` information
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Read
      tags:
      - Departments
    put:
      description: "Use the `DepartmentUpdateData` object resource to update `Department`\
        \ using `Id, Name, ExternalId` field(s) value.\n\nProvide the updated record\
        \ information in your request data and use the `PUT` method of the resource\
        \ with a specific record ID to update that record. \n\nThe input parameter\
        \ must be used in the `DepartmentUpdateData` record structure inside the `FieldType`\
        \ parameter in the foreign key fields.\n\nForeign key fields are: `DepartmentTypeId,\
        \ ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`\n\n### Update\
        \ a record of Department\n* If the `Id` field value is not matched, then a\
        \ `404` error is reported (`Errors/Not Found`), and the error record is returned..\
        \ You cannot change `Id` field value (primary key).\n* If the `Id` field value\
        \ is matched multiple times, then a `400` error is reported (`Errors/Multible\
        \ Rows`), and the error record is returned.\n* If the `Id, Name, ExternalId`\
        \ field value is matched multiple times, then a `400` error is reported (`Errors/Multible\
        \ Rows`), and the error record is returned.\n\nThe response body will contain\
        \ the object of the updated record if the call is successful. Method returns\
        \ an extended `Department` structure. Here, all foreign key fields are abstract\
        \ object structures, utilizing `AbstractText` or `AbstractLong` data types,\
        \ offering a detailed view of the data and related entities."
      operationId: Update Department
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName, ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName, ExternalId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentUpdateData'
        description: |-
          Department information to update.

          The input parameter must be used in the `DepartmentUpdateData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: Updated `Department` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Update
      tags:
      - Departments
  /Endpoint/rest/api/v1/Departments:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Department` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Departments
      parameters:
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, ExternalId, Name, DepartmentTypeId,\
          \ ParentDepartmentId, HierarchicalName, Level, ContactName, ContactEmail,\
          \ ContactPhone, OwnerId, CountryId, Is_Active, ModifiedOn, ModifiedBy, CreatedBy,\
          \ CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, ExternalId, Name, DepartmentTypeId,\
            \ ParentDepartmentId, HierarchicalName, Level, ContactName, ContactEmail,\
            \ ContactPhone, OwnerId, CountryId, Is_Active, ModifiedOn, ModifiedBy,\
            \ CreatedBy, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Departments'
          description: The list of Departments
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Read
      tags:
      - Departments
  /Endpoint/rest/api/v1/Department:
    patch:
      description: |-
        Use the `DepartmentData` object resource to insert or update (Upsert) `Department` using `Id, Name, ExternalId` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `DepartmentData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`

        ### Update a record of Department
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * If the `Name, ExternalId` field value is not empty and `Id` field value is empty, action try insert record according `Name, ExternalId` field value (if set, the value is a unique identifier).

        ### Create a new record of Department
        * If the value in the `Name, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`DepartmentData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Department
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentData'
        description: |-
          `Department` information to insert or update.

          The input parameter must be used in the `DepartmentData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: Inserted or updated `Department` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Department:Create, Update"
      tags:
      - Departments
    post:
      description: |+
        Use the `DepartmentInsertData` object resource to create new records.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `DepartmentInsertData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`

        ### Create a new record of Department
        * If the value in the `Id, Name, ExternalId` fields are empty then action insert a new record according input parameter entity record structure (`DepartmentInsertData`).
        * If the value in the `Name, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`DepartmentInsertData`).
        * If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the created record if the call is successful. Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

      operationId: Create Department
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentInsertData'
        description: |-
          `Department` information to insert.

          The input parameter must be used in the `DepartmentInsertData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: Inserted `Department` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Create
      tags:
      - Departments
  /Endpoint/rest/api/v1/Department/{Id}/Users:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `DepartmentId, UserId, ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Department Users
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, DepartmentId, UserId, ModifiedOn,\
          \ ModifiedBy, CreatedBy, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, DepartmentId, UserId, ModifiedOn,\
            \ ModifiedBy, CreatedBy, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
          description: The list of Users
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Read
      tags:
      - Departments
    patch:
      description: |-
        Use the `UsersData` object resource to insert or update (Upsert) a list of `UserData` using `Id` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `UserList` record structure as text fields in the foreign key fields.

        Foreign key fields are: `DepartmentId, UserId, ModifiedBy, CreatedBy`

        ### Update a record of User
        * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.

        **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.

        ### Create a new record of User
        * If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`UserData`).

        The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.
      operationId: Patch Department Users
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The Delete not exists function delete orphan values from a table.

          If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
        explode: true
        in: query
        name: DeleteNotExists
        required: false
        schema:
          default: "false"
          description: |-
            The Delete not exists function delete orphan values from a table.

            If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersData'
        description: |-
          The list of User information to insert or update.

          The input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.
        required: true
        x-bodyName: Data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: "Inserted or updated list of User information. \n"
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Department:Create, Update"
      tags:
      - Departments
  /Endpoint/rest/api/v1/Department/{Id}/User:
    post:
      description: |-
        Use the `UserPost` object resource to insert or update (Upsert) `User` using `Id` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `UserData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `DepartmentId, UserId, ModifiedBy, CreatedBy`

        ### Update a record of User
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.

        ### Create a new record of User
        * If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`UserData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Department User
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
        description: |-
          `User` information to insert or update.

          The input parameter must be used in the `UserData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Inserted or updated `User` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Department:Create, Update"
      tags:
      - Departments
  /Endpoint/rest/api/v1/Department/{Id}/User/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `User` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `DepartmentId, UserId, ModifiedBy, CreatedBy`

        ### Delete a record of User
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Department User
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\n\n```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\n\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Deleted `User` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Delete
      tags:
      - Departments
  /Endpoint/rest/api/v1/Location/{Id}:
    delete:
      description: |-
        Use the query string resource to delete `Location` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id, Name, ExternalId` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`

        ### Delete a record of Location
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Location
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName,ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName,ExternalId\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: Deleted `Location` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Delete
      tags:
      - Locations
    get:
      description: |-
        The method returns one record of the `Location`.

        Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`

        ### Get a record of Location
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
      operationId: Get Location
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName,ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName,ExternalId\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: The record of `Location` information
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Read
      tags:
      - Locations
    put:
      description: "Use the `LocationUpdateData` object resource to update `Location`\
        \ using `Id, Name, ExternalId` field(s) value.\n\nProvide the updated record\
        \ information in your request data and use the `PUT` method of the resource\
        \ with a specific record ID to update that record. \n\nThe input parameter\
        \ must be used in the `LocationUpdateData` record structure inside the `FieldType`\
        \ parameter in the foreign key fields.\n\nForeign key fields are: `CountryId,\
        \ TimezoneId, CurrencyId, ModifiedBy, CreatedBy`\n\n### Update a record of\
        \ Location\n* If the `Id` field value is not matched, then a `404` error is\
        \ reported (`Errors/Not Found`), and the error record is returned.. You cannot\
        \ change `Id` field value (primary key).\n* If the `Id` field value is matched\
        \ multiple times, then a `400` error is reported (`Errors/Multible Rows`),\
        \ and the error record is returned.\n* If the `Id, Name, ExternalId` field\
        \ value is matched multiple times, then a `400` error is reported (`Errors/Multible\
        \ Rows`), and the error record is returned.\n\nThe response body will contain\
        \ the object of the updated record if the call is successful. Method returns\
        \ an extended `Location` structure. Here, all foreign key fields are abstract\
        \ object structures, utilizing `AbstractText` or `AbstractLong` data types,\
        \ offering a detailed view of the data and related entities."
      operationId: Update Location
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName,ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName,ExternalId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationUpdateData'
        description: |-
          Location information to update.

          The input parameter must be used in the `LocationUpdateData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: Updated `Location` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Update
      tags:
      - Locations
  /Endpoint/rest/api/v1/Locations:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Location` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Locations
      parameters:
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, ExternalId, Name, CountryId, TimezoneId,\
          \ CurrencyId, Is_Active, ModifiedOn, ModifiedBy, CreatedBy, CreatedOn\n\
          ```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, ExternalId, Name, CountryId,\
            \ TimezoneId, CurrencyId, Is_Active, ModifiedOn, ModifiedBy, CreatedBy,\
            \ CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locations'
          description: The list of Locations
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Read
      tags:
      - Locations
  /Endpoint/rest/api/v1/Location:
    patch:
      description: |-
        Use the `LocationData` object resource to insert or update (Upsert) `Location` using `Id, Name, ExternalId` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `LocationData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`

        ### Update a record of Location
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * If the `Name,ExternalId` field value is not empty and `Id` field value is empty, action try insert record according `Name,ExternalId` field value (if set, the value is a unique identifier).

        ### Create a new record of Location
        * If the value in the `Name,ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`LocationData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Location
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationData'
        description: |-
          `Location` information to insert or update.

          The input parameter must be used in the `LocationData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: Inserted or updated `Location` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Location:Create, Update"
      tags:
      - Locations
    post:
      description: |+
        Use the `LocationInsertData` object resource to create new records.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `LocationInsertData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`

        ### Create a new record of Location
        * If the value in the `Id, Name, ExternalId` fields are empty then action insert a new record according input parameter entity record structure (`LocationInsertData`).
        * If the value in the `Name,ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`LocationInsertData`).
        * If the `Id, Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the created record if the call is successful. Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

      operationId: Create Location
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationInsertData'
        description: |-
          `Location` information to insert.

          The input parameter must be used in the `LocationInsertData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: Inserted `Location` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Create
      tags:
      - Locations
  /Endpoint/rest/api/v1/Location/{Id}/Users:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `LocationId, UserId, ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Location Users
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, LocationId, UserId, ModifiedOn,\
          \ ModifiedBy, CreatedBy, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, LocationId, UserId, ModifiedOn,\
            \ ModifiedBy, CreatedBy, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
          description: The list of Users
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Read
      tags:
      - Locations
    patch:
      description: |-
        Use the `UsersData` object resource to insert or update (Upsert) a list of `UserData` using `Id` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `UserList` record structure as text fields in the foreign key fields.

        Foreign key fields are: `LocationId, UserId, ModifiedBy, CreatedBy`

        ### Update a record of User
        * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.

        **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.

        ### Create a new record of User
        * If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`UserData`).

        The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.
      operationId: Patch Location Users
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The Delete not exists function delete orphan values from a table.

          If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
        explode: true
        in: query
        name: DeleteNotExists
        required: false
        schema:
          default: "false"
          description: |-
            The Delete not exists function delete orphan values from a table.

            If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersData'
        description: |-
          The list of User information to insert or update.

          The input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.
        required: true
        x-bodyName: Data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: "Inserted or updated list of User information. \n"
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Location:Create, Update"
      tags:
      - Locations
  /Endpoint/rest/api/v1/Location/{Id}/User:
    post:
      description: |-
        Use the `UserPost` object resource to insert or update (Upsert) `User` using `Id` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `UserData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `LocationId, UserId, ModifiedBy, CreatedBy`

        ### Update a record of User
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.

        ### Create a new record of User
        * If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`UserData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Location User
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
        description: |-
          `User` information to insert or update.

          The input parameter must be used in the `UserData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Inserted or updated `User` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Location:Create, Update"
      tags:
      - Locations
  /Endpoint/rest/api/v1/Location/{Id}/User/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `User` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `LocationId, UserId, ModifiedBy, CreatedBy`

        ### Delete a record of User
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Location User
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\n\n```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\n\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Deleted `User` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Delete
      tags:
      - Locations
  /Endpoint/rest/api/v1/Connection/{Id}:
    delete:
      description: |-
        Use the query string resource to delete `Connection` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id, Name` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `ModifiedBy, CreatedBy`

        ### Delete a record of Connection
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, Name` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Connection
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: Deleted `Connection` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Delete
      tags:
      - Connections
    get:
      description: |-
        The method returns one record of the `Connection`.

        Method returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `ModifiedBy, CreatedBy`

        ### Get a record of Connection
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id, Name` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
      operationId: Get Connection
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: The record of `Connection` information
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Read
      tags:
      - Connections
    put:
      description: "Use the `ConnectionData` object resource to update `Connection`\
        \ using `Id, Name` field(s) value.\n\nProvide the updated record information\
        \ in your request data and use the `PUT` method of the resource with a specific\
        \ record ID to update that record. \n\nThe input parameter must be used in\
        \ the `ConnectionData` record structure inside the `FieldType` parameter in\
        \ the foreign key fields.\n\nForeign key fields are: `ModifiedBy, CreatedBy`\n\
        \n### Update a record of Connection\n* If the `Id` field value is not matched,\
        \ then a `404` error is reported (`Errors/Not Found`), and the error record\
        \ is returned.. You cannot change `Id` field value (primary key).\n* If the\
        \ `Id` field value is matched multiple times, then a `400` error is reported\
        \ (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id,\
        \ Name` field value is matched multiple times, then a `400` error is reported\
        \ (`Errors/Multible Rows`), and the error record is returned.\n\nThe response\
        \ body will contain the object of the updated record if the call is successful.\
        \ Method returns an extended `Connection` structure. Here, all foreign key\
        \ fields are abstract object structures, utilizing `AbstractText` or `AbstractLong`\
        \ data types, offering a detailed view of the data and related entities."
      operationId: Update Connection
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionData'
        description: |-
          Connection information to update.

          The input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: Updated `Connection` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Update
      tags:
      - Connections
  /Endpoint/rest/api/v1/Connections:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Connection` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Connections
      parameters:
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, Name, Description, ApiKey, SecretKey,\
          \ URL, Is_Active, Is_System, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn\n\
          ```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, Name, Description, ApiKey,\
            \ SecretKey, URL, Is_Active, Is_System, ModifiedBy, ModifiedOn, CreatedBy,\
            \ CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connections'
          description: The list of Connections
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Read
      tags:
      - Connections
  /Endpoint/rest/api/v1/Connection:
    patch:
      description: |-
        Use the `ConnectionData` object resource to insert or update (Upsert) `Connection` using `Id, Name` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `ModifiedBy, CreatedBy`

        ### Update a record of Connection
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * If the `Name` field value is not empty and `Id` field value is empty, action try insert record according `Name` field value (if set, the value is a unique identifier).

        ### Create a new record of Connection
        * If the value in the `Name` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`ConnectionData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Connection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionData'
        description: |-
          `Connection` information to insert or update.

          The input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: Inserted or updated `Connection` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Webhook:Create, Update"
      tags:
      - Connections
    post:
      description: |+
        Use the `ConnectionData` object resource to create new records.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `ModifiedBy, CreatedBy`

        ### Create a new record of Connection
        * If the value in the `Id, Name` fields are empty then action insert a new record according input parameter entity record structure (`ConnectionData`).
        * If the value in the `Name` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`ConnectionData`).
        * If the `Id, Name` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the created record if the call is successful. Method returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

      operationId: Create Connection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionData'
        description: |-
          `Connection` information to insert.

          The input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: Inserted `Connection` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Create
      tags:
      - Connections
  /Endpoint/rest/api/v1/Connection/{Id}/Configs:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Config` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Connection Configs
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, WebhookConnectionId, WebhookEntityId,\
          \ HasCreateAccess, HasUpdateAccess, HasDeleteAccess, Is_Active, ModifiedBy,\
          \ ModifiedOn, CreatedBy, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, WebhookConnectionId, WebhookEntityId,\
            \ HasCreateAccess, HasUpdateAccess, HasDeleteAccess, Is_Active, ModifiedBy,\
            \ ModifiedOn, CreatedBy, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configs'
          description: The list of Configs
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Read
      tags:
      - Connections
    patch:
      description: |-
        Use the `ConfigsData` object resource to insert or update (Upsert) a list of `ConfigData` using `Id` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `ConfigList` record structure as text fields in the foreign key fields.

        Foreign key fields are: `WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy`

        ### Update a record of Config
        * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.

        **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.

        ### Create a new record of Config
        * If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`ConfigData`).

        The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `Config` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.
      operationId: Patch Connection Configs
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The Delete not exists function delete orphan values from a table.

          If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
        explode: true
        in: query
        name: DeleteNotExists
        required: false
        schema:
          default: "false"
          description: |-
            The Delete not exists function delete orphan values from a table.

            If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigsData'
        description: |-
          The list of Config information to insert or update.

          The input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.
        required: true
        x-bodyName: Data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: "Inserted or updated list of Config information. \n"
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Webhook:Create, Update"
      tags:
      - Connections
  /Endpoint/rest/api/v1/Connection/{Id}/Config:
    post:
      description: |-
        Use the `ConfigPost` object resource to insert or update (Upsert) `Config` using `Id` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `ConfigData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy`

        ### Update a record of Config
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.

        ### Create a new record of Config
        * If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`ConfigData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Config` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Connection Config
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigData'
        description: |-
          `Config` information to insert or update.

          The input parameter must be used in the `ConfigData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: Inserted or updated `Config` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Webhook:Create, Update"
      tags:
      - Connections
  /Endpoint/rest/api/v1/Connection/{Id}/Config/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `Config` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Config` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy`

        ### Delete a record of Config
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Connection Config
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the Config record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the Config record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\n\n```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\n\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: Deleted `Config` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Delete
      tags:
      - Connections
  /Endpoint/rest/api/v1/Entity/{Id}:
    get:
      description: |-
        The method returns one record of the `Entity`.

        Method returns an extended `Entity` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `InternalConfigId`

        ### Get a record of Entity
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
      operationId: Get Entity
      parameters:
      - description: |-
          The identifier of the Entity record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Entity record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\n\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\n\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: The record of `Entity` information
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Read
      tags:
      - Entities
  /Endpoint/rest/api/v1/Entities:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Entity` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `InternalConfigId`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Entities
      parameters:
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, Name, Application, InternalConfigId,\
          \ Is_Active, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, Name, Application, InternalConfigId,\
            \ Is_Active, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entities'
          description: The list of Entities
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Read
      tags:
      - Entities
components:
  responses:
    "400":
      content:
        application/json:
          example:
            Errors:
            - The user has provided input that the browser is unable to convert.
            - There are multiple rows in the database for the same value
            - The value does not match the specified entity structure
            - '...'
            Type: /Errors/Bad Input
            Title: Bad Request
            StatusCode: 400
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request - The user has provided input that the browser is unable
        to convert.
    "401":
      content:
        application/json:
          example:
            Errors:
            - The session Id or OAuth token used has expired or is invalid.
            Type: /Errors/Unauthorized
            Title: Unauthorized
            StatusCode: 401
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized - The response status code indicates that the client
        request has not been completed because it lacks valid authentication credentials
        for the requested resource.
    "403":
      content:
        application/json:
          example:
            Errors:
            - The user does not have access to execute operation
            Type: /Errors/Permission
            Title: Bad Request
            StatusCode: 403
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden - The user does not have access to execute operation
    "404":
      content:
        application/json:
          example:
            Errors:
            - The requested resource does not exist
            Type: /Errors/Not Found
            Title: Not Found
            StatusCode: 404
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found - The requested resource does not exist.
    "500":
      content:
        application/json:
          example:
            Errors:
            - An internal server error is an error on the web server you're trying
              to access.
            Type: /Errors/Internal Server Error
            Title: Internal Server Error
            StatusCode: 500
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal Server Error - An internal server error is an error on
        the web server you're trying to access.
  schemas:
    Meta:
      description: The object provides metadata about the list of items returned in
        the API response. It typically includes information that helps clients understand
        and work with the data.
      example:
        Type: User
        PageSize: 50
        CurrentPage: 50
        TotalItems: 1000
      properties:
        TotalItems:
          default: 0
          description: "This field represents the total number of items available\
            \ in the entire dataset, not just the items returned in the current response.\
            \ It's useful for implementing pagination, as clients can use it to calculate\
            \ the number of pages or total available items."
          example: 1000
          format: int32
          type: integer
        CurrentPage:
          default: 1
          description: This field specifies the current page of results being returned.
            It's often used in conjunction with `PageSize` to manage pagination by
            indicating which subset of the total data is currently being retrieved.
          example: 50
          format: int32
          type: integer
        PageSize:
          default: 50
          description: The field indicates the number of items returned in a single
            page or response. It helps clients determine how many items to display
            per page and how to request additional pages if needed.
          example: 50
          format: int32
          type: integer
        Type:
          description: The type of the record
          example: User
          type: string
      required:
      - CurrentPage
      - PageSize
      - TotalItems
      - Type
      type: object
    Error:
      description: The list of errors. Throw specific exceptions based on the received
        error.
      example:
        Type: ""
        Instance: ""
        RequestKey: ""
        Error:
        - ""
        - ""
        Title: ""
        StatusCode: 400
      properties:
        Error:
          description: Human-readable explanation of the errors
          items:
            default: ""
            type: string
          type: array
        Type:
          default: ""
          description: URI identifier that categorizes the error
          type: string
        Title:
          default: ""
          description: "Brief, human-readable message about the error"
          type: string
        StatusCode:
          description: The HTTP response code
          example: 400
          format: int32
          type: integer
        Instance:
          default: ""
          description: URI that identifies the specific occurrence of the error
          type: string
        RequestKey:
          default: ""
          description: Provides a request key that identifies the current request.
          type: string
      required:
      - Errors
      - StatusCode
      type: object
    Account:
      description: The record of Account information.
      example:
        Email: Email
        ModifiedOn: 1900-01-01T00:00:00Z
        FirstName: FirstName
        NotifyByEmail: false
        ExternalId: ExternalId
        TimezoneId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        NotifyBySMS: false
        Name: Name
        TenantId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Is_Active: false
        Username: Username
        Phone: Phone
        DateFormatId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        Id: Id
        LastName: LastName
        CreatedOn: 1900-01-01T00:00:00Z
        LanguageId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
      properties:
        Id:
          description: The identifier of account
          type: string
        TenantId:
          $ref: '#/components/schemas/AbstractLong'
        Name:
          description: The name of the account
          type: string
        FirstName:
          description: Person's first name
          type: string
        LastName:
          description: Person's last name
          type: string
        Phone:
          description: The phone number of account. The phone number is unique in
            the system
          type: string
        Email:
          description: The e-mail of account. The email is unique in the system
          type: string
        LanguageId:
          $ref: '#/components/schemas/AbstractText'
        TimezoneId:
          $ref: '#/components/schemas/AbstractText'
        DateFormatId:
          $ref: '#/components/schemas/AbstractText'
        Username:
          description: Username used to log in into the system. The username is unique
            in the system
          type: string
        ExternalId:
          description: External Authentication identifier. Example Azure AD guid
          type: string
        NotifyByEmail:
          default: false
          description: Defines if a person should get notifications via e-mail
          example: false
          type: boolean
        NotifyBySMS:
          default: false
          description: Defines if a contact should get notifications via SMS
          example: false
          type: boolean
        Is_Active:
          default: false
          description: Defines if the account is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Email
      - FirstName
      - Id
      - LastName
      - Username
      type: object
    AbstractLong:
      description: This structure represents an abstract object with a primary key
        of type Long. It is used to encapsulate detailed information about related
        entities.
      example:
        Type: User
        ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
        Id: 1234567891234567
        Name: Bob Normal
      properties:
        Id:
          default: 0
          description: The primary key of the record. It uniquely identifies each
            record within the dataset. This attribute is required and must be unique
            across all records.
          example: 1234567891234567
          format: int64
          type: integer
        ExternalId:
          description: "An external identifier for the record, which can be used to\
            \ link the record to external systems or datasets. This attribute is optional\
            \ but should be unique if provided."
          example: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          type: string
        Name:
          description: "The name of the record. This attribute provides a human-readable\
            \ identifier for the record, making it easier to recognize and differentiate\
            \ records in lists or other displays. This attribute is optional."
          example: Bob Normal
          type: string
        Type:
          description: "The type of the record object. This attribute is used to classify\
            \ the record into specific categories or types, helping to organize and\
            \ manage different kinds of records. This attribute is optional."
          example: User
          type: string
      required:
      - Id
      type: object
    AbstractText:
      description: This structure represents an abstract object with a primary key
        of type Text. It is used to encapsulate detailed information about related
        entities.
      example:
        Type: User
        ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
        Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
        Name: Bob Normal
      properties:
        Id:
          description: The primary key of the record. It uniquely identifies each
            record within the dataset. This attribute is required and must be unique
            across all records.
          example: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          type: string
        ExternalId:
          description: "An external identifier for the record, which can be used to\
            \ link the record to external systems or datasets. This attribute is optional\
            \ but should be unique if provided."
          example: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          type: string
        Name:
          description: "The name of the record. This attribute provides a human-readable\
            \ identifier for the record, making it easier to recognize and differentiate\
            \ records in lists or other displays. This attribute is optional."
          example: Bob Normal
          type: string
        Type:
          description: "The type of the record object. This attribute is used to classify\
            \ the record into specific categories or types, helping to organize and\
            \ manage different kinds of records. This attribute is optional."
          example: User
          type: string
      required:
      - Id
      type: object
    Accounts:
      description: The list of `Account` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - Email: Email
          ModifiedOn: 1900-01-01T00:00:00Z
          FirstName: FirstName
          NotifyByEmail: false
          ExternalId: ExternalId
          TimezoneId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          NotifyBySMS: false
          Name: Name
          TenantId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          Username: Username
          Phone: Phone
          DateFormatId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Id: Id
          LastName: LastName
          CreatedOn: 1900-01-01T00:00:00Z
          LanguageId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
        - Email: Email
          ModifiedOn: 1900-01-01T00:00:00Z
          FirstName: FirstName
          NotifyByEmail: false
          ExternalId: ExternalId
          TimezoneId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          NotifyBySMS: false
          Name: Name
          TenantId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          Username: Username
          Phone: Phone
          DateFormatId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Id: Id
          LastName: LastName
          CreatedOn: 1900-01-01T00:00:00Z
          LanguageId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Account records`
          items:
            $ref: '#/components/schemas/Account'
          type: array
      type: object
    EnumLanguage:
      description: The enum of Language.
      enum:
      - ar-ae
      - bn-IN
      - zh-CN
      - da-dk
      - en-US
      - fo-fo
      - fi-FI
      - fr-FR
      - de-DE
      - hi-IN
      - ja-JP
      - ko-KR
      - ms-MY
      - pt-PT
      - ru-RU
      - es-ES
      - sv-se
      - tr-TR
      - ur-IN
      type: string
      x-enums:
      - value: ar-ae
        name: Arabic
        description: Arabic
        isString: true
      - value: bn-IN
        name: Bengali
        description: Bengali
        isString: true
      - value: zh-CN
        name: Chinese
        description: Chinese
        isString: true
      - value: da-dk
        name: Danish
        description: Danish
        isString: true
      - value: en-US
        name: English
        description: English
        isString: true
      - value: fo-fo
        name: Faroese
        description: Faroese
        isString: true
      - value: fi-FI
        name: Finnish
        description: Finnish
        isString: true
      - value: fr-FR
        name: French
        description: French
        isString: true
      - value: de-DE
        name: German
        description: German
        isString: true
      - value: hi-IN
        name: Hindi
        description: Hindi
        isString: true
      - value: ja-JP
        name: Japanese
        description: Japanese
        isString: true
      - value: ko-KR
        name: Korean
        description: Korean
        isString: true
      - value: ms-MY
        name: Malay
        description: Malay
        isString: true
      - value: pt-PT
        name: Portuguese
        description: Portuguese
        isString: true
      - value: ru-RU
        name: Russian
        description: Russian
        isString: true
      - value: es-ES
        name: Spanish
        description: Spanish
        isString: true
      - value: sv-se
        name: Swedish
        description: Swedish
        isString: true
      - value: tr-TR
        name: Turkish
        description: Turkish
        isString: true
      - value: ur-IN
        name: Urdu
        description: Urdu
        isString: true
    EnumTimezone:
      description: The enum of Timezone.
      enum:
      - Afghanistan Standard Time
      - Alaskan Standard Time
      - Arab Standard Time
      - Arabian Standard Time
      - Arabic Standard Time
      - Argentina Standard Time
      - Atlantic Standard Time
      - AUS Central Standard Time
      - AUS Eastern Standard Time
      - Azerbaijan Standard Time
      - Azores Standard Time
      - Canada Central Standard Time
      - Cape Verde Standard Time
      - Caucasus Standard Time
      - Cen. Australia Standard Time
      - Central America Standard Time
      - Central Asia Standard Time
      - Central Brazilian Standard Time
      - Central Europe Standard Time
      - Central European Standard Time
      - Central Pacific Standard Time
      - Central Standard Time
      - Central Standard Time (Mexico)
      - China Standard Time
      - Dateline Standard Time
      - E. Africa Standard Time
      - E. Australia Standard Time
      - E. Europe Standard Time
      - E. South America Standard Time
      - Eastern Standard Time
      - Egypt Standard Time
      - Ekaterinburg Standard Time
      - Fiji Standard Time
      - FLE Standard Time
      - Georgian Standard Time
      - GMT Standard Time
      - Greenland Standard Time
      - Greenwich Standard Time
      - GTB Standard Time
      - Hawaiian Standard Time
      - India Standard Time
      - Iran Standard Time
      - Israel Standard Time
      - Jordan Standard Time
      - Korea Standard Time
      - Mauritius Standard Time
      - Mid-Atlantic Standard Time
      - Middle East Standard Time
      - Montevideo Standard Time
      - Morocco Standard Time
      - Mountain Standard Time
      - Mountain Standard Time (Mexico)
      - Myanmar Standard Time
      - N. Central Asia Standard Time
      - Namibia Standard Time
      - Nepal Standard Time
      - New Zealand Standard Time
      - Newfoundland Standard Time
      - North Asia East Standard Time
      - North Asia Standard Time
      - Pacific SA Standard Time
      - Pacific Standard Time
      - Pacific Standard Time (Mexico)
      - Pakistan Standard Time
      - Romance Standard Time
      - Russian Standard Time
      - SA Eastern Standard Time
      - SA Pacific Standard Time
      - SA Western Standard Time
      - Samoa Standard Time
      - SE Asia Standard Time
      - Singapore Standard Time
      - South Africa Standard Time
      - Sri Lanka Standard Time
      - Taipei Standard Time
      - Tasmania Standard Time
      - Tokyo Standard Time
      - Tonga Standard Time
      - US Eastern Standard Time
      - US Mountain Standard Time
      - UTC
      - Venezuela Standard Time
      - Vladivostok Standard Time
      - W. Australia Standard Time
      - W. Central Africa Standard Time
      - W. Europe Standard Time
      - West Asia Standard Time
      - West Pacific Standard Time
      - Yakutsk Standard Time
      type: string
      x-enums:
      - value: Afghanistan Standard Time
        name: Gmt0430Kabul
        description: (GMT+04:30) Kabul
        isString: true
      - value: Alaskan Standard Time
        name: Gmt0900Alaska
        description: (GMT-09:00) Alaska
        isString: true
      - value: Arab Standard Time
        name: Gmt0300KuwaitRiyadh
        description: "(GMT+03:00) Kuwait, Riyadh"
        isString: true
      - value: Arabian Standard Time
        name: Gmt0400AbuDhabiMuscat
        description: "(GMT+04:00) Abu Dhabi, Muscat"
        isString: true
      - value: Arabic Standard Time
        name: Gmt0300Baghdad
        description: (GMT+03:00) Baghdad
        isString: true
      - value: Argentina Standard Time
        name: Gmt0300BuenosAires
        description: (GMT-03:00) Buenos Aires
        isString: true
      - value: Atlantic Standard Time
        name: Gmt0400AtlanticTimeCanada
        description: (GMT-04:00) Atlantic Time (Canada)
        isString: true
      - value: AUS Central Standard Time
        name: Gmt0930Darwin
        description: (GMT+09:30) Darwin
        isString: true
      - value: AUS Eastern Standard Time
        name: Gmt1000CanberraMelbourneSydney
        description: "(GMT+10:00) Canberra, Melbourne, Sydney"
        isString: true
      - value: Azerbaijan Standard Time
        name: Gmt0400Baku
        description: (GMT+04:00) Baku
        isString: true
      - value: Azores Standard Time
        name: Gmt0100Azores
        description: (GMT-01:00) Azores
        isString: true
      - value: Canada Central Standard Time
        name: Gmt0600Saskatchewan
        description: (GMT-06:00) Saskatchewan
        isString: true
      - value: Cape Verde Standard Time
        name: Gmt0100CapeVerdeIs
        description: (GMT-01:00) Cape Verde Is.
        isString: true
      - value: Caucasus Standard Time
        name: Gmt0400Yerevan
        description: (GMT+04:00) Yerevan
        isString: true
      - value: Cen. Australia Standard Time
        name: Gmt0930Adelaide
        description: (GMT+09:30) Adelaide
        isString: true
      - value: Central America Standard Time
        name: Gmt0600CentralAmerica
        description: (GMT-06:00) Central America
        isString: true
      - value: Central Asia Standard Time
        name: Gmt0600AstanaDhaka
        description: "(GMT+06:00) Astana, Dhaka"
        isString: true
      - value: Central Brazilian Standard Time
        name: Gmt0400Manaus
        description: (GMT-04:00) Manaus
        isString: true
      - value: Central Europe Standard Time
        name: Gmt0100BelgradeBratislavaBudapestLjubljanaPrague
        description: "(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague"
        isString: true
      - value: Central European Standard Time
        name: Gmt0100SarajevoSkopjeWarsawZagreb
        description: "(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb"
        isString: true
      - value: Central Pacific Standard Time
        name: Gmt1100MagadanSolomonIsNewCaledonia
        description: "(GMT+11:00) Magadan, Solomon Is., New Caledonia"
        isString: true
      - value: Central Standard Time
        name: Gmt0600CentralTimeUsCanada
        description: (GMT-06:00) Central Time (US & Canada)
        isString: true
      - value: Central Standard Time (Mexico)
        name: Gmt0600GuadalajaraMexicoCityMonterrey
        description: "(GMT-06:00) Guadalajara, Mexico City, Monterrey"
        isString: true
      - value: China Standard Time
        name: Gmt0800BeijingChongqingHongKongUrumqi
        description: "(GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi"
        isString: true
      - value: Dateline Standard Time
        name: Gmt1200InternationalDateLineWest
        description: (GMT-12:00) International Date Line West
        isString: true
      - value: E. Africa Standard Time
        name: Gmt0300Nairobi
        description: (GMT+03:00) Nairobi
        isString: true
      - value: E. Australia Standard Time
        name: Gmt1000Brisbane
        description: (GMT+10:00) Brisbane
        isString: true
      - value: E. Europe Standard Time
        name: Gmt0200Minsk
        description: (GMT+02:00) Minsk
        isString: true
      - value: E. South America Standard Time
        name: Gmt0300Brasilia
        description: (GMT-03:00) Brasilia
        isString: true
      - value: Eastern Standard Time
        name: Gmt0500EasternTimeUsCanada
        description: (GMT-05:00) Eastern Time (US & Canada)
        isString: true
      - value: Egypt Standard Time
        name: Gmt0200Cairo
        description: (GMT+02:00) Cairo
        isString: true
      - value: Ekaterinburg Standard Time
        name: Gmt0500Ekaterinburg
        description: (GMT+05:00) Ekaterinburg
        isString: true
      - value: Fiji Standard Time
        name: Gmt1200FijiKamchatkaMarshallIs
        description: "(GMT+12:00) Fiji, Kamchatka, Marshall Is."
        isString: true
      - value: FLE Standard Time
        name: Gmt0200HelsinkiKyivRigaSofiaTallinnVilnius
        description: "(GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius"
        isString: true
      - value: Georgian Standard Time
        name: Gmt0300Tbilisi
        description: (GMT+03:00) Tbilisi
        isString: true
      - value: GMT Standard Time
        name: GmtGreenwichMeanTimeDublinEdinburghLisbonLondon
        description: "(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London"
        isString: true
      - value: Greenland Standard Time
        name: Gmt0300Greenland
        description: (GMT-03:00) Greenland
        isString: true
      - value: Greenwich Standard Time
        name: GmtMonroviaReykjavik
        description: "(GMT) Monrovia, Reykjavik"
        isString: true
      - value: GTB Standard Time
        name: Gmt0200AthensBucharestIstanbul
        description: "(GMT+02:00) Athens, Bucharest, Istanbul"
        isString: true
      - value: Hawaiian Standard Time
        name: Gmt1000Hawaii
        description: (GMT-10:00) Hawaii
        isString: true
      - value: India Standard Time
        name: Gmt0530ChennaiKolkataMumbaiNewDelhi
        description: "(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi"
        isString: true
      - value: Iran Standard Time
        name: Gmt0330Tehran
        description: (GMT+03:30) Tehran
        isString: true
      - value: Israel Standard Time
        name: Gmt0200Jerusalem
        description: (GMT+02:00) Jerusalem
        isString: true
      - value: Jordan Standard Time
        name: Gmt0200Amman
        description: (GMT+02:00) Amman
        isString: true
      - value: Korea Standard Time
        name: Gmt0900Seoul
        description: (GMT+09:00) Seoul
        isString: true
      - value: Mauritius Standard Time
        name: Gmt0400PortLouis
        description: (GMT+04:00) Port Louis
        isString: true
      - value: Mid-Atlantic Standard Time
        name: Gmt0200MidAtlantic
        description: (GMT-02:00) Mid-Atlantic
        isString: true
      - value: Middle East Standard Time
        name: Gmt0200Beirut
        description: (GMT+02:00) Beirut
        isString: true
      - value: Montevideo Standard Time
        name: Gmt0300Montevideo
        description: (GMT-03:00) Montevideo
        isString: true
      - value: Morocco Standard Time
        name: GmtCasablanca
        description: (GMT) Casablanca
        isString: true
      - value: Mountain Standard Time
        name: Gmt0700MountainTimeUsCanada
        description: (GMT-07:00) Mountain Time (US & Canada)
        isString: true
      - value: Mountain Standard Time (Mexico)
        name: Gmt0700ChihuahuaLaPazMazatlan
        description: "(GMT-07:00) Chihuahua, La Paz, Mazatlan"
        isString: true
      - value: Myanmar Standard Time
        name: Gmt0630YangonRangoon
        description: (GMT+06:30) Yangon (Rangoon)
        isString: true
      - value: N. Central Asia Standard Time
        name: Gmt0600AlmatyNovosibirsk
        description: "(GMT+06:00) Almaty, Novosibirsk"
        isString: true
      - value: Namibia Standard Time
        name: Gmt0200Windhoek
        description: (GMT+02:00) Windhoek
        isString: true
      - value: Nepal Standard Time
        name: Gmt0545Kathmandu
        description: (GMT+05:45) Kathmandu
        isString: true
      - value: New Zealand Standard Time
        name: Gmt1200AucklandWellington
        description: "(GMT+12:00) Auckland, Wellington"
        isString: true
      - value: Newfoundland Standard Time
        name: Gmt0330Newfoundland
        description: (GMT-03:30) Newfoundland
        isString: true
      - value: North Asia East Standard Time
        name: Gmt0800IrkutskUlaanBataar
        description: "(GMT+08:00) Irkutsk, Ulaan Bataar"
        isString: true
      - value: North Asia Standard Time
        name: Gmt0700Krasnoyarsk
        description: (GMT+07:00) Krasnoyarsk
        isString: true
      - value: Pacific SA Standard Time
        name: Gmt0400Santiago
        description: (GMT-04:00) Santiago
        isString: true
      - value: Pacific Standard Time
        name: Gmt0800PacificTimeUsCanada
        description: (GMT-08:00) Pacific Time (US & Canada)
        isString: true
      - value: Pacific Standard Time (Mexico)
        name: Gmt0800TijuanaBajaCalifornia
        description: "(GMT-08:00) Tijuana, Baja California"
        isString: true
      - value: Pakistan Standard Time
        name: Gmt0500IslamabadKarachi
        description: "(GMT+05:00) Islamabad, Karachi"
        isString: true
      - value: Romance Standard Time
        name: Gmt0100BrusselsCopenhagenMadridParis
        description: "(GMT+01:00) Brussels, Copenhagen, Madrid, Paris"
        isString: true
      - value: Russian Standard Time
        name: Gmt0300MoscowStPetersburgVolgograd
        description: "(GMT+03:00) Moscow, St. Petersburg, Volgograd"
        isString: true
      - value: SA Eastern Standard Time
        name: Gmt0300Georgetown
        description: (GMT-03:00) Georgetown
        isString: true
      - value: SA Pacific Standard Time
        name: Gmt0500BogotaLimaQuitoRioBranco
        description: "(GMT-05:00) Bogota, Lima, Quito, Rio Branco"
        isString: true
      - value: SA Western Standard Time
        name: Gmt0400LaPaz
        description: (GMT-04:00) La Paz
        isString: true
      - value: Samoa Standard Time
        name: Gmt1100MidwayIslandSamoa
        description: "(GMT-11:00) Midway Island, Samoa"
        isString: true
      - value: SE Asia Standard Time
        name: Gmt0700BangkokHanoiJakarta
        description: "(GMT+07:00) Bangkok, Hanoi, Jakarta"
        isString: true
      - value: Singapore Standard Time
        name: Gmt0800KualaLumpurSingapore
        description: "(GMT+08:00) Kuala Lumpur, Singapore"
        isString: true
      - value: South Africa Standard Time
        name: Gmt0200HararePretoria
        description: "(GMT+02:00) Harare, Pretoria"
        isString: true
      - value: Sri Lanka Standard Time
        name: Gmt0530SriJayawardenepura
        description: (GMT+05:30) Sri Jayawardenepura
        isString: true
      - value: Taipei Standard Time
        name: Gmt0800Taipei
        description: (GMT+08:00) Taipei
        isString: true
      - value: Tasmania Standard Time
        name: Gmt1000Hobart
        description: (GMT+10:00) Hobart
        isString: true
      - value: Tokyo Standard Time
        name: Gmt0900OsakaSapporoTokyo
        description: "(GMT+09:00) Osaka, Sapporo, Tokyo"
        isString: true
      - value: Tonga Standard Time
        name: Gmt1300NukuAlofa
        description: (GMT+13:00) Nuku'alofa
        isString: true
      - value: US Eastern Standard Time
        name: Gmt0500IndianaEast
        description: (GMT-05:00) Indiana (East)
        isString: true
      - value: US Mountain Standard Time
        name: Gmt0700Arizona
        description: (GMT-07:00) Arizona
        isString: true
      - value: UTC
        name: Utc
        description: UTC
        isString: true
      - value: Venezuela Standard Time
        name: Gmt0430Caracas
        description: (GMT-04:30) Caracas
        isString: true
      - value: Vladivostok Standard Time
        name: Gmt1000Vladivostok
        description: (GMT+10:00) Vladivostok
        isString: true
      - value: W. Australia Standard Time
        name: Gmt0800Perth
        description: (GMT+08:00) Perth
        isString: true
      - value: W. Central Africa Standard Time
        name: Gmt0100WestCentralAfrica
        description: (GMT+01:00) West Central Africa
        isString: true
      - value: W. Europe Standard Time
        name: Gmt0100AmsterdamBerlinBernRomeStockholmVienna
        description: "(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna"
        isString: true
      - value: West Asia Standard Time
        name: Gmt0500Tashkent
        description: (GMT+05:00) Tashkent
        isString: true
      - value: West Pacific Standard Time
        name: Gmt1000GuamPortMoresby
        description: "(GMT+10:00) Guam, Port Moresby"
        isString: true
      - value: Yakutsk Standard Time
        name: Gmt0900Yakutsk
        description: (GMT+09:00) Yakutsk
        isString: true
    EnumDateFormat:
      description: The enum of DateFormat.
      enum:
      - DD-MM-YYYY
      - DD/MM/YYYY
      - DD.MM.YYYY
      - MM-DD-YYYY
      - MM/DD/YYYY
      - YYYY-MM-DD
      - YYYY/MM/DD
      type: string
      x-enums:
      - value: DD-MM-YYYY
        name: DdMmYyyy
        description: DD-MM-YYYY
        isString: true
      - value: DD/MM/YYYY
        name: DdMmYyyy_1
        description: DD/MM/YYYY
        isString: true
      - value: DD.MM.YYYY
        name: DdMmYyyy_2
        description: DD.MM.YYYY
        isString: true
      - value: MM-DD-YYYY
        name: MmDdYyyy
        description: MM-DD-YYYY
        isString: true
      - value: MM/DD/YYYY
        name: MmDdYyyy_1
        description: MM/DD/YYYY
        isString: true
      - value: YYYY-MM-DD
        name: YyyyMmDd
        description: YYYY-MM-DD
        isString: true
      - value: YYYY/MM/DD
        name: YyyyMmDd_1
        description: YYYY/MM/DD
        isString: true
    AccountData:
      description: The record of Account information.
      example:
        Email: Email
        ModifiedOn: 1900-01-01T00:00:00Z
        FirstName: FirstName
        NotifyByEmail: false
        ExternalId: ExternalId
        TimezoneId: Afghanistan Standard Time
        NotifyBySMS: false
        Name: Name
        TenantId:
          Field: Field
          Value: Value
        Is_Active: false
        Username: Username
        Phone: Phone
        DateFormatId: DD-MM-YYYY
        Id: Id
        LastName: LastName
        CreatedOn: 1900-01-01T00:00:00Z
        LanguageId: ar-ae
      properties:
        Id:
          description: The identifier of account.
          type: string
        TenantId:
          $ref: '#/components/schemas/FieldType'
        Name:
          description: The name of the account.
          type: string
        FirstName:
          description: Person's first name.
          type: string
        LastName:
          description: Person's last name.
          type: string
        Phone:
          description: The phone number of account. The phone number is unique in
            the system.
          type: string
        Email:
          description: The e-mail of account. The email is unique in the system.
          type: string
        LanguageId:
          $ref: '#/components/schemas/EnumLanguage'
        TimezoneId:
          $ref: '#/components/schemas/EnumTimezone'
        DateFormatId:
          $ref: '#/components/schemas/EnumDateFormat'
        Username:
          description: Username used to log in into the system. The username is unique
            in the system. The value must be unique in the system and you cannot add
            multiple values.
          type: string
        ExternalId:
          description: External Authentication identifier. Example Azure AD guid.
            The value must be unique in the system and you cannot add multiple values.
          type: string
        NotifyByEmail:
          default: false
          description: Defines if a person should get notifications via e-mail.
          example: false
          type: boolean
        NotifyBySMS:
          default: false
          description: Defines if a contact should get notifications via SMS.
          example: false
          type: boolean
        Is_Active:
          default: false
          description: Defines if the account is active and can be used.
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Email
      - FirstName
      - LastName
      - Username
      type: object
    FieldType:
      description: "The field object structure. This structure allows users to specify\
        \ any related entity field and its corresponding value. When saving data,\
        \ the system automatically retrieves and assigns the primary key value from\
        \ the system database table based on the provided field name and value."
      example:
        Field: Field
        Value: Value
      properties:
        Field:
          description: "The name of the data field. This can be any field name from\
            \ the related database table, such as 'Email' from the User table or 'Name'\
            \ from the Department table."
          type: string
        Value:
          description: "The value corresponding to the specified data field. This\
            \ value is used to identify the record in the related database table.\
            \ For example, it could be an email address, a department name, or an\
            \ external system's identifier."
          type: string
      required:
      - Value
      type: object
    Tenant:
      description: The record of Tenant information.
      example:
        TenantId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        UserId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        CreatedOn: 1900-01-01T00:00:00Z
      properties:
        UserId:
          $ref: '#/components/schemas/AbstractLong'
        TenantId:
          $ref: '#/components/schemas/AbstractLong'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - CreatedOn
      - TenantId
      - UserId
      type: object
    Tenants:
      description: The list of `Tenant` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - TenantId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          UserId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          CreatedOn: 1900-01-01T00:00:00Z
        - TenantId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          UserId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          CreatedOn: 1900-01-01T00:00:00Z
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Tenant records`
          items:
            $ref: '#/components/schemas/Tenant'
          type: array
      type: object
    TenantData:
      description: The record of Tenant information.
      example:
        TenantId:
          Field: Field
          Value: Value
        UserId:
          Field: Field
          Value: Value
        CreatedOn: 1900-01-01T00:00:00Z
      properties:
        UserId:
          $ref: '#/components/schemas/FieldType'
        TenantId:
          $ref: '#/components/schemas/FieldType'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - CreatedOn
      - TenantId
      type: object
    Picture:
      description: The record of Picture information.
      example:
        Picture: ""
        Filename: Filename
        CreatedOn: 1900-01-01T00:00:00Z
      properties:
        Filename:
          description: Filename of account picture
          type: string
        Picture:
          description: Picture of account
          format: binary
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: Date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    Pictures:
      description: The list of `Picture` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - Picture: ""
          Filename: Filename
          CreatedOn: 1900-01-01T00:00:00Z
        - Picture: ""
          Filename: Filename
          CreatedOn: 1900-01-01T00:00:00Z
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Picture records`
          items:
            $ref: '#/components/schemas/Picture'
          type: array
      type: object
    PictureData:
      description: The record of Picture information.
      example:
        Picture: ""
        Filename: Filename
        CreatedOn: 1900-01-01T00:00:00Z
      properties:
        Filename:
          description: Filename of account picture.
          type: string
        Picture:
          description: Picture of account.
          format: binary
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: Date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    Department:
      description: The record of Department information.
      example:
        DepartmentTypeId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        CountryId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        CreatedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        ParentDepartmentId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        ModifiedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        HierarchicalName: HierarchicalName
        Name: Name
        ContactPhone: ContactPhone
        OwnerId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Is_Active: false
        ContactEmail: ContactEmail
        Level: 0
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ContactName: ContactName
      properties:
        Id:
          description: The guid to identify the department
          type: string
        ExternalId:
          description: The external identifier of the department
          type: string
        Name:
          description: The name of the department
          type: string
        DepartmentTypeId:
          $ref: '#/components/schemas/AbstractText'
        ParentDepartmentId:
          $ref: '#/components/schemas/AbstractText'
        HierarchicalName:
          description: The hierarchical name of the department
          type: string
        Level:
          default: 0
          description: The department level at the hierarchy
          example: 0
          format: int32
          type: integer
        ContactName:
          description: The contact name of company or department
          type: string
        ContactEmail:
          description: The contact email of external company or department
          type: string
        ContactPhone:
          type: string
        OwnerId:
          $ref: '#/components/schemas/AbstractLong'
        CountryId:
          $ref: '#/components/schemas/AbstractText'
        Is_Active:
          default: false
          description: Defines if the department is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        ModifiedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - DepartmentTypeId
      - Id
      - Is_Active
      - Name
      type: object
    Departments:
      description: The list of `Department` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - DepartmentTypeId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CountryId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          ParentDepartmentId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          HierarchicalName: HierarchicalName
          Name: Name
          ContactPhone: ContactPhone
          OwnerId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ContactEmail: ContactEmail
          Level: 0
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ContactName: ContactName
        - DepartmentTypeId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CountryId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          ParentDepartmentId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          HierarchicalName: HierarchicalName
          Name: Name
          ContactPhone: ContactPhone
          OwnerId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ContactEmail: ContactEmail
          Level: 0
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ContactName: ContactName
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Department records`
          items:
            $ref: '#/components/schemas/Department'
          type: array
      type: object
    EnumDepartmentType:
      description: The enum of DepartmentType.
      enum:
      - External
      - Internal
      type: string
      x-enums:
      - value: External
        name: External
        description: External
        isString: true
      - value: Internal
        name: Internal
        description: Internal
        isString: true
    EnumCountry:
      description: The enum of Country.
      enum:
      - AFG
      - ALA
      - ALB
      - DZA
      - ASM
      - AND
      - AGO
      - AIA
      - ATA
      - ATG
      - ARG
      - ARM
      - ABW
      - AUS
      - AUT
      - AZE
      - AZO
      - BHS
      - BHR
      - BGD
      - BRB
      - BLR
      - BEL
      - BLZ
      - BEN
      - BMU
      - BTN
      - BOL
      - BIH
      - BWA
      - BVT
      - BRA
      - IOT
      - VGB
      - BRN
      - BGR
      - BFA
      - BDI
      - KHM
      - CMR
      - CAN
      - CPV
      - CYM
      - CAF
      - TCD
      - CHL
      - CHN
      - CXR
      - CCK
      - COL
      - COM
      - COG
      - COK
      - CRI
      - CIV
      - HRV
      - CUB
      - CYP
      - CZE
      - COD
      - DNK
      - DJI
      - DMA
      - DOM
      - ECU
      - EGY
      - SLV
      - GNQ
      - ERI
      - EST
      - SWZ
      - ETH
      - EUE
      - FLK
      - FRO
      - FSM
      - FJI
      - FIN
      - FRA
      - GUF
      - PYF
      - ATF
      - GAB
      - GMB
      - GEO
      - DEU
      - GHA
      - GIB
      - GRC
      - GRL
      - GRD
      - GLP
      - GUM
      - GTM
      - GGY
      - GIN
      - GNB
      - GUY
      - HTI
      - HMD
      - VAT
      - HND
      - HKG
      - HUN
      - ISL
      - IND
      - IDN
      - IRN
      - IRQ
      - IRL
      - IMN
      - ISR
      - ITA
      - JAM
      - JPN
      - JEY
      - JOR
      - KAZ
      - KEN
      - KIR
      - XKX
      - KWT
      - KGZ
      - LAO
      - LVA
      - LBN
      - LSO
      - LBR
      - LBY
      - LIE
      - LTU
      - LUX
      - MAC
      - MKD
      - MDG
      - MWI
      - MYS
      - MDV
      - MLI
      - MLT
      - MHL
      - MTQ
      - MRT
      - MUS
      - MYT
      - MEX
      - MDA
      - MCO
      - MNG
      - MNE
      - MSR
      - MAR
      - MOZ
      - MMR
      - NAM
      - NRU
      - NPL
      - NLD
      - ANT
      - NCL
      - NZL
      - NIC
      - NER
      - NGA
      - NIU
      - NFK
      - PRK
      - MNP
      - NOR
      - OMN
      - PAK
      - PLW
      - PSE
      - PAN
      - PNG
      - PRY
      - PER
      - PHL
      - PCN
      - POL
      - PRT
      - PRI
      - QAT
      - REU
      - ROU
      - RUS
      - RWA
      - SHN
      - KNA
      - LCA
      - SPM
      - VCT
      - BLM
      - MAF
      - WSM
      - SMR
      - STP
      - SAU
      - SEN
      - SRB
      - SYC
      - SLE
      - SGP
      - SVK
      - SVN
      - SLB
      - SOM
      - SOL
      - ZAF
      - SGS
      - KOR
      - SSD
      - ESP
      - LKA
      - SDN
      - SUR
      - SJM
      - SWE
      - CHE
      - SYR
      - TWN
      - TJK
      - TZA
      - THA
      - TLS
      - TGO
      - TKL
      - TON
      - TTO
      - TUN
      - TUR
      - TKM
      - TCA
      - TUV
      - UGA
      - UKR
      - ARE
      - GBR
      - UMI
      - USA
      - URY
      - UZB
      - VUT
      - VEN
      - VNM
      - VIR
      - WLF
      - ESH
      - YEM
      - ZMB
      - ZWE
      type: string
      x-enums:
      - value: AFG
        name: Afghanistan
        description: Afghanistan
        isString: true
      - value: ALA
        name: AlandIslands
        description: Aland Islands
        isString: true
      - value: ALB
        name: Albania
        description: Albania
        isString: true
      - value: DZA
        name: Algeria
        description: Algeria
        isString: true
      - value: ASM
        name: AmericanSamoa
        description: American Samoa
        isString: true
      - value: AND
        name: Andorra
        description: Andorra
        isString: true
      - value: AGO
        name: Angola
        description: Angola
        isString: true
      - value: AIA
        name: Anguilla
        description: Anguilla
        isString: true
      - value: ATA
        name: Antarctica
        description: Antarctica
        isString: true
      - value: ATG
        name: AntiguaAndBarbuda
        description: Antigua and Barbuda
        isString: true
      - value: ARG
        name: Argentina
        description: Argentina
        isString: true
      - value: ARM
        name: Armenia
        description: Armenia
        isString: true
      - value: ABW
        name: Aruba
        description: Aruba
        isString: true
      - value: AUS
        name: Australia
        description: Australia
        isString: true
      - value: AUT
        name: Austria
        description: Austria
        isString: true
      - value: AZE
        name: Azerbaijan
        description: Azerbaijan
        isString: true
      - value: AZO
        name: Azores
        description: Azores
        isString: true
      - value: BHS
        name: Bahamas
        description: Bahamas
        isString: true
      - value: BHR
        name: Bahrain
        description: Bahrain
        isString: true
      - value: BGD
        name: Bangladesh
        description: Bangladesh
        isString: true
      - value: BRB
        name: Barbados
        description: Barbados
        isString: true
      - value: BLR
        name: Belarus
        description: Belarus
        isString: true
      - value: BEL
        name: Belgium
        description: Belgium
        isString: true
      - value: BLZ
        name: Belize
        description: Belize
        isString: true
      - value: BEN
        name: Benin
        description: Benin
        isString: true
      - value: BMU
        name: Bermuda
        description: Bermuda
        isString: true
      - value: BTN
        name: Bhutan
        description: Bhutan
        isString: true
      - value: BOL
        name: Bolivia
        description: Bolivia
        isString: true
      - value: BIH
        name: BosniaAndHerzegovina
        description: Bosnia and Herzegovina
        isString: true
      - value: BWA
        name: Botswana
        description: Botswana
        isString: true
      - value: BVT
        name: BouvetIsland
        description: Bouvet Island
        isString: true
      - value: BRA
        name: Brazil
        description: Brazil
        isString: true
      - value: IOT
        name: BritishIndianOceanTerritory
        description: British Indian Ocean Territory
        isString: true
      - value: VGB
        name: BritishVirginIslands
        description: British Virgin Islands
        isString: true
      - value: BRN
        name: BruneiDarussalam
        description: Brunei Darussalam
        isString: true
      - value: BGR
        name: Bulgaria
        description: Bulgaria
        isString: true
      - value: BFA
        name: BurkinaFaso
        description: Burkina Faso
        isString: true
      - value: BDI
        name: Burundi
        description: Burundi
        isString: true
      - value: KHM
        name: Cambodia
        description: Cambodia
        isString: true
      - value: CMR
        name: Cameroon
        description: Cameroon
        isString: true
      - value: CAN
        name: Canada
        description: Canada
        isString: true
      - value: CPV
        name: CapeVerde
        description: Cape Verde
        isString: true
      - value: CYM
        name: CaymanIslands
        description: Cayman Islands
        isString: true
      - value: CAF
        name: CentralAfricanRepublic
        description: Central African Republic
        isString: true
      - value: TCD
        name: Chad
        description: Chad
        isString: true
      - value: CHL
        name: Chile
        description: Chile
        isString: true
      - value: CHN
        name: China
        description: China
        isString: true
      - value: CXR
        name: ChristmasIsland
        description: Christmas Island
        isString: true
      - value: CCK
        name: CocosKeelingIslands
        description: Cocos (Keeling) Islands
        isString: true
      - value: COL
        name: Colombia
        description: Colombia
        isString: true
      - value: COM
        name: Comoros
        description: Comoros
        isString: true
      - value: COG
        name: CongoBrazzaville
        description: Congo (Brazzaville)
        isString: true
      - value: COK
        name: CookIslands
        description: Cook Islands
        isString: true
      - value: CRI
        name: CostaRica
        description: Costa Rica
        isString: true
      - value: CIV
        name: CTeDIvoire
        description: C�te d'Ivoire
        isString: true
      - value: HRV
        name: Croatia
        description: Croatia
        isString: true
      - value: CUB
        name: Cuba
        description: Cuba
        isString: true
      - value: CYP
        name: Cyprus
        description: Cyprus
        isString: true
      - value: CZE
        name: CzechRepublic
        description: Czech Republic
        isString: true
      - value: COD
        name: DemocraticRepublicOfTheCongo
        description: Democratic Republic of the Congo
        isString: true
      - value: DNK
        name: Denmark
        description: Denmark
        isString: true
      - value: DJI
        name: Djibouti
        description: Djibouti
        isString: true
      - value: DMA
        name: Dominica
        description: Dominica
        isString: true
      - value: DOM
        name: DominicanRepublic
        description: Dominican Republic
        isString: true
      - value: ECU
        name: Ecuador
        description: Ecuador
        isString: true
      - value: EGY
        name: Egypt
        description: Egypt
        isString: true
      - value: SLV
        name: ElSalvador
        description: El Salvador
        isString: true
      - value: GNQ
        name: EquatorialGuinea
        description: Equatorial Guinea
        isString: true
      - value: ERI
        name: Eritrea
        description: Eritrea
        isString: true
      - value: EST
        name: Estonia
        description: Estonia
        isString: true
      - value: SWZ
        name: Eswatini
        description: Eswatini
        isString: true
      - value: ETH
        name: Ethiopia
        description: Ethiopia
        isString: true
      - value: EUE
        name: EuropeDiplomat
        description: Europe diplomat
        isString: true
      - value: FLK
        name: FalklandIslandsMalvinas
        description: Falkland Islands (Malvinas)
        isString: true
      - value: FRO
        name: FaroeIslands
        description: Faroe Islands
        isString: true
      - value: FSM
        name: FederatedStatesOfMicronesia
        description: Federated States of Micronesia
        isString: true
      - value: FJI
        name: Fiji
        description: Fiji
        isString: true
      - value: FIN
        name: Finland
        description: Finland
        isString: true
      - value: FRA
        name: France
        description: France
        isString: true
      - value: GUF
        name: FrenchGuiana
        description: French Guiana
        isString: true
      - value: PYF
        name: FrenchPolynesia
        description: French Polynesia
        isString: true
      - value: ATF
        name: FrenchSouthernTerritories
        description: French Southern Territories
        isString: true
      - value: GAB
        name: Gabon
        description: Gabon
        isString: true
      - value: GMB
        name: Gambia
        description: Gambia
        isString: true
      - value: GEO
        name: Georgia
        description: Georgia
        isString: true
      - value: DEU
        name: Germany
        description: Germany
        isString: true
      - value: GHA
        name: Ghana
        description: Ghana
        isString: true
      - value: GIB
        name: Gibraltar
        description: Gibraltar
        isString: true
      - value: GRC
        name: Greece
        description: Greece
        isString: true
      - value: GRL
        name: Greenland
        description: Greenland
        isString: true
      - value: GRD
        name: Grenada
        description: Grenada
        isString: true
      - value: GLP
        name: Guadeloupe
        description: Guadeloupe
        isString: true
      - value: GUM
        name: Guam
        description: Guam
        isString: true
      - value: GTM
        name: Guatemala
        description: Guatemala
        isString: true
      - value: GGY
        name: Guernsey
        description: Guernsey
        isString: true
      - value: GIN
        name: Guinea
        description: Guinea
        isString: true
      - value: GNB
        name: GuineaBissau
        description: Guinea-Bissau
        isString: true
      - value: GUY
        name: Guyana
        description: Guyana
        isString: true
      - value: HTI
        name: Haiti
        description: Haiti
        isString: true
      - value: HMD
        name: HeardIslandAndMcdonaldIslands
        description: Heard Island and Mcdonald Islands
        isString: true
      - value: VAT
        name: HolySeeVaticanCityState
        description: Holy See (Vatican City State)
        isString: true
      - value: HND
        name: Honduras
        description: Honduras
        isString: true
      - value: HKG
        name: HongKongCn
        description: Hong Kong (CN)
        isString: true
      - value: HUN
        name: Hungary
        description: Hungary
        isString: true
      - value: ISL
        name: Iceland
        description: Iceland
        isString: true
      - value: IND
        name: India
        description: India
        isString: true
      - value: IDN
        name: Indonesia
        description: Indonesia
        isString: true
      - value: IRN
        name: Iran
        description: Iran
        isString: true
      - value: IRQ
        name: Iraq
        description: Iraq
        isString: true
      - value: IRL
        name: Ireland
        description: Ireland
        isString: true
      - value: IMN
        name: IsleOfMan
        description: Isle of Man
        isString: true
      - value: ISR
        name: Israel
        description: Israel
        isString: true
      - value: ITA
        name: Italy
        description: Italy
        isString: true
      - value: JAM
        name: Jamaica
        description: Jamaica
        isString: true
      - value: JPN
        name: Japan
        description: Japan
        isString: true
      - value: JEY
        name: Jersey
        description: Jersey
        isString: true
      - value: JOR
        name: Jordan
        description: Jordan
        isString: true
      - value: KAZ
        name: Kazakhstan
        description: Kazakhstan
        isString: true
      - value: KEN
        name: Kenya
        description: Kenya
        isString: true
      - value: KIR
        name: Kiribati
        description: Kiribati
        isString: true
      - value: XKX
        name: Kosovo
        description: Kosovo
        isString: true
      - value: KWT
        name: Kuwait
        description: Kuwait
        isString: true
      - value: KGZ
        name: Kyrgyzstan
        description: Kyrgyzstan
        isString: true
      - value: LAO
        name: LaoPdr
        description: Lao PDR
        isString: true
      - value: LVA
        name: Latvia
        description: Latvia
        isString: true
      - value: LBN
        name: Lebanon
        description: Lebanon
        isString: true
      - value: LSO
        name: Lesotho
        description: Lesotho
        isString: true
      - value: LBR
        name: Liberia
        description: Liberia
        isString: true
      - value: LBY
        name: Libya
        description: Libya
        isString: true
      - value: LIE
        name: Liechtenstein
        description: Liechtenstein
        isString: true
      - value: LTU
        name: Lithuania
        description: Lithuania
        isString: true
      - value: LUX
        name: Luxembourg
        description: Luxembourg
        isString: true
      - value: MAC
        name: MacaoCn
        description: Macao (CN)
        isString: true
      - value: MKD
        name: Macedonia
        description: Macedonia
        isString: true
      - value: MDG
        name: Madagascar
        description: Madagascar
        isString: true
      - value: MWI
        name: Malawi
        description: Malawi
        isString: true
      - value: MYS
        name: Malaysia
        description: Malaysia
        isString: true
      - value: MDV
        name: Maldives
        description: Maldives
        isString: true
      - value: MLI
        name: Mali
        description: Mali
        isString: true
      - value: MLT
        name: Malta
        description: Malta
        isString: true
      - value: MHL
        name: MarshallIslands
        description: Marshall Islands
        isString: true
      - value: MTQ
        name: Martinique
        description: Martinique
        isString: true
      - value: MRT
        name: Mauritania
        description: Mauritania
        isString: true
      - value: MUS
        name: Mauritius
        description: Mauritius
        isString: true
      - value: MYT
        name: Mayotte
        description: Mayotte
        isString: true
      - value: MEX
        name: Mexico
        description: Mexico
        isString: true
      - value: MDA
        name: Moldova
        description: Moldova
        isString: true
      - value: MCO
        name: Monaco
        description: Monaco
        isString: true
      - value: MNG
        name: Mongolia
        description: Mongolia
        isString: true
      - value: MNE
        name: Montenegro
        description: Montenegro
        isString: true
      - value: MSR
        name: Montserrat
        description: Montserrat
        isString: true
      - value: MAR
        name: Morocco
        description: Morocco
        isString: true
      - value: MOZ
        name: Mozambique
        description: Mozambique
        isString: true
      - value: MMR
        name: Myanmar
        description: Myanmar
        isString: true
      - value: NAM
        name: Namibia
        description: Namibia
        isString: true
      - value: NRU
        name: Nauru
        description: Nauru
        isString: true
      - value: NPL
        name: Nepal
        description: Nepal
        isString: true
      - value: NLD
        name: Netherlands
        description: Netherlands
        isString: true
      - value: ANT
        name: NetherlandsAntilles
        description: Netherlands Antilles
        isString: true
      - value: NCL
        name: NewCaledonia
        description: New Caledonia
        isString: true
      - value: NZL
        name: NewZealand
        description: New Zealand
        isString: true
      - value: NIC
        name: Nicaragua
        description: Nicaragua
        isString: true
      - value: NER
        name: Niger
        description: Niger
        isString: true
      - value: NGA
        name: Nigeria
        description: Nigeria
        isString: true
      - value: NIU
        name: Niue
        description: Niue
        isString: true
      - value: NFK
        name: NorfolkIsland
        description: Norfolk Island
        isString: true
      - value: PRK
        name: NorthKorea
        description: North Korea
        isString: true
      - value: MNP
        name: NorthernMarianaIslands
        description: Northern Mariana Islands
        isString: true
      - value: NOR
        name: Norway
        description: Norway
        isString: true
      - value: OMN
        name: Oman
        description: Oman
        isString: true
      - value: PAK
        name: Pakistan
        description: Pakistan
        isString: true
      - value: PLW
        name: Palau
        description: Palau
        isString: true
      - value: PSE
        name: PalestinianTerritoryOccupied
        description: "Palestinian Territory, Occupied"
        isString: true
      - value: PAN
        name: Panama
        description: Panama
        isString: true
      - value: PNG
        name: PapuaNewGuinea
        description: Papua New Guinea
        isString: true
      - value: PRY
        name: Paraguay
        description: Paraguay
        isString: true
      - value: PER
        name: Peru
        description: Peru
        isString: true
      - value: PHL
        name: Philippines
        description: Philippines
        isString: true
      - value: PCN
        name: PitcairnIsland
        description: Pitcairn Island
        isString: true
      - value: POL
        name: Poland
        description: Poland
        isString: true
      - value: PRT
        name: Portugal
        description: Portugal
        isString: true
      - value: PRI
        name: PuertoRico
        description: Puerto Rico
        isString: true
      - value: QAT
        name: Qatar
        description: Qatar
        isString: true
      - value: REU
        name: RUnion
        description: R�union
        isString: true
      - value: ROU
        name: Romania
        description: Romania
        isString: true
      - value: RUS
        name: RussianFederation
        description: Russian Federation
        isString: true
      - value: RWA
        name: Rwanda
        description: Rwanda
        isString: true
      - value: SHN
        name: SaintHelena
        description: Saint Helena
        isString: true
      - value: KNA
        name: SaintKittsAndNevis
        description: Saint Kitts and Nevis
        isString: true
      - value: LCA
        name: SaintLucia
        description: Saint Lucia
        isString: true
      - value: SPM
        name: SaintPierreAndMiquelon
        description: Saint Pierre and Miquelon
        isString: true
      - value: VCT
        name: SaintVincentAndGrenadines
        description: Saint Vincent and Grenadines
        isString: true
      - value: BLM
        name: SaintBarthLemy
        description: Saint-Barth�lemy
        isString: true
      - value: MAF
        name: SaintMartinFrenchPart
        description: Saint-Martin (French part)
        isString: true
      - value: WSM
        name: Samoa
        description: Samoa
        isString: true
      - value: SMR
        name: SanMarino
        description: San Marino
        isString: true
      - value: STP
        name: SaoTomeAndPrincipe
        description: Sao Tome and Principe
        isString: true
      - value: SAU
        name: SaudiArabia
        description: Saudi Arabia
        isString: true
      - value: SEN
        name: Senegal
        description: Senegal
        isString: true
      - value: SRB
        name: Serbia
        description: Serbia
        isString: true
      - value: SYC
        name: Seychelles
        description: Seychelles
        isString: true
      - value: SLE
        name: SierraLeone
        description: Sierra Leone
        isString: true
      - value: SGP
        name: Singapore
        description: Singapore
        isString: true
      - value: SVK
        name: Slovakia
        description: Slovakia
        isString: true
      - value: SVN
        name: Slovenia
        description: Slovenia
        isString: true
      - value: SLB
        name: SolomonIslands
        description: Solomon Islands
        isString: true
      - value: SOM
        name: Somalia
        description: Somalia
        isString: true
      - value: SOL
        name: Somaliland
        description: Somaliland
        isString: true
      - value: ZAF
        name: SouthAfrica
        description: South Africa
        isString: true
      - value: SGS
        name: SouthGeorgiaAndTheSouthSandwichIslands
        description: South Georgia and the South Sandwich Islands
        isString: true
      - value: KOR
        name: SouthKorea
        description: South Korea
        isString: true
      - value: SSD
        name: SouthSudan
        description: South Sudan
        isString: true
      - value: ESP
        name: Spain
        description: Spain
        isString: true
      - value: LKA
        name: SriLanka
        description: Sri Lanka
        isString: true
      - value: SDN
        name: Sudan
        description: Sudan
        isString: true
      - value: SUR
        name: Suriname
        description: Suriname
        isString: true
      - value: SJM
        name: SvalbardAndJanMayenIslands
        description: Svalbard and Jan Mayen Islands
        isString: true
      - value: SWE
        name: Sweden
        description: Sweden
        isString: true
      - value: CHE
        name: Switzerland
        description: Switzerland
        isString: true
      - value: SYR
        name: SyrianArabRepublicSyria
        description: Syrian Arab Republic (Syria)
        isString: true
      - value: TWN
        name: TaiwanCn
        description: Taiwan (CN)
        isString: true
      - value: TJK
        name: Tajikistan
        description: Tajikistan
        isString: true
      - value: TZA
        name: Tanzania
        description: Tanzania
        isString: true
      - value: THA
        name: Thailand
        description: Thailand
        isString: true
      - value: TLS
        name: TimorLeste
        description: Timor-Leste
        isString: true
      - value: TGO
        name: Togo
        description: Togo
        isString: true
      - value: TKL
        name: Tokelau
        description: Tokelau
        isString: true
      - value: TON
        name: Tonga
        description: Tonga
        isString: true
      - value: TTO
        name: TrinidadAndTobago
        description: Trinidad and Tobago
        isString: true
      - value: TUN
        name: Tunisia
        description: Tunisia
        isString: true
      - value: TUR
        name: Turkey
        description: Turkey
        isString: true
      - value: TKM
        name: Turkmenistan
        description: Turkmenistan
        isString: true
      - value: TCA
        name: TurksAndCaicosIslands
        description: Turks and Caicos Islands
        isString: true
      - value: TUV
        name: Tuvalu
        description: Tuvalu
        isString: true
      - value: UGA
        name: Uganda
        description: Uganda
        isString: true
      - value: UKR
        name: Ukraine
        description: Ukraine
        isString: true
      - value: ARE
        name: UnitedArabEmirates
        description: United Arab Emirates
        isString: true
      - value: GBR
        name: UnitedKingdom
        description: United Kingdom
        isString: true
      - value: UMI
        name: UnitedStatesMinorOutlyingIslands
        description: United States Minor Outlying Islands
        isString: true
      - value: USA
        name: UnitedStatesOfAmerica
        description: United States of America
        isString: true
      - value: URY
        name: Uruguay
        description: Uruguay
        isString: true
      - value: UZB
        name: Uzbekistan
        description: Uzbekistan
        isString: true
      - value: VUT
        name: Vanuatu
        description: Vanuatu
        isString: true
      - value: VEN
        name: Venezuela
        description: Venezuela
        isString: true
      - value: VNM
        name: Vietnam
        description: Vietnam
        isString: true
      - value: VIR
        name: VirginIslandsUs
        description: "Virgin Islands, US"
        isString: true
      - value: WLF
        name: WallisAndFutunaIslands
        description: Wallis and Futuna Islands
        isString: true
      - value: ESH
        name: WesternSahara
        description: Western Sahara
        isString: true
      - value: YEM
        name: Yemen
        description: Yemen
        isString: true
      - value: ZMB
        name: Zambia
        description: Zambia
        isString: true
      - value: ZWE
        name: Zimbabwe
        description: Zimbabwe
        isString: true
    DepartmentData:
      description: The record of Department information.
      example:
        DepartmentTypeId: External
        ContactPhone: ContactPhone
        CountryId: AFG
        OwnerId:
          Field: Field
          Value: Value
        Is_Active: false
        ExternalId: ExternalId
        ContactEmail: ContactEmail
        Id: Id
        ParentDepartmentId:
          Field: Field
          Value: Value
        ContactName: ContactName
        Name: Name
      properties:
        Id:
          description: The guid to identify the department.
          type: string
        ExternalId:
          description: The external identifier of the department.
          type: string
        Name:
          description: The name of the department.
          type: string
        DepartmentTypeId:
          $ref: '#/components/schemas/EnumDepartmentType'
        ParentDepartmentId:
          $ref: '#/components/schemas/FieldType'
        ContactName:
          description: The contact name of company or department.
          type: string
        ContactEmail:
          description: The contact email of external company or department.
          type: string
        ContactPhone:
          type: string
        OwnerId:
          $ref: '#/components/schemas/FieldType'
        CountryId:
          $ref: '#/components/schemas/EnumCountry'
        Is_Active:
          default: false
          description: Defines if the department is active and can be used.
          example: false
          type: boolean
      required:
      - DepartmentTypeId
      - Is_Active
      - Name
      type: object
    DepartmentInsertData:
      description: The record of Department information.
      example:
        DepartmentTypeId: External
        ContactPhone: ContactPhone
        CountryId: AFG
        OwnerId:
          Field: Field
          Value: Value
        Is_Active: false
        ExternalId: ExternalId
        ContactEmail: ContactEmail
        Id: Id
        ParentDepartmentId:
          Field: Field
          Value: Value
        ContactName: ContactName
        Name: Name
      properties:
        Id:
          description: The guid to identify the department.
          type: string
        ExternalId:
          description: The external identifier of the department.
          type: string
        Name:
          description: The name of the department.
          type: string
        DepartmentTypeId:
          $ref: '#/components/schemas/EnumDepartmentType'
        ParentDepartmentId:
          $ref: '#/components/schemas/FieldType'
        ContactName:
          description: The contact name of company or department.
          type: string
        ContactEmail:
          description: The contact email of external company or department.
          type: string
        ContactPhone:
          type: string
        OwnerId:
          $ref: '#/components/schemas/FieldType'
        CountryId:
          $ref: '#/components/schemas/EnumCountry'
        Is_Active:
          default: false
          description: Defines if the department is active and can be used.
          example: false
          type: boolean
      required:
      - DepartmentTypeId
      - Id
      - Is_Active
      - Name
      type: object
    DepartmentUpdateData:
      description: The record of Department information.
      example:
        ContactPhone: ContactPhone
        CountryId: AFG
        OwnerId:
          Field: Field
          Value: Value
        Is_Active: false
        ExternalId: ExternalId
        ContactEmail: ContactEmail
        ContactName: ContactName
        Name: Name
      properties:
        ExternalId:
          description: The external identifier of the department.
          type: string
        Name:
          description: The name of the department.
          type: string
        ContactName:
          description: The contact name of company or department.
          type: string
        ContactEmail:
          description: The contact email of external company or department.
          type: string
        ContactPhone:
          type: string
        OwnerId:
          $ref: '#/components/schemas/FieldType'
        CountryId:
          $ref: '#/components/schemas/EnumCountry'
        Is_Active:
          default: false
          description: Defines if the department is active and can be used.
          example: false
          type: boolean
      required:
      - Is_Active
      - Name
      type: object
    User:
      description: The record of User information.
      example:
        CreatedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        ModifiedOn: 1900-01-01T00:00:00Z
        UserId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
      properties:
        Id:
          description: The identifier of user department
          type: string
        UserId:
          $ref: '#/components/schemas/AbstractLong'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        ModifiedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      type: object
    Users:
      description: The list of `User` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          ModifiedOn: 1900-01-01T00:00:00Z
          UserId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
        - CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          ModifiedOn: 1900-01-01T00:00:00Z
          UserId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `User records`
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    UserData:
      description: The record of User information.
      example:
        UserId:
          Field: Field
          Value: Value
        Id: Id
      properties:
        Id:
          description: The identifier of user department.
          type: string
        UserId:
          $ref: '#/components/schemas/FieldType'
      type: object
    UserText:
      description: The record of User information.
      example:
        UserId: UserId
        Id: Id
      properties:
        Id:
          description: The identifier of user department.
          type: string
        UserId:
          description: The identifier of the user who has link the department.
          type: string
      type: object
    UsersData:
      description: The data loading record of User importing
      example:
        Extra:
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        IsFullValidation: false
        Users:
        - UserId: UserId
          Id: Id
        - UserId: UserId
          Id: Id
      properties:
        Extra:
          description: List validation for entity attribute
          items:
            $ref: '#/components/schemas/ListValidation'
          type: array
        IsFullValidation:
          default: false
          description: "If the value is true, the data quality of all fields are checked.\
            \ This has an effect on performance."
          example: false
          type: boolean
        Users:
          description: The list of `User` data record for import
          items:
            $ref: '#/components/schemas/UserText'
          type: array
      type: object
    ListValidation:
      description: List validation for entity attribute
      example:
        Pattern: Pattern
        DefaultValue: DefaultValue
        Min: Min
        Required: false
        Max: Max
        Unique: false
        FieldName: FieldName
        Name: Name
      properties:
        Name:
          description: The name of the entity field.
          type: string
        FieldName:
          description: "The field name of relation database table.\n\nExample; \n\
            The field name is 'TenantId' and is associated with the 'Tenant' table.\
            \ You want to use in the 'Tenant' table 'Name' field fetching data. Once\
            \ 'Name' is specified, the validation service retrieves the tenant identifier\
            \ from the 'Tenant' table based on the 'Name' field."
          type: string
        Required:
          default: false
          description: "If True, the value is required."
          example: false
          type: boolean
        Unique:
          default: false
          description: "If True, the value must be unique in the database and you\
            \ cannot add multiple values."
          example: false
          type: boolean
        Max:
          description: The max value of input value.
          type: string
        Min:
          description: The min value of input value.
          type: string
        Pattern:
          description: The pattern of the validation. Searches the input string for
            an occurrence of a regular expression.
          type: string
        DefaultValue:
          description: "The default value of row. If the value of the field is empty,\
            \ the service automatically sets the value in the field. If the value\
            \ does not match the data type, the value is cleaned. Remember data types."
          type: string
      required:
      - Name
      type: object
    Location:
      description: The record of Location information.
      example:
        CountryId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        CreatedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        Id: Id
        TimezoneId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        CurrencyId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        Name: Name
      properties:
        Id:
          description: The guid to identify the location
          type: string
        ExternalId:
          description: The external identifier of the location
          type: string
        Name:
          description: The name of the location
          type: string
        CountryId:
          $ref: '#/components/schemas/AbstractText'
        TimezoneId:
          $ref: '#/components/schemas/AbstractText'
        CurrencyId:
          $ref: '#/components/schemas/AbstractText'
        Is_Active:
          default: false
          description: Defines if the location is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        ModifiedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - Is_Active
      - Name
      type: object
    Locations:
      description: The list of `Location` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - CountryId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Id: Id
          TimezoneId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          CurrencyId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Name: Name
        - CountryId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Id: Id
          TimezoneId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          CurrencyId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Name: Name
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Location records`
          items:
            $ref: '#/components/schemas/Location'
          type: array
      type: object
    EnumCurrency:
      description: The enum of Currency.
      enum:
      - AUD
      - BHD
      - BGN
      - CAD
      - CNY
      - HRK
      - CZK
      - DKK
      - AED
      - EUR
      - GBP
      - HKD
      - HUF
      - ISK
      - JPY
      - NOK
      - PLN
      - RUB
      - SGD
      - SEK
      - CHF
      - THB
      - TRY
      - UAH
      - USD
      type: string
      x-enums:
      - value: AUD
        name: AustralianDollar
        description: Australian Dollar
        isString: true
      - value: BHD
        name: BahrainiDinar
        description: Bahraini Dinar
        isString: true
      - value: BGN
        name: BulgarianLev
        description: Bulgarian Lev
        isString: true
      - value: CAD
        name: CanadianDollar
        description: Canadian Dollar
        isString: true
      - value: CNY
        name: ChineseYuanRenminbi
        description: Chinese Yuan Renminbi
        isString: true
      - value: HRK
        name: CroatianKuna
        description: Croatian Kuna
        isString: true
      - value: CZK
        name: CzechKoruna
        description: Czech Koruna
        isString: true
      - value: DKK
        name: DanishKrone
        description: Danish Krone
        isString: true
      - value: AED
        name: EmiratiDirham
        description: Emirati Dirham
        isString: true
      - value: EUR
        name: Euro
        description: Euro
        isString: true
      - value: GBP
        name: GreatBritishPound
        description: Great British Pound
        isString: true
      - value: HKD
        name: HongKongDollar
        description: Hong Kong Dollar
        isString: true
      - value: HUF
        name: HungarianForint
        description: Hungarian Forint
        isString: true
      - value: ISK
        name: IcelandicKrona
        description: Icelandic krona
        isString: true
      - value: JPY
        name: JapaneseYen
        description: Japanese Yen
        isString: true
      - value: NOK
        name: NorwegianKrone
        description: Norwegian Krone
        isString: true
      - value: PLN
        name: PolishZloty
        description: Polish Zloty
        isString: true
      - value: RUB
        name: RussianRuble
        description: Russian Ruble
        isString: true
      - value: SGD
        name: SingaporeDollar
        description: Singapore Dollar
        isString: true
      - value: SEK
        name: SwedishKroner
        description: Swedish Kroner
        isString: true
      - value: CHF
        name: SwissFranc
        description: Swiss Franc
        isString: true
      - value: THB
        name: ThailandBaht
        description: Thailand Baht
        isString: true
      - value: TRY
        name: TurkishLira
        description: Turkish Lira
        isString: true
      - value: UAH
        name: UkrainianHryvnia
        description: Ukrainian hryvnia
        isString: true
      - value: USD
        name: UnitedStatesDollar
        description: United States Dollar
        isString: true
    LocationData:
      description: The record of Location information.
      example:
        CountryId: AFG
        Is_Active: false
        ExternalId: ExternalId
        Id: Id
        TimezoneId: Afghanistan Standard Time
        CurrencyId: AUD
        Name: Name
      properties:
        Id:
          description: The guid to identify the location.
          type: string
        ExternalId:
          description: The external identifier of the location.
          type: string
        Name:
          description: The name of the location. The value must be unique in the system
            and you cannot add multiple values.
          type: string
        CountryId:
          $ref: '#/components/schemas/EnumCountry'
        TimezoneId:
          $ref: '#/components/schemas/EnumTimezone'
        CurrencyId:
          $ref: '#/components/schemas/EnumCurrency'
        Is_Active:
          default: false
          description: Defines if the location is active and can be used.
          example: false
          type: boolean
      required:
      - Is_Active
      - Name
      type: object
    LocationInsertData:
      description: The record of Location information.
      example:
        CountryId: AFG
        Is_Active: false
        ExternalId: ExternalId
        Id: Id
        TimezoneId: Afghanistan Standard Time
        CurrencyId: AUD
        Name: Name
      properties:
        Id:
          description: The guid to identify the location.
          type: string
        ExternalId:
          description: The external identifier of the location.
          type: string
        Name:
          description: The name of the location. The value must be unique in the system
            and you cannot add multiple values.
          type: string
        CountryId:
          $ref: '#/components/schemas/EnumCountry'
        TimezoneId:
          $ref: '#/components/schemas/EnumTimezone'
        CurrencyId:
          $ref: '#/components/schemas/EnumCurrency'
        Is_Active:
          default: false
          description: Defines if the location is active and can be used.
          example: false
          type: boolean
      required:
      - Id
      - Is_Active
      - Name
      type: object
    LocationUpdateData:
      description: The record of Location information.
      example:
        CountryId: AFG
        Is_Active: false
        ExternalId: ExternalId
        TimezoneId: Afghanistan Standard Time
        CurrencyId: AUD
        Name: Name
      properties:
        ExternalId:
          description: The external identifier of the location.
          type: string
        Name:
          description: The name of the location. The value must be unique in the system
            and you cannot add multiple values.
          type: string
        CountryId:
          $ref: '#/components/schemas/EnumCountry'
        TimezoneId:
          $ref: '#/components/schemas/EnumTimezone'
        CurrencyId:
          $ref: '#/components/schemas/EnumCurrency'
        Is_Active:
          default: false
          description: Defines if the location is active and can be used.
          example: false
          type: boolean
      required:
      - Is_Active
      - Name
      type: object
    Connection:
      description: The record of Connection information.
      example:
        SecretKey: SecretKey
        Description: Description
        ApiKey: ApiKey
        CreatedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        Is_System: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        URL: URL
        Name: Name
      properties:
        Id:
          description: The identifier of the module that owns the entity that is being
            processed
          type: string
        Name:
          description: Name of connection
          type: string
        Description:
          description: Description of connection
          type: string
        ApiKey:
          description: "An API key is a unique identifier used to authenticate a user,\
            \ developer, or calling program to an API"
          type: string
        SecretKey:
          description: "A secret key for signing payloads, enhancing security."
          type: string
        URL:
          description: Webhook external service URL-address
          type: string
        Is_Active:
          default: false
          description: "If true, the configuration is active"
          example: false
          type: boolean
        Is_System:
          default: false
          description: "If true, the configuration is internal to the system and not\
            \ visible in the user interface"
          example: false
          type: boolean
        ModifiedBy:
          $ref: '#/components/schemas/AbstractLong'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - Name
      - URL
      type: object
    Connections:
      description: The list of `Connection` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - SecretKey: SecretKey
          Description: Description
          ApiKey: ApiKey
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          Is_System: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          URL: URL
          Name: Name
        - SecretKey: SecretKey
          Description: Description
          ApiKey: ApiKey
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          Is_System: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          URL: URL
          Name: Name
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Connection records`
          items:
            $ref: '#/components/schemas/Connection'
          type: array
      type: object
    ConnectionData:
      description: The record of Connection information.
      example:
        SecretKey: SecretKey
        Description: Description
        ApiKey: ApiKey
        CreatedBy:
          Field: Field
          Value: Value
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        Is_System: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Field: Field
          Value: Value
        URL: URL
        Name: Name
      properties:
        Id:
          description: The identifier of the module that owns the entity that is being
            processed.
          type: string
        Name:
          description: Name of connection. The value must be unique in the system
            and you cannot add multiple values.
          type: string
        Description:
          description: Description of connection.
          type: string
        ApiKey:
          description: "An API key is a unique identifier used to authenticate a user,\
            \ developer, or calling program to an API. The pattern of the value (Secure).\
            \ The default of the value (Generate password)."
          type: string
        SecretKey:
          description: "A secret key for signing payloads, enhancing security. The\
            \ pattern of the value (Secure). The default of the value (Generate password)."
          type: string
        URL:
          description: "Webhook external service URL-address. The value must be unique\
            \ in the system and you cannot add multiple values. The pattern of the\
            \ value (^(http(s):\\/\\/.)[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\\
            b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)$)."
          type: string
        Is_Active:
          default: false
          description: "If true, the configuration is active."
          example: false
          type: boolean
        Is_System:
          default: false
          description: "If true, the configuration is internal to the system and not\
            \ visible in the user interface."
          example: false
          type: boolean
        ModifiedBy:
          $ref: '#/components/schemas/FieldType'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedBy:
          $ref: '#/components/schemas/FieldType'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Name
      - URL
      type: object
    Config:
      description: The record of Config information.
      example:
        HasDeleteAccess: false
        CreatedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        WebhookEntityId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        HasCreateAccess: false
        HasUpdateAccess: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
      properties:
        Id:
          description: The identifier of the config
          type: string
        WebhookEntityId:
          $ref: '#/components/schemas/AbstractText'
        HasCreateAccess:
          default: false
          description: Service has create access to data
          example: false
          type: boolean
        HasUpdateAccess:
          default: false
          description: Service has update access to data
          example: false
          type: boolean
        HasDeleteAccess:
          default: false
          description: Service has delete access to data
          example: false
          type: boolean
        Is_Active:
          default: false
          description: "If true, the configuration is active"
          example: false
          type: boolean
        ModifiedBy:
          $ref: '#/components/schemas/AbstractLong'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - WebhookEntityId
      type: object
    Configs:
      description: The list of `Config` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - HasDeleteAccess: false
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          WebhookEntityId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          HasCreateAccess: false
          HasUpdateAccess: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
        - HasDeleteAccess: false
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          WebhookEntityId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          HasCreateAccess: false
          HasUpdateAccess: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Config records`
          items:
            $ref: '#/components/schemas/Config'
          type: array
      type: object
    ConfigData:
      description: The record of Config information.
      example:
        HasDeleteAccess: false
        CreatedBy:
          Field: Field
          Value: Value
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        WebhookEntityId:
          Field: Field
          Value: Value
        HasCreateAccess: false
        HasUpdateAccess: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Field: Field
          Value: Value
      properties:
        Id:
          description: The identifier of the config.
          type: string
        WebhookEntityId:
          $ref: '#/components/schemas/FieldType'
        HasCreateAccess:
          default: false
          description: Service has create access to data.
          example: false
          type: boolean
        HasUpdateAccess:
          default: false
          description: Service has update access to data.
          example: false
          type: boolean
        HasDeleteAccess:
          default: false
          description: Service has delete access to data.
          example: false
          type: boolean
        Is_Active:
          default: false
          description: "If true, the configuration is active."
          example: false
          type: boolean
        ModifiedBy:
          $ref: '#/components/schemas/FieldType'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedBy:
          $ref: '#/components/schemas/FieldType'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - WebhookEntityId
      type: object
    ConfigText:
      description: The record of Config information.
      example:
        HasDeleteAccess: false
        CreatedBy: CreatedBy
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        WebhookEntityId: WebhookEntityId
        HasCreateAccess: false
        HasUpdateAccess: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy: ModifiedBy
      properties:
        Id:
          description: The identifier of the config.
          type: string
        WebhookEntityId:
          description: Identifier of webhook entity.
          type: string
        HasCreateAccess:
          default: false
          description: Service has create access to data.
          example: false
          type: boolean
        HasUpdateAccess:
          default: false
          description: Service has update access to data.
          example: false
          type: boolean
        HasDeleteAccess:
          default: false
          description: Service has delete access to data.
          example: false
          type: boolean
        Is_Active:
          default: false
          description: "If true, the configuration is active."
          example: false
          type: boolean
        ModifiedBy:
          description: The Identifier of the user who updated the record.
          type: string
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedBy:
          description: The Identifier of the user who created the record.
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - WebhookEntityId
      type: object
    ConfigsData:
      description: The data loading record of Config importing
      example:
        Extra:
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        IsFullValidation: false
        Configs:
        - HasDeleteAccess: false
          CreatedBy: CreatedBy
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          WebhookEntityId: WebhookEntityId
          HasCreateAccess: false
          HasUpdateAccess: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy: ModifiedBy
        - HasDeleteAccess: false
          CreatedBy: CreatedBy
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          WebhookEntityId: WebhookEntityId
          HasCreateAccess: false
          HasUpdateAccess: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy: ModifiedBy
      properties:
        Extra:
          description: List validation for entity attribute
          items:
            $ref: '#/components/schemas/ListValidation'
          type: array
        IsFullValidation:
          default: false
          description: "If the value is true, the data quality of all fields are checked.\
            \ This has an effect on performance."
          example: false
          type: boolean
        Configs:
          description: The list of `Config` data record for import
          items:
            $ref: '#/components/schemas/ConfigText'
          type: array
      type: object
    Entity:
      description: The record of Entity information.
      example:
        InternalConfigId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        Is_Active: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        Application: Application
        Name: Name
      properties:
        Id:
          description: The Guid identifier of web hook entity
          type: string
        Name:
          description: Name of entity
          type: string
        Application:
          description: Name of application
          type: string
        InternalConfigId:
          $ref: '#/components/schemas/AbstractText'
        Is_Active:
          default: false
          description: "If true, the entity is active"
          example: false
          type: boolean
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Application
      - Id
      - InternalConfigId
      - Name
      type: object
    Entities:
      description: The list of `Entity` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - InternalConfigId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Is_Active: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          Application: Application
          Name: Name
        - InternalConfigId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Is_Active: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          Application: Application
          Name: Name
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Entity records`
          items:
            $ref: '#/components/schemas/Entity'
          type: array
      type: object
  securitySchemes:
    OAuth2:
      description: oAuth autentication flow
      flows:
        clientCredentials:
          refreshUrl: https://dev.esystems.fi/oAuth/rest/v2/Token
          scopes:
            AccessManager:Read: Allows to edit access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessUser:Read: Allows to review access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessManager:Create, Update: Allows to edit access groups and all related
              data. (ABAC) permissions required to perform a function.
            AccessUser:Create, Update: Allows to review access groups and all related
              data. (ABAC) permissions required to perform a function.
            AccessManager:Create: Allows to edit access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessUser:Create: Allows to review access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessManager:Update: Allows to edit access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessUser:Update: Allows to review access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessManager:Delete: Allows to edit access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessUser:Delete: Allows to review access groups and all related data.
              (ABAC) permissions required to perform a function.
          tokenUrl: https://dev.esystems.fi/oAuth/rest/v2/Token
      type: oauth2

