openapi: 3.0.3
info:
  contact: {}
  description: "Agile.Now.AccessHub is a secure REST API designed to manage accounts,\
    \ access groups, user groups, organizations, locations, applications, roles, and\
    \ webhooks. This API provides a robust and scalable solution for managing user\
    \ access and organizational structures in a multi-tenant environment.\r\n\r\n\
    **Key Features:**\r\n\r\n1. **Accounts Management:**\r\n   - Manage user accounts\
    \ with secure authentication and authorization.\r\n\r\n2. **Access Groups:**\r\
    \n   - Define and manage access groups for access control.\r\n   - Assign users\
    \ to access groups based on roles and permissions.\r\n\r\n3. **User Groups:**\r\
    \n   - Create and manage user groups for better organization and collaboration.\r\
    \n\r\n4. **Organizations & Locations:**\r\n   - Manage multiple organizations\
    \ and locations within a single platform.\r\n   - Attribute-based access control\
    \ (ABAC) for settings.\r\n\r\n5. **Applications:**\r\n   - Centralized management\
    \ of applications within the platform.\r\n   - Assign and monitor application\
    \ usage and access.\r\n\r\n6. **Roles:**\r\n   - Define and manage roles for different\
    \ access levels.\r\n   - Role-based access control to ensure appropriate permissions.\r\
    \n\r\n7. **Webhooks:**\r\n   - Integration with external services and applications.\r\
    \n   - Configure and manage webhooks for real-time notifications and data syncing.\r\
    \n\r\n**Benefits:**\r\n\r\n- **Enhanced Security:** Attribute-based and role-based\
    \ access controls ensure data protection and authorized access.\r\n- **Scalability:**\
    \ Designed for growing organizations.\r\n- **Efficiency:** Streamlined management\
    \ of accounts, groups, and roles reduces overhead.\r\n- **Flexibility:** Multi-tenant\
    \ architecture allows easy customization.\r\n- **Integration:** Webhook support\
    \ facilitates seamless integration with external systems.\r\n\r\n**Conclusion:**\r\
    \n\r\nAgile.Now.AccessHub is a powerful platform for managing your business data.\
    \ It offers a centralized, secure, and scalable solution, enhancing operational\
    \ efficiency, security, and flexibility in managing multi-tenant environments."
  license:
    name: BSD-3 license
    url: https://opensource.org/licenses/BSD-3-Clause
  title: Accounts API documentation
  version: 3.0.8
servers:
- description: Default entry point of service
  url: https://dev.esystems.fi
tags:
- description: Accounts
  name: Accounts
- description: Departments
  name: Departments
- description: Locations
  name: Locations
- description: Connections
  name: Connections
- description: Entities
  name: Entities
paths:
  /Endpoint/rest/api/v1/Account/{Id}:
    delete:
      description: |-
        Use the query string resource to delete `Account` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id,Username, ExternalId` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`

        ### Delete a record of Account
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id,Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Account
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nUsername, ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nUsername, ExternalId\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Deleted `Account` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Delete
        - AccessUser:Delete
      tags:
      - Accounts
    get:
      description: |-
        The method returns one record of the `Account`.

        Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`

        ### Get a record of Account
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id,Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
      operationId: Get Account
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nUsername, ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nUsername, ExternalId\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: The record of `Account` information
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Accounts
    put:
      description: "Use the `AccountData` object resource to update `Account` using\
        \ `Id,Username, ExternalId` field(s) value.\n\nProvide the updated record\
        \ information in your request data and use the `PUT` method of the resource\
        \ with a specific record ID to update that record. \n\nThe input parameter\
        \ must be used in the `AccountData` record structure inside the `FieldType`\
        \ parameter in the foreign key fields.\n\nForeign key fields are: `TenantId,\
        \ LanguageId, TimezoneId, DateFormatId`\n\n### Update a record of Account\n\
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not\
        \ Found`), and the error record is returned.. You cannot change `Id` field\
        \ value (primary key).\n* If the `Id` field value is matched multiple times,\
        \ then a `400` error is reported (`Errors/Multible Rows`), and the error record\
        \ is returned.\n* If the `Id,Username, ExternalId` field value is matched\
        \ multiple times, then a `400` error is reported (`Errors/Multible Rows`),\
        \ and the error record is returned.\n\nThe response body will contain the\
        \ object of the updated record if the call is successful. Method returns an\
        \ extended `Account` structure. Here, all foreign key fields are abstract\
        \ object structures, utilizing `AbstractText` or `AbstractLong` data types,\
        \ offering a detailed view of the data and related entities."
      operationId: Update Account
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nUsername, ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nUsername, ExternalId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountData'
        description: |-
          Account information to update.

          The input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Updated `Account` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Update
        - AccessUser:Update
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Accounts:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Account` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `TenantId, LanguageId, TimezoneId, DateFormatId`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Accounts
      parameters:
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, TenantId, Name, FirstName, LastName,\
          \ Phone, Email, LanguageId, TimezoneId, DateFormatId, Username, ExternalId,\
          \ NotifyByEmail, NotifyBySMS, Is_Active, ModifiedOn, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, TenantId, Name, FirstName,\
            \ LastName, Phone, Email, LanguageId, TimezoneId, DateFormatId, Username,\
            \ ExternalId, NotifyByEmail, NotifyBySMS, Is_Active, ModifiedOn, CreatedOn\n\
            ```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
          description: The list of Accounts
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Account:
    patch:
      description: |-
        Use the `AccountData` object resource to insert or update (Upsert) `Account` using `Id,Username, ExternalId` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`

        ### Update a record of Account
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * If the `Username, ExternalId` field value is not empty and `Id` field value is empty, action try insert record according `Username, ExternalId` field value (if set, the value is a unique identifier).

        ### Create a new record of Account
        * If the value in the `Username, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`AccountData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountData'
        description: |-
          `Account` information to insert or update.

          The input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Inserted or updated `Account` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "AccessManager:Create, Update"
        - "AccessUser:Create, Update"
      tags:
      - Accounts
    post:
      description: |+
        Use the `AccountData` object resource to create new records.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `TenantId, LanguageId, TimezoneId, DateFormatId`

        ### Create a new record of Account
        * If the value in the `Id,Username, ExternalId` fields are empty then action insert a new record according input parameter entity record structure (`AccountData`).
        * If the value in the `Username, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`AccountData`).
        * If the `Id,Username, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the created record if the call is successful. Method returns an extended `Account` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

      operationId: Create Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountData'
        description: |-
          `Account` information to insert.

          The input parameter must be used in the `AccountData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Inserted `Account` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Create
        - AccessUser:Create
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Account/{Id}/Tenants:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Tenant` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `UserId, TenantId, AccountId`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Account Tenants
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nUserId, TenantId, AccountId, CreatedOn\n\
          ```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nUserId, TenantId, AccountId, CreatedOn\n\
            ```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: "0"
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenants'
          description: The list of Tenants
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Read
        - AccessUser:Read
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Account/{Id}/Tenant:
    post:
      description: |-
        Use the `TenantPost` object resource to insert or update (Upsert) `Tenant` using `UserId,AccountId.Username, AccountId.ExternalId` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `TenantData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `UserId, TenantId, AccountId`

        ### Update a record of Tenant
        * If the `UserId` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `UserId` field value (primary key).
        * If the `AccountId.Username, AccountId.ExternalId` field value is not empty and `UserId` field value is empty, action try insert record according `AccountId.Username, AccountId.ExternalId` field value (if set, the value is a unique identifier).

        ### Create a new record of Tenant
        * If the value in the `AccountId.Username, AccountId.ExternalId` and `UserId` fields are empty then action insert a new record according input parameter entity record structure (`TenantData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Tenant` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Account Tenant
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantData'
        description: |-
          `Tenant` information to insert or update.

          The input parameter must be used in the `TenantData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: Inserted or updated `Tenant` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "AccessManager:Create, Update"
        - "AccessUser:Create, Update"
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Account/{Id}/Tenant/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `Tenant` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `UserId,AccountId.Username, AccountId.ExternalId` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Tenant` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `UserId, TenantId, AccountId`

        ### Delete a record of Tenant
        * If the `UserId` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `UserId,AccountId.Username, AccountId.ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Account Tenant
      parameters:
      - description: |-
          The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Account record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the Tenant record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the Tenant record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `UserId`\
          \ field is used.\n\nExample: \n```\nAccountId.Username, AccountId.ExternalId\n\
          ```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `UserId`\
            \ field is used.\n\nExample: \n```\nAccountId.Username, AccountId.ExternalId\n\
            ```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: Deleted `Tenant` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - AccessManager:Delete
        - AccessUser:Delete
      tags:
      - Accounts
  /Endpoint/rest/api/v1/Department/{Id}:
    delete:
      description: |-
        Use the query string resource to delete `Department` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id,Name, ExternalId` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`

        ### Delete a record of Department
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id,Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Department
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName, ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName, ExternalId\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: Deleted `Department` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Delete
      tags:
      - Departments
    get:
      description: |-
        The method returns one record of the `Department`.

        Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`

        ### Get a record of Department
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id,Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
      operationId: Get Department
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName, ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName, ExternalId\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: The record of `Department` information
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Read
      tags:
      - Departments
    put:
      description: "Use the `DepartmentUpdateData` object resource to update `Department`\
        \ using `Id,Name, ExternalId` field(s) value.\n\nProvide the updated record\
        \ information in your request data and use the `PUT` method of the resource\
        \ with a specific record ID to update that record. \n\nThe input parameter\
        \ must be used in the `DepartmentUpdateData` record structure inside the `FieldType`\
        \ parameter in the foreign key fields.\n\nForeign key fields are: `DepartmentTypeId,\
        \ ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`\n\n### Update\
        \ a record of Department\n* If the `Id` field value is not matched, then a\
        \ `404` error is reported (`Errors/Not Found`), and the error record is returned..\
        \ You cannot change `Id` field value (primary key).\n* If the `Id` field value\
        \ is matched multiple times, then a `400` error is reported (`Errors/Multible\
        \ Rows`), and the error record is returned.\n* If the `Id,Name, ExternalId`\
        \ field value is matched multiple times, then a `400` error is reported (`Errors/Multible\
        \ Rows`), and the error record is returned.\n\nThe response body will contain\
        \ the object of the updated record if the call is successful. Method returns\
        \ an extended `Department` structure. Here, all foreign key fields are abstract\
        \ object structures, utilizing `AbstractText` or `AbstractLong` data types,\
        \ offering a detailed view of the data and related entities."
      operationId: Update Department
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName, ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName, ExternalId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentUpdateData'
        description: |-
          Department information to update.

          The input parameter must be used in the `DepartmentUpdateData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: Updated `Department` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Update
      tags:
      - Departments
  /Endpoint/rest/api/v1/Departments:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Department` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Departments
      parameters:
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, ExternalId, Name, DepartmentTypeId,\
          \ ParentDepartmentId, HierarchicalName, Level, ContactName, ContactEmail,\
          \ ContactPhone, OwnerId, CountryId, Is_Active, ModifiedOn, ModifiedBy, CreatedBy,\
          \ CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, ExternalId, Name, DepartmentTypeId,\
            \ ParentDepartmentId, HierarchicalName, Level, ContactName, ContactEmail,\
            \ ContactPhone, OwnerId, CountryId, Is_Active, ModifiedOn, ModifiedBy,\
            \ CreatedBy, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Departments'
          description: The list of Departments
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Read
      tags:
      - Departments
  /Endpoint/rest/api/v1/Department:
    patch:
      description: |-
        Use the `DepartmentUpsertData` object resource to insert or update (Upsert) `Department` using `Id,Name, ExternalId` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `DepartmentUpsertData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`

        ### Update a record of Department
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * If the `Name, ExternalId` field value is not empty and `Id` field value is empty, action try insert record according `Name, ExternalId` field value (if set, the value is a unique identifier).

        ### Create a new record of Department
        * If the value in the `Name, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`DepartmentInsertData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Department
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentUpsertData'
        description: |-
          `Department` information to insert or update.

          The input parameter must be used in the `DepartmentUpsertData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: Inserted or updated `Department` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Department:Create, Update"
      tags:
      - Departments
    post:
      description: |+
        Use the `DepartmentInsertData` object resource to create new records.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `DepartmentInsertData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`

        ### Create a new record of Department
        * If the value in the `Id,Name, ExternalId` fields are empty then action insert a new record according input parameter entity record structure (`DepartmentInsertData`).
        * If the value in the `Name, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`DepartmentInsertData`).
        * If the `Id,Name, ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the created record if the call is successful. Method returns an extended `Department` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

      operationId: Create Department
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentInsertData'
        description: |-
          `Department` information to insert.

          The input parameter must be used in the `DepartmentInsertData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: Inserted `Department` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Create
      tags:
      - Departments
  /Endpoint/rest/api/v1/Departments/Json:
    patch:
      description: |-
        Use the `DepartmentsText` object resource to insert or update (Upsert) a list of `DepartmentList` using `Id,Name, ExternalId` field(s) value.

        You can supply the required field values in the request data, and then use the `PATCH` method of the resource.

        The input parameter must be used in the `DepartmentList` record structure as text fields in the foreign key fields.

        Foreign key fields are: `DepartmentTypeId, ParentDepartmentId, OwnerId, CountryId, ModifiedBy, CreatedBy`

        ### Update a record of Department
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned. You cannot change `Id` field value (primary key).
        * If the `Name, ExternalId` field value is not empty and `Id` field value is empty, action try insert record according `Name, ExternalId` field value (if set, the value is a unique identifier).

        **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.

        ### Create a new record of Department
        * If the value in the `Name, ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`DepartmentInsertData`).

        The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `Department` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.
      operationId: Patch Departments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentsData'
        description: |-
          The list of Department information to insert or update.

          The input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.
        required: true
        x-bodyName: Data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Departments'
          description: "Inserted or updated list of Department information. \n"
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Import
      tags:
      - Departments
  /Endpoint/rest/api/v1/Department/{Id}/Users:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `DepartmentId, UserId, ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Department Users
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, DepartmentId, UserId, ModifiedOn,\
          \ ModifiedBy, CreatedBy, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, DepartmentId, UserId, ModifiedOn,\
            \ ModifiedBy, CreatedBy, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: "0"
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
          description: The list of Users
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Read
      tags:
      - Departments
    patch:
      description: |-
        Use the `UsersData` object resource to insert or update (Upsert) a list of `UserData` using `Id` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `UserList` record structure as text fields in the foreign key fields.

        Foreign key fields are: `DepartmentId, UserId, ModifiedBy, CreatedBy`

        ### Update a record of User
        * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.

        **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.

        ### Create a new record of User
        * If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`UserData`).

        The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.
      operationId: Patch Department Users
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The Delete not exists function delete orphan values from a table.

          If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
        explode: true
        in: query
        name: DeleteNotExists
        required: false
        schema:
          default: "false"
          description: |-
            The Delete not exists function delete orphan values from a table.

            If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersData'
        description: |-
          The list of User information to insert or update.

          The input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.
        required: true
        x-bodyName: Data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: "Inserted or updated list of User information. \n"
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Department:Create, Update"
      tags:
      - Departments
  /Endpoint/rest/api/v1/Department/{Id}/User:
    post:
      description: |-
        Use the `UserPost` object resource to insert or update (Upsert) `User` using `Id` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `UserData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `DepartmentId, UserId, ModifiedBy, CreatedBy`

        ### Update a record of User
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.

        ### Create a new record of User
        * If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`UserData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Department User
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
        description: |-
          `User` information to insert or update.

          The input parameter must be used in the `UserData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Inserted or updated `User` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Department:Create, Update"
      tags:
      - Departments
  /Endpoint/rest/api/v1/Department/{Id}/User/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `User` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `DepartmentId, UserId, ModifiedBy, CreatedBy`

        ### Delete a record of User
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Department User
      parameters:
      - description: |-
          The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Department record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\n\n```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\n\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Deleted `User` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Department:Delete
      tags:
      - Departments
  /Endpoint/rest/api/v1/Location/{Id}:
    delete:
      description: |-
        Use the query string resource to delete `Location` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id,Name,ExternalId` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`

        ### Delete a record of Location
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id,Name,ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Location
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName,ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName,ExternalId\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: Deleted `Location` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Delete
      tags:
      - Locations
    get:
      description: |-
        The method returns one record of the `Location`.

        Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`

        ### Get a record of Location
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id,Name,ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
      operationId: Get Location
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName,ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName,ExternalId\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: The record of `Location` information
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Read
      tags:
      - Locations
    put:
      description: "Use the `LocationData` object resource to update `Location` using\
        \ `Id,Name,ExternalId` field(s) value.\n\nProvide the updated record information\
        \ in your request data and use the `PUT` method of the resource with a specific\
        \ record ID to update that record. \n\nThe input parameter must be used in\
        \ the `LocationData` record structure inside the `FieldType` parameter in\
        \ the foreign key fields.\n\nForeign key fields are: `CountryId, TimezoneId,\
        \ CurrencyId, ModifiedBy, CreatedBy`\n\n### Update a record of Location\n\
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not\
        \ Found`), and the error record is returned.. You cannot change `Id` field\
        \ value (primary key).\n* If the `Id` field value is matched multiple times,\
        \ then a `400` error is reported (`Errors/Multible Rows`), and the error record\
        \ is returned.\n* If the `Id,Name,ExternalId` field value is matched multiple\
        \ times, then a `400` error is reported (`Errors/Multible Rows`), and the\
        \ error record is returned.\n\nThe response body will contain the object of\
        \ the updated record if the call is successful. Method returns an extended\
        \ `Location` structure. Here, all foreign key fields are abstract object structures,\
        \ utilizing `AbstractText` or `AbstractLong` data types, offering a detailed\
        \ view of the data and related entities."
      operationId: Update Location
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName,ExternalId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName,ExternalId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationData'
        description: |-
          Location information to update.

          The input parameter must be used in the `LocationData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: Updated `Location` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Update
      tags:
      - Locations
  /Endpoint/rest/api/v1/Locations:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Location` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Locations
      parameters:
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, ExternalId, Name, CountryId, TimezoneId,\
          \ CurrencyId, Is_Active, ModifiedOn, ModifiedBy, CreatedBy, CreatedOn\n\
          ```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, ExternalId, Name, CountryId,\
            \ TimezoneId, CurrencyId, Is_Active, ModifiedOn, ModifiedBy, CreatedBy,\
            \ CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locations'
          description: The list of Locations
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Read
      tags:
      - Locations
  /Endpoint/rest/api/v1/Location:
    patch:
      description: |-
        Use the `LocationData` object resource to insert or update (Upsert) `Location` using `Id,Name,ExternalId` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `LocationData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`

        ### Update a record of Location
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * If the `Name,ExternalId` field value is not empty and `Id` field value is empty, action try insert record according `Name,ExternalId` field value (if set, the value is a unique identifier).

        ### Create a new record of Location
        * If the value in the `Name,ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`LocationData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Location
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationData'
        description: |-
          `Location` information to insert or update.

          The input parameter must be used in the `LocationData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: Inserted or updated `Location` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Location:Create, Update"
      tags:
      - Locations
    post:
      description: |+
        Use the `LocationData` object resource to create new records.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `LocationData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`

        ### Create a new record of Location
        * If the value in the `Id,Name,ExternalId` fields are empty then action insert a new record according input parameter entity record structure (`LocationData`).
        * If the value in the `Name,ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`LocationData`).
        * If the `Id,Name,ExternalId` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the created record if the call is successful. Method returns an extended `Location` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

      operationId: Create Location
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationData'
        description: |-
          `Location` information to insert.

          The input parameter must be used in the `LocationData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: Inserted `Location` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Create
      tags:
      - Locations
  /Endpoint/rest/api/v1/Locations/Json:
    patch:
      description: |-
        Use the `LocationsText` object resource to insert or update (Upsert) a list of `LocationList` using `Id,Name,ExternalId` field(s) value.

        You can supply the required field values in the request data, and then use the `PATCH` method of the resource.

        The input parameter must be used in the `LocationList` record structure as text fields in the foreign key fields.

        Foreign key fields are: `CountryId, TimezoneId, CurrencyId, ModifiedBy, CreatedBy`

        ### Update a record of Location
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned. You cannot change `Id` field value (primary key).
        * If the `Name,ExternalId` field value is not empty and `Id` field value is empty, action try insert record according `Name,ExternalId` field value (if set, the value is a unique identifier).

        **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.

        ### Create a new record of Location
        * If the value in the `Name,ExternalId` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`LocationData`).

        The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `Location` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.
      operationId: Patch Locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationsData'
        description: |-
          The list of Location information to insert or update.

          The input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.
        required: true
        x-bodyName: Data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locations'
          description: "Inserted or updated list of Location information. \n"
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Import
      tags:
      - Locations
  /Endpoint/rest/api/v1/Location/{Id}/Users:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `LocationId, UserId, ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Location Users
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, LocationId, UserId, ModifiedOn,\
          \ ModifiedBy, CreatedBy, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, LocationId, UserId, ModifiedOn,\
            \ ModifiedBy, CreatedBy, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: "0"
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
          description: The list of Users
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Read
      tags:
      - Locations
    patch:
      description: |-
        Use the `UsersData` object resource to insert or update (Upsert) a list of `UserData` using `Id` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `UserList` record structure as text fields in the foreign key fields.

        Foreign key fields are: `LocationId, UserId, ModifiedBy, CreatedBy`

        ### Update a record of User
        * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.

        **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.

        ### Create a new record of User
        * If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`UserData`).

        The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `User` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.
      operationId: Patch Location Users
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The Delete not exists function delete orphan values from a table.

          If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
        explode: true
        in: query
        name: DeleteNotExists
        required: false
        schema:
          default: "false"
          description: |-
            The Delete not exists function delete orphan values from a table.

            If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersData'
        description: |-
          The list of User information to insert or update.

          The input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.
        required: true
        x-bodyName: Data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: "Inserted or updated list of User information. \n"
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Location:Create, Update"
      tags:
      - Locations
  /Endpoint/rest/api/v1/Location/{Id}/User:
    post:
      description: |-
        Use the `UserPost` object resource to insert or update (Upsert) `User` using `Id` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `UserData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `LocationId, UserId, ModifiedBy, CreatedBy`

        ### Update a record of User
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.

        ### Create a new record of User
        * If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`UserData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Location User
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
        description: |-
          `User` information to insert or update.

          The input parameter must be used in the `UserData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Inserted or updated `User` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Location:Create, Update"
      tags:
      - Locations
  /Endpoint/rest/api/v1/Location/{Id}/User/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `User` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `User` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `LocationId, UserId, ModifiedBy, CreatedBy`

        ### Delete a record of User
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Location User
      parameters:
      - description: |-
          The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Location record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the User record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\n\n```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\n\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Deleted `User` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Location:Delete
      tags:
      - Locations
  /Endpoint/rest/api/v1/Connection/{Id}:
    delete:
      description: |-
        Use the query string resource to delete `Connection` record. The method contains two parameters `Id` and `Name`. Specify the record `{Id}`, `Name` using `Id,Name` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `ModifiedBy, CreatedBy`

        ### Delete a record of Connection
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id,Name` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Connection
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: Deleted `Connection` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Delete
      tags:
      - Connections
    get:
      description: |-
        The method returns one record of the `Connection`.

        Method returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `ModifiedBy, CreatedBy`

        ### Get a record of Connection
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id,Name` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
      operationId: Get Connection
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: The record of `Connection` information
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Read
      tags:
      - Connections
    put:
      description: "Use the `ConnectionData` object resource to update `Connection`\
        \ using `Id,Name` field(s) value.\n\nProvide the updated record information\
        \ in your request data and use the `PUT` method of the resource with a specific\
        \ record ID to update that record. \n\nThe input parameter must be used in\
        \ the `ConnectionData` record structure inside the `FieldType` parameter in\
        \ the foreign key fields.\n\nForeign key fields are: `ModifiedBy, CreatedBy`\n\
        \n### Update a record of Connection\n* If the `Id` field value is not matched,\
        \ then a `404` error is reported (`Errors/Not Found`), and the error record\
        \ is returned.. You cannot change `Id` field value (primary key).\n* If the\
        \ `Id` field value is matched multiple times, then a `400` error is reported\
        \ (`Errors/Multible Rows`), and the error record is returned.\n* If the `Id,Name`\
        \ field value is matched multiple times, then a `400` error is reported (`Errors/Multible\
        \ Rows`), and the error record is returned.\n\nThe response body will contain\
        \ the object of the updated record if the call is successful. Method returns\
        \ an extended `Connection` structure. Here, all foreign key fields are abstract\
        \ object structures, utilizing `AbstractText` or `AbstractLong` data types,\
        \ offering a detailed view of the data and related entities."
      operationId: Update Connection
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nName\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nName\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionData'
        description: |-
          Connection information to update.

          The input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: Updated `Connection` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Update
      tags:
      - Connections
  /Endpoint/rest/api/v1/Connections:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Connection` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Connections
      parameters:
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, Name, Description, ApiKey, SecretKey,\
          \ URL, Is_Active, Is_System, ModifiedBy, ModifiedOn, CreatedBy, CreatedOn\n\
          ```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, Name, Description, ApiKey,\
            \ SecretKey, URL, Is_Active, Is_System, ModifiedBy, ModifiedOn, CreatedBy,\
            \ CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connections'
          description: The list of Connections
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Read
      tags:
      - Connections
  /Endpoint/rest/api/v1/Connection:
    patch:
      description: |-
        Use the `ConnectionData` object resource to insert or update (Upsert) `Connection` using `Id,Name` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `ModifiedBy, CreatedBy`

        ### Update a record of Connection
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * If the `Name` field value is not empty and `Id` field value is empty, action try insert record according `Name` field value (if set, the value is a unique identifier).

        ### Create a new record of Connection
        * If the value in the `Name` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`ConnectionData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Connection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionData'
        description: |-
          `Connection` information to insert or update.

          The input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: Inserted or updated `Connection` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Webhook:Create, Update"
      tags:
      - Connections
    post:
      description: |+
        Use the `ConnectionData` object resource to create new records.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `ModifiedBy, CreatedBy`

        ### Create a new record of Connection
        * If the value in the `Id,Name` fields are empty then action insert a new record according input parameter entity record structure (`ConnectionData`).
        * If the value in the `Name` and `Id` fields are empty then action insert a new record according input parameter entity record structure (`ConnectionData`).
        * If the `Id,Name` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the created record if the call is successful. Method returns an extended `Connection` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

      operationId: Create Connection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionData'
        description: |-
          `Connection` information to insert.

          The input parameter must be used in the `ConnectionData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: Inserted `Connection` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Create
      tags:
      - Connections
  /Endpoint/rest/api/v1/Connection/{Id}/Configs:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Config` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Connection Configs
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, WebhookConnectionId, WebhookEntityId,\
          \ HasCreateAccess, HasUpdateAccess, HasDeleteAccess, Is_Active, ModifiedBy,\
          \ ModifiedOn, CreatedBy, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, WebhookConnectionId, WebhookEntityId,\
            \ HasCreateAccess, HasUpdateAccess, HasDeleteAccess, Is_Active, ModifiedBy,\
            \ ModifiedOn, CreatedBy, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: "0"
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configs'
          description: The list of Configs
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Read
      tags:
      - Connections
    patch:
      description: |-
        Use the `ConfigsData` object resource to insert or update (Upsert) a list of `ConfigData` using `Id` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `ConfigList` record structure as text fields in the foreign key fields.

        Foreign key fields are: `WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy`

        ### Update a record of Config
        * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.

        **Attention!**, this can also cause an incorrect row update, but at the same time enables efficient data transfer between systems.

        ### Create a new record of Config
        * If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`ConfigData`).

        The response body will contain the record list structure of the updated or created record if the call is successful. The method returns a list structured with an extended `Config` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.
      operationId: Patch Connection Configs
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The Delete not exists function delete orphan values from a table.

          If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
        explode: true
        in: query
        name: DeleteNotExists
        required: false
        schema:
          default: "false"
          description: |-
            The Delete not exists function delete orphan values from a table.

            If you specify value, you do not need to manually delete orphan rows from the table, the service retrieves the result set and if it is not found from the json string, then delete orphan rows from the table.
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigsData'
        description: |-
          The list of Config information to insert or update.

          The input parameter must be used in the `Extra` record array structure inside the `Name` and `FieldName` parameters in the foreign key fields.
        required: true
        x-bodyName: Data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: "Inserted or updated list of Config information. \n"
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Webhook:Create, Update"
      tags:
      - Connections
  /Endpoint/rest/api/v1/Connection/{Id}/Config:
    post:
      description: |-
        Use the `ConfigPost` object resource to insert or update (Upsert) `Config` using `Id` field(s) value.

        You can supply the required field values in the request data, and then use the `POST` method of the resource.

        The input parameter must be used in the `ConfigData` record structure inside the `FieldType` parameter in the foreign key fields.

        Foreign key fields are: `WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy`

        ### Update a record of Config
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.. You cannot change `Id` field value (primary key).
        * When the Id field value is not provided, the system will automatically initiate the insertion of a new record.

        ### Create a new record of Config
        * If the value in the `Id` field is empty then action insert a new record according input parameter entity record structure (`ConfigData`).

        The response body will contain the object of the updated or created record if the call is successful. Method returns an extended `Config` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.
      operationId: Upsert Connection Config
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigData'
        description: |-
          `Config` information to insert or update.

          The input parameter must be used in the `ConfigData` record structure inside the `FieldType` parameter in the foreign key fields.
        required: true
        x-bodyName: Record
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: Inserted or updated `Config` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - "Webhook:Create, Update"
      tags:
      - Connections
  /Endpoint/rest/api/v1/Connection/{Id}/Config/{SubId}:
    delete:
      description: |-
        Use the query string resource to delete `Config` record. The method contains two parameters `SubId` and `SubName`. Specify the record `SubId`, `SubName` using `Id` field(s) value and use the `DELETE` method of the resource to delete a record.

        Method returns an extended `Config` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `WebhookConnectionId, WebhookEntityId, ModifiedBy, CreatedBy`

        ### Delete a record of Config
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.

        The response body will contain the object of the deleted record if the call is successful.
      operationId: Delete Connection Config
      parameters:
      - description: |-
          The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Connection record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\nId\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\nId\n```"
          type: string
        style: form
      - description: |-
          The identifier of the Config record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: SubId
        required: true
        schema:
          description: |-
            The identifier of the Config record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\n\n```"
        explode: true
        in: query
        name: SubName
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\n\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: Deleted `Config` information.
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Delete
      tags:
      - Connections
  /Endpoint/rest/api/v1/Entity/{Id}:
    get:
      description: |-
        The method returns one record of the `Entity`.

        Method returns an extended `Entity` structure. Here, all foreign key fields are abstract object structures, utilizing `AbstractText` or `AbstractLong` data types, offering a detailed view of the data and related entities.

        Foreign key fields are: `InternalConfigId`

        ### Get a record of Entity
        * If the `Id` field value is not matched, then a `404` error is reported (`Errors/Not Found`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
        * If the `Id` field value is matched multiple times, then a `400` error is reported (`Errors/Multible Rows`), and the error record is returned.
      operationId: Get Entity
      parameters:
      - description: |-
          The identifier of the Entity record. The parameter is part of the url address and some special characters are forbidden.

          You can extract any string to a base64 string.
          E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
        explode: false
        in: path
        name: Id
        required: true
        schema:
          description: |-
            The identifier of the Entity record. The parameter is part of the url address and some special characters are forbidden.

            You can extract any string to a base64 string.
            E.g email address name@domain.com value is base64|bmFtZUBkb21haW4uY29t
          type: string
        style: simple
      - description: "The name of the database field. If empty, the entity `Id` field\
          \ is used.\n\nExample: \n```\n\n```"
        explode: true
        in: query
        name: Name
        required: false
        schema:
          description: "The name of the database field. If empty, the entity `Id`\
            \ field is used.\n\nExample: \n```\n\n```"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: The record of `Entity` information
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Read
      tags:
      - Entities
  /Endpoint/rest/api/v1/Entities:
    get:
      description: |-
        Utilize this method to execute a query designed to fetch comprehensive information, delivering all results in a singular response. If necessary, the method returns a portion of the results along with an identifier to retrieve the remaining data.

        Leverage the search service to extract the requisite information from the system effectively.

        The method returns a list structured with an extended `Entity` representation. In this format, all foreign key fields are depicted as abstract object structures, employing `AbstractText` or `AbstractLong` data types. This offers an enriched and detailed perspective of the data and its associated entities.

        The foreign key fields involved are: `InternalConfigId`

        ### Example
        It searches for employees whose data has been modified since January 1, 2022, and belong to departments with external system identifiers DE001 and DE002. The system responds by returning the name, external identifier, and email address of the relevant employees. The retrieved information is organized in ascending order by the person&#39;s name, and a limit is set to return a maximum of 1000 rows.

        ```http
        fields=Name,ExternalId,Email&amp;Filters=(DepartmentId.ExternalId In DE001;DE002) AND (ModifiedOn &gt; 2022-01-01)&amp;Orders=Name ASC&amp;PageSize=1000
        ```
      operationId: List Entities
      parameters:
      - description: "Specify the fields you want to retrieve in the fields parameter\
          \ and use the GET method of the resource.\n\nThe list of database column\
          \ attributes. If list is empty or &quot;*&quot; then all of fields will\
          \ be returned.\n\nThis method converts a string list to a string with a\
          \ comma separator.\n\nExample: \n```\nId, Name, Application, InternalConfigId,\
          \ Is_Active, CreatedOn\n```"
        explode: true
        in: query
        name: Fields
        required: false
        schema:
          description: "Specify the fields you want to retrieve in the fields parameter\
            \ and use the GET method of the resource.\n\nThe list of database column\
            \ attributes. If list is empty or &quot;*&quot; then all of fields will\
            \ be returned.\n\nThis method converts a string list to a string with\
            \ a comma separator.\n\nExample: \n```\nId, Name, Application, InternalConfigId,\
            \ Is_Active, CreatedOn\n```"
          type: string
        style: form
      - description: |
          In the List methods, filtering of resources can be performed using filter parameters.

          You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

          The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

          Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

          The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

          You can add multiple values separated by comma when using the `In`, `NotIn` operators.
          Example of text field; `USA; FIN; ARE`
          Example of numeric field; `1, 2, 3`

          Example of filters:
          ```sql
          Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

          Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

          Filters=ExternalId In S100;S101;S120;100

          Filters=Id = 100

          ```
        explode: true
        in: query
        name: Filters
        required: false
        schema:
          description: |
            In the List methods, filtering of resources can be performed using filter parameters.

            You can also use parent tables as a search filter. For example, the `Employee` table has a `DepartmentId` field, so you can search for a department name using the `DepartmentId.Name` field name. All fields in the parent table are available.

            The name of the entity field. Example: `Name` or relation field `OwnerId.Name`

            Please refer to the corresponding method&#39;s documentation for the complete list of supported filter parameters by record.

            The operator must be a standard comparison operator =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, In, Like, NotIn

            You can add multiple values separated by comma when using the `In`, `NotIn` operators.
            Example of text field; `USA; FIN; ARE`
            Example of numeric field; `1, 2, 3`

            Example of filters:
            ```sql
            Filters=(DepartmentId.Name = My Department) AND (DepartmentId.CreatedOn = 2021-01-01)

            Filters=(DepartmentId.Name = My Department 1) OR (DepartmentId.ExternalId In DE001;DE002)

            Filters=ExternalId In S100;S101;S120;100

            Filters=Id = 100

            ```
          type: string
        style: form
      - description: "The `Orders` parameter is provided for sorting the result in\
          \ the desired order. Both the attribute based on which sorting needs to\
          \ be done, and the order of sorting (ascending or descending) can be specified.\
          \ This method converts a string list to a string with a comma separator.\n\
          \nExample: \n```\nName DESC, CreatedOn ASC\n```"
        explode: true
        in: query
        name: Orders
        required: false
        schema:
          description: "The `Orders` parameter is provided for sorting the result\
            \ in the desired order. Both the attribute based on which sorting needs\
            \ to be done, and the order of sorting (ascending or descending) can be\
            \ specified. This method converts a string list to a string with a comma\
            \ separator.\n\nExample: \n```\nName DESC, CreatedOn ASC\n```"
          type: string
        style: form
      - description: This field specifies the current page of results being returned.
          It&#39;s often used in conjunction with `PageSize` to manage pagination
          by indicating which subset of the total data is currently being retrieved.
        explode: true
        in: query
        name: CurrentPage
        required: false
        schema:
          default: 0
          description: This field specifies the current page of results being returned.
            It&#39;s often used in conjunction with `PageSize` to manage pagination
            by indicating which subset of the total data is currently being retrieved.
          format: int32
          type: integer
        style: form
      - description: |-
          The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

          The value ranges from `1` to `1000` and defaults to `50`.
        explode: true
        in: query
        name: PageSize
        required: false
        schema:
          default: 0
          description: |-
            The field indicates the number of items returned in a single page or response. It helps clients determine how many items to display per page and how to request additional pages if needed.

            The value ranges from `1` to `1000` and defaults to `50`.
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entities'
          description: The list of Entities
        "400":
          content:
            application/json:
              example:
                Errors:
                - The user has provided input that the browser is unable to convert.
                - There are multiple rows in the database for the same value
                - The value does not match the specified entity structure
                - '...'
                Type: /Errors/Bad Input
                Title: Bad Request
                StatusCode: 400
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request - The user has provided input that the browser
            is unable to convert.
        "401":
          content:
            application/json:
              example:
                Errors:
                - The session Id or OAuth token used has expired or is invalid.
                Type: /Errors/Unauthorized
                Title: Unauthorized
                StatusCode: 401
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - The response status code indicates that the
            client request has not been completed because it lacks valid authentication
            credentials for the requested resource.
        "403":
          content:
            application/json:
              example:
                Errors:
                - The user does not have access to execute operation
                Type: /Errors/Permission
                Title: Bad Request
                StatusCode: 403
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - The user does not have access to execute operation
        "500":
          content:
            application/json:
              example:
                Errors:
                - An internal server error is an error on the web server you're trying
                  to access.
                Type: /Errors/Internal Server Error
                Title: Internal Server Error
                StatusCode: 500
                Instance: /OpenApi/rest/Xzy
                RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error - An internal server error is an error
            on the web server you're trying to access.
      security:
      - OAuth2:
        - Webhook:Read
      tags:
      - Entities
components:
  responses:
    "400":
      content:
        application/json:
          example:
            Errors:
            - The user has provided input that the browser is unable to convert.
            - There are multiple rows in the database for the same value
            - The value does not match the specified entity structure
            - '...'
            Type: /Errors/Bad Input
            Title: Bad Request
            StatusCode: 400
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request - The user has provided input that the browser is unable
        to convert.
    "401":
      content:
        application/json:
          example:
            Errors:
            - The session Id or OAuth token used has expired or is invalid.
            Type: /Errors/Unauthorized
            Title: Unauthorized
            StatusCode: 401
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized - The response status code indicates that the client
        request has not been completed because it lacks valid authentication credentials
        for the requested resource.
    "403":
      content:
        application/json:
          example:
            Errors:
            - The user does not have access to execute operation
            Type: /Errors/Permission
            Title: Bad Request
            StatusCode: 403
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden - The user does not have access to execute operation
    "404":
      content:
        application/json:
          example:
            Errors:
            - The requested resource does not exist
            Type: /Errors/Not Found
            Title: Not Found
            StatusCode: 404
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found - The requested resource does not exist.
    "500":
      content:
        application/json:
          example:
            Errors:
            - An internal server error is an error on the web server you're trying
              to access.
            Type: /Errors/Internal Server Error
            Title: Internal Server Error
            StatusCode: 500
            Instance: /OpenApi/rest/Xzy
            RequestKey: 894ea43c-b8a6-4195-9a9c-82c07d9cc33a
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal Server Error - An internal server error is an error on
        the web server you're trying to access.
  schemas:
    Meta:
      description: The object provides metadata about the list of items returned in
        the API response. It typically includes information that helps clients understand
        and work with the data."
      example:
        Type: User
        PageSize: 50
        CurrentPage: 50
        TotalItems: 1000
      properties:
        TotalItems:
          default: 0
          description: "This field represents the total number of items available\
            \ in the entire dataset, not just the items returned in the current response.\
            \ It's useful for implementing pagination, as clients can use it to calculate\
            \ the number of pages or total available items."
          example: 1000
          format: int32
          type: integer
        CurrentPage:
          default: 1
          description: This field specifies the current page of results being returned.
            It's often used in conjunction with `PageSize` to manage pagination by
            indicating which subset of the total data is currently being retrieved.
          example: 50
          format: int32
          type: integer
        PageSize:
          default: 50
          description: The field indicates the number of items returned in a single
            page or response. It helps clients determine how many items to display
            per page and how to request additional pages if needed.
          example: 50
          format: int32
          type: integer
        Type:
          description: The type of the record
          example: User
          type: string
      required:
      - CurrentPage
      - PageSize
      - TotalItems
      - Type
      type: object
    Error:
      description: The list of errors. Throw specific exceptions based on the received
        error.
      example:
        Type: ""
        Instance: ""
        RequestKey: ""
        Error:
        - ""
        - ""
        Title: ""
        StatusCode: 400
      properties:
        Error:
          description: Human-readable explanation of the errors
          items:
            default: ""
            type: string
          type: array
        Type:
          default: ""
          description: URI identifier that categorizes the error
          type: string
        Title:
          default: ""
          description: "Brief, human-readable message about the error"
          type: string
        StatusCode:
          description: The HTTP response code
          example: 400
          format: int32
          type: integer
        Instance:
          default: ""
          description: URI that identifies the specific occurrence of the error
          type: string
        RequestKey:
          default: ""
          description: Provides a request key that identifies the current request.
          type: string
      required:
      - Errors
      - StatusCode
      type: object
    Account:
      description: The record of Account information.
      example:
        Email: Email
        ModifiedOn: 1900-01-01T00:00:00Z
        FirstName: FirstName
        NotifyByEmail: false
        ExternalId: ExternalId
        TimezoneId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        NotifyBySMS: false
        Name: Name
        TenantId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Is_Active: false
        Username: Username
        Phone: Phone
        DateFormatId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        Id: Id
        LastName: LastName
        CreatedOn: 1900-01-01T00:00:00Z
        LanguageId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
      properties:
        Id:
          description: The identifier of account
          type: string
        TenantId:
          $ref: '#/components/schemas/AbstractLong'
        Name:
          description: The name of the account
          type: string
        FirstName:
          description: Person's first name
          type: string
        LastName:
          description: Person's last name
          type: string
        Phone:
          description: The phone number of account. The phone number is unique in
            the system
          type: string
        Email:
          description: The e-mail of account. The email is unique in the system
          type: string
        LanguageId:
          $ref: '#/components/schemas/AbstractText'
        TimezoneId:
          $ref: '#/components/schemas/AbstractText'
        DateFormatId:
          $ref: '#/components/schemas/AbstractText'
        Username:
          description: Username used to log in into the system. The username is unique
            in the system
          type: string
        ExternalId:
          description: External Authentication identifier. Example Azure AD guid
          type: string
        NotifyByEmail:
          default: false
          description: Defines if a person should get notifications via e-mail
          example: false
          type: boolean
        NotifyBySMS:
          default: false
          description: Defines if a contact should get notifications via SMS
          example: false
          type: boolean
        Is_Active:
          default: false
          description: Defines if the account is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Email
      - FirstName
      - Id
      - LastName
      - Name
      - TenantId
      - Username
      type: object
    AbstractLong:
      description: The abstract object structure
      example:
        Type: User
        ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
        Id: 1234567891234567
        Name: Bob Normal
      properties:
        Id:
          default: 0
          description: "The primary key of the record row. If the Id attribute is\
            \ used, then it must be unique"
          example: 1234567891234567
          format: int64
          type: integer
        ExternalId:
          description: "The external identier of the record row. If the External Id\
            \ attribute is used, then it must be unique"
          example: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          type: string
        Name:
          description: The name of the record row
          example: Bob Normal
          type: string
        Type:
          description: The type of the record object
          example: User
          type: string
      required:
      - ExternalId
      - Id
      - Name
      - Type
      type: object
    AbstractText:
      description: The abstract object structure
      example:
        Type: User
        ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
        Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
        Name: Bob Normal
      properties:
        Id:
          description: "The primary key of the record row. If the Id attribute is\
            \ used, then it must be unique"
          example: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          type: string
        ExternalId:
          description: "The external identier of the record row. If the External Id\
            \ attribute is used, then it must be unique"
          example: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          type: string
        Name:
          description: The name of the record row
          example: Bob Normal
          type: string
        Type:
          description: The type of the record object
          example: User
          type: string
      required:
      - ExternalId
      - Id
      - Name
      - Type
      type: object
    Accounts:
      description: The list of `Account` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - Email: Email
          ModifiedOn: 1900-01-01T00:00:00Z
          FirstName: FirstName
          NotifyByEmail: false
          ExternalId: ExternalId
          TimezoneId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          NotifyBySMS: false
          Name: Name
          TenantId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          Username: Username
          Phone: Phone
          DateFormatId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Id: Id
          LastName: LastName
          CreatedOn: 1900-01-01T00:00:00Z
          LanguageId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
        - Email: Email
          ModifiedOn: 1900-01-01T00:00:00Z
          FirstName: FirstName
          NotifyByEmail: false
          ExternalId: ExternalId
          TimezoneId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          NotifyBySMS: false
          Name: Name
          TenantId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          Username: Username
          Phone: Phone
          DateFormatId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Id: Id
          LastName: LastName
          CreatedOn: 1900-01-01T00:00:00Z
          LanguageId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Account records`
          items:
            $ref: '#/components/schemas/Account'
          type: array
      type: object
    AccountData:
      description: The record of Account information.
      example:
        Email: Email
        ModifiedOn: 1900-01-01T00:00:00Z
        FirstName: FirstName
        NotifyByEmail: false
        ExternalId: ExternalId
        TimezoneId:
          Field: Field
          Value: Value
        NotifyBySMS: false
        Name: Name
        TenantId:
          Field: Field
          Value: Value
        Is_Active: false
        Username: Username
        Phone: Phone
        DateFormatId:
          Field: Field
          Value: Value
        Id: Id
        LastName: LastName
        CreatedOn: 1900-01-01T00:00:00Z
        LanguageId:
          Field: Field
          Value: Value
      properties:
        Id:
          description: The identifier of account
          type: string
        TenantId:
          $ref: '#/components/schemas/FieldType'
        Name:
          description: The name of the account
          type: string
        FirstName:
          description: Person's first name
          type: string
        LastName:
          description: Person's last name
          type: string
        Phone:
          description: The phone number of account. The phone number is unique in
            the system
          type: string
        Email:
          description: The e-mail of account. The email is unique in the system
          type: string
        LanguageId:
          $ref: '#/components/schemas/FieldType'
        TimezoneId:
          $ref: '#/components/schemas/FieldType'
        DateFormatId:
          $ref: '#/components/schemas/FieldType'
        Username:
          description: Username used to log in into the system. The username is unique
            in the system
          type: string
        ExternalId:
          description: External Authentication identifier. Example Azure AD guid
          type: string
        NotifyByEmail:
          default: false
          description: Defines if a person should get notifications via e-mail
          example: false
          type: boolean
        NotifyBySMS:
          default: false
          description: Defines if a contact should get notifications via SMS
          example: false
          type: boolean
        Is_Active:
          default: false
          description: Defines if the account is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Email
      - FirstName
      - Id
      - LastName
      - Name
      - TenantId
      - Username
      type: object
    FieldType:
      description: The field object structure
      example:
        Field: Field
        Value: Value
      properties:
        Field:
          description: The name of the data field
          type: string
        Value:
          description: The value of the data row
          type: string
      required:
      - Field
      - Value
      type: object
    Tenant:
      description: The record of Tenant information.
      example:
        TenantId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        UserId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        CreatedOn: 1900-01-01T00:00:00Z
      properties:
        UserId:
          $ref: '#/components/schemas/AbstractLong'
        TenantId:
          $ref: '#/components/schemas/AbstractLong'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - CreatedOn
      - TenantId
      - UserId
      type: object
    Tenants:
      description: The list of `Tenant` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - TenantId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          UserId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          CreatedOn: 1900-01-01T00:00:00Z
        - TenantId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          UserId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          CreatedOn: 1900-01-01T00:00:00Z
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Tenant records`
          items:
            $ref: '#/components/schemas/Tenant'
          type: array
      type: object
    TenantData:
      description: The record of Tenant information.
      example:
        TenantId:
          Field: Field
          Value: Value
        UserId:
          Field: Field
          Value: Value
        CreatedOn: 1900-01-01T00:00:00Z
      properties:
        UserId:
          $ref: '#/components/schemas/FieldType'
        TenantId:
          $ref: '#/components/schemas/FieldType'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - CreatedOn
      - TenantId
      - UserId
      type: object
    Department:
      description: The record of Department information.
      example:
        DepartmentTypeId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        CountryId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        CreatedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        ParentDepartmentId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        ModifiedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        HierarchicalName: HierarchicalName
        Name: Name
        ContactPhone: ContactPhone
        OwnerId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Is_Active: false
        ContactEmail: ContactEmail
        Level: 0
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ContactName: ContactName
      properties:
        Id:
          description: The guid to identify the department
          type: string
        ExternalId:
          description: The external identifier of the department
          type: string
        Name:
          description: The name of the department
          type: string
        DepartmentTypeId:
          $ref: '#/components/schemas/AbstractText'
        ParentDepartmentId:
          $ref: '#/components/schemas/AbstractText'
        HierarchicalName:
          description: The hierarchical name of the department
          type: string
        Level:
          default: 0
          description: The department level at the hierarchy
          example: 0
          format: int32
          type: integer
        ContactName:
          description: The contact name of company or department
          type: string
        ContactEmail:
          description: The contact email of external company or department
          type: string
        ContactPhone:
          type: string
        OwnerId:
          $ref: '#/components/schemas/AbstractLong'
        CountryId:
          $ref: '#/components/schemas/AbstractText'
        Is_Active:
          default: false
          description: Defines if the department is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        ModifiedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - DepartmentTypeId
      - Id
      - Is_Active
      - Name
      type: object
    Departments:
      description: The list of `Department` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - DepartmentTypeId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CountryId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          ParentDepartmentId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          HierarchicalName: HierarchicalName
          Name: Name
          ContactPhone: ContactPhone
          OwnerId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ContactEmail: ContactEmail
          Level: 0
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ContactName: ContactName
        - DepartmentTypeId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CountryId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          ParentDepartmentId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          HierarchicalName: HierarchicalName
          Name: Name
          ContactPhone: ContactPhone
          OwnerId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ContactEmail: ContactEmail
          Level: 0
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ContactName: ContactName
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Department records`
          items:
            $ref: '#/components/schemas/Department'
          type: array
      type: object
    DepartmentUpsertData:
      description: The record of Department information.
      example:
        DepartmentTypeId:
          Field: Field
          Value: Value
        CountryId:
          Field: Field
          Value: Value
        CreatedBy:
          Field: Field
          Value: Value
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        ParentDepartmentId:
          Field: Field
          Value: Value
        ModifiedBy:
          Field: Field
          Value: Value
        HierarchicalName: HierarchicalName
        Name: Name
        ContactPhone: ContactPhone
        OwnerId:
          Field: Field
          Value: Value
        Is_Active: false
        ContactEmail: ContactEmail
        Level: 0
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ContactName: ContactName
      properties:
        Id:
          description: The guid to identify the department
          type: string
        ExternalId:
          description: The external identifier of the department
          type: string
        Name:
          description: The name of the department
          type: string
        DepartmentTypeId:
          $ref: '#/components/schemas/FieldType'
        ParentDepartmentId:
          $ref: '#/components/schemas/FieldType'
        HierarchicalName:
          description: The hierarchical name of the department
          type: string
        Level:
          default: 0
          description: The department level at the hierarchy
          example: 0
          format: int32
          type: integer
        ContactName:
          description: The contact name of company or department
          type: string
        ContactEmail:
          description: The contact email of external company or department
          type: string
        ContactPhone:
          type: string
        OwnerId:
          $ref: '#/components/schemas/FieldType'
        CountryId:
          $ref: '#/components/schemas/FieldType'
        Is_Active:
          default: false
          description: Defines if the department is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        ModifiedBy:
          $ref: '#/components/schemas/FieldType'
        CreatedBy:
          $ref: '#/components/schemas/FieldType'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - DepartmentTypeId
      - Id
      - Is_Active
      - Name
      type: object
    DepartmentInsertData:
      description: The record of Department information.
      example:
        DepartmentTypeId:
          Field: Field
          Value: Value
        ContactPhone: ContactPhone
        CountryId:
          Field: Field
          Value: Value
        OwnerId:
          Field: Field
          Value: Value
        ExternalId: ExternalId
        ContactEmail: ContactEmail
        Id: Id
        ParentDepartmentId:
          Field: Field
          Value: Value
        ContactName: ContactName
        Name: Name
      properties:
        Id:
          description: The guid to identify the department
          type: string
        ExternalId:
          description: The external identifier of the department
          type: string
        Name:
          description: The name of the department
          type: string
        DepartmentTypeId:
          $ref: '#/components/schemas/FieldType'
        ParentDepartmentId:
          $ref: '#/components/schemas/FieldType'
        ContactName:
          description: The contact name of company or department
          type: string
        ContactEmail:
          description: The contact email of external company or department
          type: string
        ContactPhone:
          type: string
        OwnerId:
          $ref: '#/components/schemas/FieldType'
        CountryId:
          $ref: '#/components/schemas/FieldType'
      required:
      - DepartmentTypeId
      - Id
      - Name
      type: object
    DepartmentUpdateData:
      description: The record of Department information.
      example:
        ContactPhone: ContactPhone
        CountryId:
          Field: Field
          Value: Value
        OwnerId:
          Field: Field
          Value: Value
        Is_Active: false
        ExternalId: ExternalId
        ContactEmail: ContactEmail
        ContactName: ContactName
        Name: Name
      properties:
        ExternalId:
          description: The external identifier of the department
          type: string
        Name:
          description: The name of the department
          type: string
        ContactName:
          description: The contact name of company or department
          type: string
        ContactEmail:
          description: The contact email of external company or department
          type: string
        ContactPhone:
          type: string
        OwnerId:
          $ref: '#/components/schemas/FieldType'
        CountryId:
          $ref: '#/components/schemas/FieldType'
        Is_Active:
          default: false
          description: Defines if the department is active and can be used
          example: false
          type: boolean
      required:
      - Is_Active
      - Name
      type: object
    DepartmentText:
      description: The record of Department information.
      example:
        DepartmentTypeId: DepartmentTypeId
        CountryId: CountryId
        CreatedBy: CreatedBy
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        ParentDepartmentId: ParentDepartmentId
        ModifiedBy: ModifiedBy
        HierarchicalName: HierarchicalName
        Name: Name
        ContactPhone: ContactPhone
        OwnerId: OwnerId
        Is_Active: false
        ContactEmail: ContactEmail
        Level: 0
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ContactName: ContactName
      properties:
        Id:
          description: The guid to identify the department
          type: string
        ExternalId:
          description: The external identifier of the department
          type: string
        Name:
          description: The name of the department
          type: string
        DepartmentTypeId:
          description: The  type of department
          type: string
        ParentDepartmentId:
          description: The identifier of the parent department
          type: string
        HierarchicalName:
          description: The hierarchical name of the department
          type: string
        Level:
          default: 0
          description: The department level at the hierarchy
          example: 0
          format: int32
          type: integer
        ContactName:
          description: The contact name of company or department
          type: string
        ContactEmail:
          description: The contact email of external company or department
          type: string
        ContactPhone:
          type: string
        OwnerId:
          description: The identifier of the user who own the department
          type: string
        CountryId:
          description: The country of the department
          type: string
        Is_Active:
          default: false
          description: Defines if the department is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        ModifiedBy:
          description: The Identifier of the user who updated the record
          type: string
        CreatedBy:
          description: The Identifier of the user who created the record
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - DepartmentTypeId
      - Id
      - Is_Active
      - Name
      type: object
    DepartmentsData:
      description: The data loading record of Department importing
      example:
        Departments:
        - DepartmentTypeId: DepartmentTypeId
          CountryId: CountryId
          CreatedBy: CreatedBy
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          ParentDepartmentId: ParentDepartmentId
          ModifiedBy: ModifiedBy
          HierarchicalName: HierarchicalName
          Name: Name
          ContactPhone: ContactPhone
          OwnerId: OwnerId
          Is_Active: false
          ContactEmail: ContactEmail
          Level: 0
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ContactName: ContactName
        - DepartmentTypeId: DepartmentTypeId
          CountryId: CountryId
          CreatedBy: CreatedBy
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          ParentDepartmentId: ParentDepartmentId
          ModifiedBy: ModifiedBy
          HierarchicalName: HierarchicalName
          Name: Name
          ContactPhone: ContactPhone
          OwnerId: OwnerId
          Is_Active: false
          ContactEmail: ContactEmail
          Level: 0
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ContactName: ContactName
        Extra:
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        IsFullValidation: false
      properties:
        Extra:
          description: List validation for entity attribute
          items:
            $ref: '#/components/schemas/ListValidation'
          type: array
        IsFullValidation:
          default: false
          description: "If the value is true, the data quality of all fields are checked.\
            \ This has an effect on performance."
          example: false
          type: boolean
        Departments:
          description: The list of `Department` data record for import
          items:
            $ref: '#/components/schemas/DepartmentText'
          type: array
      type: object
    ListValidation:
      description: List validation for entity attribute
      example:
        Pattern: Pattern
        DefaultValue: DefaultValue
        Min: Min
        Required: false
        Max: Max
        Unique: false
        FieldName: FieldName
        Name: Name
      properties:
        Name:
          description: The name of the entity field.
          type: string
        FieldName:
          description: "The field name of relation database table.\n\nExample; \n\
            The field name is &quot;TenantId&quot; and is associated with the &quot;Tenant&quot;\
            \ table. You want to use in the &quot;Tenant&quot; table &quot;Name&quot;\
            \ field fetching data. Once &quot;Name&quot; is specified, the validation\
            \ service retrieves the tenant identifier from the &quot;Tenant&quot;\
            \ table based on the &quot;Name&quot; field."
          type: string
        Required:
          default: false
          description: "If True, the value is required."
          example: false
          type: boolean
        Unique:
          default: false
          description: "If True, the value must be unique in the database and you\
            \ cannot add multiple values."
          example: false
          type: boolean
        Max:
          description: The max value of input value.
          type: string
        Min:
          description: The min value of input value.
          type: string
        Pattern:
          description: The pattern of the validation. Searches the input string for
            an occurrence of a regular expression.
          type: string
        DefaultValue:
          description: "The default value of row. If the value of the field is empty,\
            \ the service automatically sets the value in the field. If the value\
            \ does not match the data type, the value is cleaned. Remember data types."
          type: string
      required:
      - Name
      type: object
    User:
      description: The record of User information.
      example:
        CreatedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        ModifiedOn: 1900-01-01T00:00:00Z
        UserId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
      properties:
        Id:
          description: The identifier of user department
          type: string
        UserId:
          $ref: '#/components/schemas/AbstractLong'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        ModifiedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      type: object
    Users:
      description: The list of `User` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          ModifiedOn: 1900-01-01T00:00:00Z
          UserId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
        - CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          ModifiedOn: 1900-01-01T00:00:00Z
          UserId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `User records`
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    UserData:
      description: The record of User information.
      example:
        CreatedBy:
          Field: Field
          Value: Value
        ModifiedOn: 1900-01-01T00:00:00Z
        UserId:
          Field: Field
          Value: Value
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Field: Field
          Value: Value
      properties:
        Id:
          description: The identifier of user department
          type: string
        UserId:
          $ref: '#/components/schemas/FieldType'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        ModifiedBy:
          $ref: '#/components/schemas/FieldType'
        CreatedBy:
          $ref: '#/components/schemas/FieldType'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      type: object
    UserText:
      description: The record of User information.
      example:
        CreatedBy: CreatedBy
        ModifiedOn: 1900-01-01T00:00:00Z
        UserId: UserId
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy: ModifiedBy
      properties:
        Id:
          description: The identifier of user department
          type: string
        UserId:
          description: The identifier of the user who has link the department
          type: string
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        ModifiedBy:
          description: The Identifier of the user who updated the record
          type: string
        CreatedBy:
          description: The Identifier of the user who created the record
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      type: object
    UsersData:
      description: The data loading record of User importing
      example:
        Extra:
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        IsFullValidation: false
        Users:
        - CreatedBy: CreatedBy
          ModifiedOn: 1900-01-01T00:00:00Z
          UserId: UserId
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy: ModifiedBy
        - CreatedBy: CreatedBy
          ModifiedOn: 1900-01-01T00:00:00Z
          UserId: UserId
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy: ModifiedBy
      properties:
        Extra:
          description: List validation for entity attribute
          items:
            $ref: '#/components/schemas/ListValidation'
          type: array
        IsFullValidation:
          default: false
          description: "If the value is true, the data quality of all fields are checked.\
            \ This has an effect on performance."
          example: false
          type: boolean
        Users:
          description: The list of `User` data record for import
          items:
            $ref: '#/components/schemas/UserText'
          type: array
      type: object
    Location:
      description: The record of Location information.
      example:
        CountryId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        CreatedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        Id: Id
        TimezoneId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        CurrencyId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        Name: Name
      properties:
        Id:
          description: The guid to identify the location
          type: string
        ExternalId:
          description: The external identifier of the location
          type: string
        Name:
          description: The name of the location
          type: string
        CountryId:
          $ref: '#/components/schemas/AbstractText'
        TimezoneId:
          $ref: '#/components/schemas/AbstractText'
        CurrencyId:
          $ref: '#/components/schemas/AbstractText'
        Is_Active:
          default: false
          description: Defines if the location is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        ModifiedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - Is_Active
      - Name
      type: object
    Locations:
      description: The list of `Location` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - CountryId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Id: Id
          TimezoneId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          CurrencyId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Name: Name
        - CountryId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Id: Id
          TimezoneId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          CurrencyId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Name: Name
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Location records`
          items:
            $ref: '#/components/schemas/Location'
          type: array
      type: object
    LocationData:
      description: The record of Location information.
      example:
        CountryId:
          Field: Field
          Value: Value
        CreatedBy:
          Field: Field
          Value: Value
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        Id: Id
        TimezoneId:
          Field: Field
          Value: Value
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Field: Field
          Value: Value
        CurrencyId:
          Field: Field
          Value: Value
        Name: Name
      properties:
        Id:
          description: The guid to identify the location
          type: string
        ExternalId:
          description: The external identifier of the location
          type: string
        Name:
          description: The name of the location
          type: string
        CountryId:
          $ref: '#/components/schemas/FieldType'
        TimezoneId:
          $ref: '#/components/schemas/FieldType'
        CurrencyId:
          $ref: '#/components/schemas/FieldType'
        Is_Active:
          default: false
          description: Defines if the location is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        ModifiedBy:
          $ref: '#/components/schemas/FieldType'
        CreatedBy:
          $ref: '#/components/schemas/FieldType'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - Is_Active
      - Name
      type: object
    LocationText:
      description: The record of Location information.
      example:
        CountryId: CountryId
        CreatedBy: CreatedBy
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        ExternalId: ExternalId
        Id: Id
        TimezoneId: TimezoneId
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy: ModifiedBy
        CurrencyId: CurrencyId
        Name: Name
      properties:
        Id:
          description: The guid to identify the location
          type: string
        ExternalId:
          description: The external identifier of the location
          type: string
        Name:
          description: The name of the location
          type: string
        CountryId:
          description: The country of the location
          type: string
        TimezoneId:
          description: The timezone of the location
          type: string
        CurrencyId:
          description: The currency of the location
          type: string
        Is_Active:
          default: false
          description: Defines if the location is active and can be used
          example: false
          type: boolean
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        ModifiedBy:
          description: The Identifier of the user who updated the record
          type: string
        CreatedBy:
          description: The Identifier of the user who created the record
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - Is_Active
      - Name
      type: object
    LocationsData:
      description: The data loading record of Location importing
      example:
        Extra:
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        IsFullValidation: false
        Locations:
        - CountryId: CountryId
          CreatedBy: CreatedBy
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Id: Id
          TimezoneId: TimezoneId
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy: ModifiedBy
          CurrencyId: CurrencyId
          Name: Name
        - CountryId: CountryId
          CreatedBy: CreatedBy
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          ExternalId: ExternalId
          Id: Id
          TimezoneId: TimezoneId
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy: ModifiedBy
          CurrencyId: CurrencyId
          Name: Name
      properties:
        Extra:
          description: List validation for entity attribute
          items:
            $ref: '#/components/schemas/ListValidation'
          type: array
        IsFullValidation:
          default: false
          description: "If the value is true, the data quality of all fields are checked.\
            \ This has an effect on performance."
          example: false
          type: boolean
        Locations:
          description: The list of `Location` data record for import
          items:
            $ref: '#/components/schemas/LocationText'
          type: array
      type: object
    Connection:
      description: The record of Connection information.
      example:
        SecretKey: SecretKey
        Description: Description
        ApiKey: ApiKey
        CreatedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        Is_System: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        URL: URL
        Name: Name
      properties:
        Id:
          description: The identifier of the module that owns the entity that is being
            processed
          type: string
        Name:
          description: Name of connection
          type: string
        Description:
          description: Description of connection
          type: string
        ApiKey:
          description: "An API key is a unique identifier used to authenticate a user,\
            \ developer, or calling program to an API"
          type: string
        SecretKey:
          description: "A secret key for signing payloads, enhancing security."
          type: string
        URL:
          description: Webhook external service URL-address
          type: string
        Is_Active:
          default: false
          description: "If true, the configuration is active"
          example: false
          type: boolean
        Is_System:
          default: false
          description: "If true, the configuration is internal to the system and not\
            \ visible in the user interface"
          example: false
          type: boolean
        ModifiedBy:
          $ref: '#/components/schemas/AbstractLong'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - Name
      - URL
      type: object
    Connections:
      description: The list of `Connection` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - SecretKey: SecretKey
          Description: Description
          ApiKey: ApiKey
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          Is_System: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          URL: URL
          Name: Name
        - SecretKey: SecretKey
          Description: Description
          ApiKey: ApiKey
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          Is_System: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          URL: URL
          Name: Name
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Connection records`
          items:
            $ref: '#/components/schemas/Connection'
          type: array
      type: object
    ConnectionData:
      description: The record of Connection information.
      example:
        SecretKey: SecretKey
        Description: Description
        ApiKey: ApiKey
        CreatedBy:
          Field: Field
          Value: Value
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        Is_System: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Field: Field
          Value: Value
        URL: URL
        Name: Name
      properties:
        Id:
          description: The identifier of the module that owns the entity that is being
            processed
          type: string
        Name:
          description: Name of connection
          type: string
        Description:
          description: Description of connection
          type: string
        ApiKey:
          description: "An API key is a unique identifier used to authenticate a user,\
            \ developer, or calling program to an API"
          type: string
        SecretKey:
          description: "A secret key for signing payloads, enhancing security."
          type: string
        URL:
          description: Webhook external service URL-address
          type: string
        Is_Active:
          default: false
          description: "If true, the configuration is active"
          example: false
          type: boolean
        Is_System:
          default: false
          description: "If true, the configuration is internal to the system and not\
            \ visible in the user interface"
          example: false
          type: boolean
        ModifiedBy:
          $ref: '#/components/schemas/FieldType'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedBy:
          $ref: '#/components/schemas/FieldType'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - Name
      - URL
      type: object
    Config:
      description: The record of Config information.
      example:
        HasDeleteAccess: false
        CreatedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        WebhookEntityId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        HasCreateAccess: false
        HasUpdateAccess: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 1234567891234567
          Name: Bob Normal
      properties:
        Id:
          description: The identifier of the config
          type: string
        WebhookEntityId:
          $ref: '#/components/schemas/AbstractText'
        HasCreateAccess:
          default: false
          description: Service has create access to data
          example: false
          type: boolean
        HasUpdateAccess:
          default: false
          description: Service has update access to data
          example: false
          type: boolean
        HasDeleteAccess:
          default: false
          description: Service has delete access to data
          example: false
          type: boolean
        Is_Active:
          default: false
          description: "If true, the configuration is active"
          example: false
          type: boolean
        ModifiedBy:
          $ref: '#/components/schemas/AbstractLong'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedBy:
          $ref: '#/components/schemas/AbstractLong'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - WebhookEntityId
      type: object
    Configs:
      description: The list of `Config` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - HasDeleteAccess: false
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          WebhookEntityId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          HasCreateAccess: false
          HasUpdateAccess: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
        - HasDeleteAccess: false
          CreatedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          WebhookEntityId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          HasCreateAccess: false
          HasUpdateAccess: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 1234567891234567
            Name: Bob Normal
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Config records`
          items:
            $ref: '#/components/schemas/Config'
          type: array
      type: object
    ConfigData:
      description: The record of Config information.
      example:
        HasDeleteAccess: false
        CreatedBy:
          Field: Field
          Value: Value
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        WebhookEntityId:
          Field: Field
          Value: Value
        HasCreateAccess: false
        HasUpdateAccess: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy:
          Field: Field
          Value: Value
      properties:
        Id:
          description: The identifier of the config
          type: string
        WebhookEntityId:
          $ref: '#/components/schemas/FieldType'
        HasCreateAccess:
          default: false
          description: Service has create access to data
          example: false
          type: boolean
        HasUpdateAccess:
          default: false
          description: Service has update access to data
          example: false
          type: boolean
        HasDeleteAccess:
          default: false
          description: Service has delete access to data
          example: false
          type: boolean
        Is_Active:
          default: false
          description: "If true, the configuration is active"
          example: false
          type: boolean
        ModifiedBy:
          $ref: '#/components/schemas/FieldType'
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedBy:
          $ref: '#/components/schemas/FieldType'
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - WebhookEntityId
      type: object
    ConfigText:
      description: The record of Config information.
      example:
        HasDeleteAccess: false
        CreatedBy: CreatedBy
        Is_Active: false
        ModifiedOn: 1900-01-01T00:00:00Z
        WebhookEntityId: WebhookEntityId
        HasCreateAccess: false
        HasUpdateAccess: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        ModifiedBy: ModifiedBy
      properties:
        Id:
          description: The identifier of the config
          type: string
        WebhookEntityId:
          description: Identifier of webhook entity.
          type: string
        HasCreateAccess:
          default: false
          description: Service has create access to data
          example: false
          type: boolean
        HasUpdateAccess:
          default: false
          description: Service has update access to data
          example: false
          type: boolean
        HasDeleteAccess:
          default: false
          description: Service has delete access to data
          example: false
          type: boolean
        Is_Active:
          default: false
          description: "If true, the configuration is active"
          example: false
          type: boolean
        ModifiedBy:
          description: The Identifier of the user who updated the record
          type: string
        ModifiedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was updated.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
        CreatedBy:
          description: The Identifier of the user who created the record
          type: string
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Id
      - WebhookEntityId
      type: object
    ConfigsData:
      description: The data loading record of Config importing
      example:
        Extra:
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        - Pattern: Pattern
          DefaultValue: DefaultValue
          Min: Min
          Required: false
          Max: Max
          Unique: false
          FieldName: FieldName
          Name: Name
        IsFullValidation: false
        Configs:
        - HasDeleteAccess: false
          CreatedBy: CreatedBy
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          WebhookEntityId: WebhookEntityId
          HasCreateAccess: false
          HasUpdateAccess: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy: ModifiedBy
        - HasDeleteAccess: false
          CreatedBy: CreatedBy
          Is_Active: false
          ModifiedOn: 1900-01-01T00:00:00Z
          WebhookEntityId: WebhookEntityId
          HasCreateAccess: false
          HasUpdateAccess: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          ModifiedBy: ModifiedBy
      properties:
        Extra:
          description: List validation for entity attribute
          items:
            $ref: '#/components/schemas/ListValidation'
          type: array
        IsFullValidation:
          default: false
          description: "If the value is true, the data quality of all fields are checked.\
            \ This has an effect on performance."
          example: false
          type: boolean
        Configs:
          description: The list of `Config` data record for import
          items:
            $ref: '#/components/schemas/ConfigText'
          type: array
      type: object
    Entity:
      description: The record of Entity information.
      example:
        InternalConfigId:
          Type: User
          ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
          Name: Bob Normal
        Is_Active: false
        Id: Id
        CreatedOn: 1900-01-01T00:00:00Z
        Application: Application
        Name: Name
      properties:
        Id:
          description: The Guid identifier of web hook entity
          type: string
        Name:
          description: Name of entity
          type: string
        Application:
          description: Name of application
          type: string
        InternalConfigId:
          $ref: '#/components/schemas/AbstractText'
        Is_Active:
          default: false
          description: "If true, the entity is active"
          example: false
          type: boolean
        CreatedOn:
          default: 1900-01-01T00:00:00Z
          description: The date the record was created.
          example: 1900-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - Application
      - Id
      - InternalConfigId
      - Name
      type: object
    Entities:
      description: The list of `Entity` records
      example:
        Meta:
          Type: User
          PageSize: 50
          CurrentPage: 50
          TotalItems: 1000
        Data:
        - InternalConfigId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Is_Active: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          Application: Application
          Name: Name
        - InternalConfigId:
            Type: User
            ExternalId: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Id: 3ad64ab3-bd04-46c5-b1d7-c0b34be9e5b5
            Name: Bob Normal
          Is_Active: false
          Id: Id
          CreatedOn: 1900-01-01T00:00:00Z
          Application: Application
          Name: Name
      properties:
        Meta:
          $ref: '#/components/schemas/Meta'
        Data:
          description: The list of `Entity records`
          items:
            $ref: '#/components/schemas/Entity'
          type: array
      type: object
  securitySchemes:
    OAuth2:
      description: oAuth autentication flow
      flows:
        clientCredentials:
          refreshUrl: https://dev.esystems.fi/oAuth/rest/v2/Token
          scopes:
            AccessManager:Read: Allows to edit access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessUser:Read: Allows to review access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessManager:Create, Update: Allows to edit access groups and all related
              data. (ABAC) permissions required to perform a function.
            AccessUser:Create, Update: Allows to review access groups and all related
              data. (ABAC) permissions required to perform a function.
            AccessManager:Create: Allows to edit access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessUser:Create: Allows to review access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessManager:Update: Allows to edit access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessUser:Update: Allows to review access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessManager:Delete: Allows to edit access groups and all related data.
              (ABAC) permissions required to perform a function.
            AccessUser:Delete: Allows to review access groups and all related data.
              (ABAC) permissions required to perform a function.
          tokenUrl: https://dev.esystems.fi/oAuth/rest/v2/Token
      type: oauth2

